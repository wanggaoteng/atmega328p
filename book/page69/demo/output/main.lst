
output/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000012e4  00001378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080013c  0080013c  000013b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ae  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c34  00000000  00000000  00002b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1f  00000000  00000000  0000374e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00004470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00004750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f7  00000000  00000000  00004c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000654b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ee       	ldi	r30, 0xE4	; 228
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 33       	cpi	r26, 0x3C	; 60
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e3       	ldi	r26, 0x3C	; 60
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 34       	cpi	r26, 0x48	; 72
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 91 06 	call	0xd22	; 0xd22 <main>
      9e:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <avr_uart_putchar>:

	xdev_out(avr_uart_putchar);
}

void avr_uart_putchar(char c, FILE *stream) 
{
      a6:	cf 93       	push	r28
      a8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
      aa:	8a 30       	cpi	r24, 0x0A	; 10
      ac:	19 f4       	brne	.+6      	; 0xb4 <avr_uart_putchar+0xe>
        avr_uart_putchar('\r', stream);
      ae:	8d e0       	ldi	r24, 0x0D	; 13
      b0:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
      b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      b8:	85 ff       	sbrs	r24, 5
      ba:	fc cf       	rjmp	.-8      	; 0xb4 <avr_uart_putchar+0xe>
    UDR0 = c;
      bc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
      c0:	cf 91       	pop	r28
      c2:	08 95       	ret

000000c4 <avr_uart_getchar>:

char avr_uart_getchar(FILE *stream) 
{
    loop_until_bit_is_set(UCSR0A, RXC0);
      c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      c8:	87 ff       	sbrs	r24, 7
      ca:	fc cf       	rjmp	.-8      	; 0xc4 <avr_uart_getchar>
    return UDR0;
      cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
      d0:	08 95       	ret

000000d2 <avr_uart_getchar_echo>:


char avr_uart_getchar_echo(FILE *stream) 
{
      d2:	cf 93       	push	r28
    loop_until_bit_is_set(UCSR0A, RXC0);
      d4:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      d8:	27 ff       	sbrs	r18, 7
      da:	fc cf       	rjmp	.-8      	; 0xd4 <avr_uart_getchar_echo+0x2>
    char c=UDR0;
      dc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    avr_uart_putchar(c, stream);
      e0:	bc 01       	movw	r22, r24
      e2:	8c 2f       	mov	r24, r28
      e4:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    return c;
}
      e8:	8c 2f       	mov	r24, r28
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <ilog10>:
/*----------------------------------------------*/
#include <math.h>


static int ilog10 (double n)	/* Calculate log10(n) in integer output */
{
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	6b 01       	movw	r12, r22
      fc:	7c 01       	movw	r14, r24
	int rv = 0;
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	c0 e0       	ldi	r28, 0x00	; 0

	while (n >= 10) {	/* Decimate digit in right shift */
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	40 e2       	ldi	r20, 0x20	; 32
     108:	51 e4       	ldi	r21, 0x41	; 65
     10a:	c7 01       	movw	r24, r14
     10c:	b6 01       	movw	r22, r12
     10e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__gesf2>
     112:	87 ff       	sbrs	r24, 7
     114:	12 c0       	rjmp	.+36     	; 0x13a <ilog10+0x4c>
			n /= 100000; rv += 5;
		} else {
			n /= 10; rv++;
		}
	}
	while (n < 1) {		/* Decimate digit in left shift */
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	5f e3       	ldi	r21, 0x3F	; 63
     11e:	c7 01       	movw	r24, r14
     120:	b6 01       	movw	r22, r12
     122:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     126:	87 fd       	sbrc	r24, 7
     128:	2a c0       	rjmp	.+84     	; 0x17e <ilog10+0x90>
		} else {
			n *= 10; rv--;
		}
	}
	return rv;
}
     12a:	ce 01       	movw	r24, r28
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	ff 90       	pop	r15
     132:	ef 90       	pop	r14
     134:	df 90       	pop	r13
     136:	cf 90       	pop	r12
     138:	08 95       	ret
static int ilog10 (double n)	/* Calculate log10(n) in integer output */
{
	int rv = 0;

	while (n >= 10) {	/* Decimate digit in right shift */
		if (n >= 100000) {
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e5       	ldi	r19, 0x50	; 80
     13e:	43 ec       	ldi	r20, 0xC3	; 195
     140:	57 e4       	ldi	r21, 0x47	; 71
     142:	c7 01       	movw	r24, r14
     144:	b6 01       	movw	r22, r12
     146:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__gesf2>
     14a:	87 fd       	sbrc	r24, 7
     14c:	0c c0       	rjmp	.+24     	; 0x166 <ilog10+0x78>
			n /= 100000; rv += 5;
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	30 e5       	ldi	r19, 0x50	; 80
     152:	43 ec       	ldi	r20, 0xC3	; 195
     154:	57 e4       	ldi	r21, 0x47	; 71
     156:	c7 01       	movw	r24, r14
     158:	b6 01       	movw	r22, r12
     15a:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
     15e:	6b 01       	movw	r12, r22
     160:	7c 01       	movw	r14, r24
     162:	25 96       	adiw	r28, 0x05	; 5
     164:	ce cf       	rjmp	.-100    	; 0x102 <ilog10+0x14>
		} else {
			n /= 10; rv++;
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e2       	ldi	r20, 0x20	; 32
     16c:	51 e4       	ldi	r21, 0x41	; 65
     16e:	c7 01       	movw	r24, r14
     170:	b6 01       	movw	r22, r12
     172:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
     176:	6b 01       	movw	r12, r22
     178:	7c 01       	movw	r14, r24
     17a:	21 96       	adiw	r28, 0x01	; 1
     17c:	c2 cf       	rjmp	.-124    	; 0x102 <ilog10+0x14>
		}
	}
	while (n < 1) {		/* Decimate digit in left shift */
		if (n < 0.00001) {
     17e:	2c ea       	ldi	r18, 0xAC	; 172
     180:	35 ec       	ldi	r19, 0xC5	; 197
     182:	47 e2       	ldi	r20, 0x27	; 39
     184:	57 e3       	ldi	r21, 0x37	; 55
     186:	c7 01       	movw	r24, r14
     188:	b6 01       	movw	r22, r12
     18a:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     18e:	87 ff       	sbrs	r24, 7
     190:	0c c0       	rjmp	.+24     	; 0x1aa <ilog10+0xbc>
			n *= 100000; rv -= 5;
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e5       	ldi	r19, 0x50	; 80
     196:	43 ec       	ldi	r20, 0xC3	; 195
     198:	57 e4       	ldi	r21, 0x47	; 71
     19a:	c7 01       	movw	r24, r14
     19c:	b6 01       	movw	r22, r12
     19e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     1a2:	6b 01       	movw	r12, r22
     1a4:	7c 01       	movw	r14, r24
     1a6:	25 97       	sbiw	r28, 0x05	; 5
     1a8:	b6 cf       	rjmp	.-148    	; 0x116 <ilog10+0x28>
		} else {
			n *= 10; rv--;
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e2       	ldi	r20, 0x20	; 32
     1b0:	51 e4       	ldi	r21, 0x41	; 65
     1b2:	c7 01       	movw	r24, r14
     1b4:	b6 01       	movw	r22, r12
     1b6:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     1ba:	6b 01       	movw	r12, r22
     1bc:	7c 01       	movw	r14, r24
     1be:	21 97       	sbiw	r28, 0x01	; 1
     1c0:	aa cf       	rjmp	.-172    	; 0x116 <ilog10+0x28>

000001c2 <i10x>:
	return rv;
}


static double i10x (int n)	/* Calculate 10^n */
{
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	ec 01       	movw	r28, r24
	double rv = 1;
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 e8       	ldi	r24, 0x80	; 128
     1ce:	9f e3       	ldi	r25, 0x3F	; 63

	while (n > 0) {		/* Left shift */
     1d0:	1c 16       	cp	r1, r28
     1d2:	1d 06       	cpc	r1, r29
     1d4:	2c f0       	brlt	.+10     	; 0x1e0 <i10x+0x1e>
			rv *= 100000; n -= 5;
		} else {
			rv *= 10; n--;
		}
	}
	while (n < 0) {		/* Right shift */
     1d6:	20 97       	sbiw	r28, 0x00	; 0
     1d8:	b1 f4       	brne	.+44     	; 0x206 <i10x+0x44>
		} else {
			rv /= 10; n++;
		}
	}
	return rv;
}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret
static double i10x (int n)	/* Calculate 10^n */
{
	double rv = 1;

	while (n > 0) {		/* Left shift */
		if (n >= 5) {
     1e0:	c5 30       	cpi	r28, 0x05	; 5
     1e2:	d1 05       	cpc	r29, r1
     1e4:	44 f0       	brlt	.+16     	; 0x1f6 <i10x+0x34>
			rv *= 100000; n -= 5;
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e5       	ldi	r19, 0x50	; 80
     1ea:	43 ec       	ldi	r20, 0xC3	; 195
     1ec:	57 e4       	ldi	r21, 0x47	; 71
     1ee:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     1f2:	25 97       	sbiw	r28, 0x05	; 5
     1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <i10x+0xe>
		} else {
			rv *= 10; n--;
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e2       	ldi	r20, 0x20	; 32
     1fc:	51 e4       	ldi	r21, 0x41	; 65
     1fe:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     202:	21 97       	sbiw	r28, 0x01	; 1
     204:	e5 cf       	rjmp	.-54     	; 0x1d0 <i10x+0xe>
		}
	}
	while (n < 0) {		/* Right shift */
		if (n <= -5) {
     206:	cc 3f       	cpi	r28, 0xFC	; 252
     208:	2f ef       	ldi	r18, 0xFF	; 255
     20a:	d2 07       	cpc	r29, r18
     20c:	44 f4       	brge	.+16     	; 0x21e <i10x+0x5c>
			rv /= 100000; n += 5;
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e5       	ldi	r19, 0x50	; 80
     212:	43 ec       	ldi	r20, 0xC3	; 195
     214:	57 e4       	ldi	r21, 0x47	; 71
     216:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
     21a:	25 96       	adiw	r28, 0x05	; 5
     21c:	dc cf       	rjmp	.-72     	; 0x1d6 <i10x+0x14>
		} else {
			rv /= 10; n++;
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e2       	ldi	r20, 0x20	; 32
     224:	51 e4       	ldi	r21, 0x41	; 65
     226:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
     22a:	21 96       	adiw	r28, 0x01	; 1
     22c:	d4 cf       	rjmp	.-88     	; 0x1d6 <i10x+0x14>

0000022e <set_register_bit>:
#include "functions.h"
#include "util/delay.h"

void set_register_bit(volatile uint8_t *muc_register, uint8_t bit)
{
     22e:	fc 01       	movw	r30, r24
	*muc_register |= _BV(bit);
     230:	90 81       	ld	r25, Z
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	01 c0       	rjmp	.+2      	; 0x23a <set_register_bit+0xc>
     238:	22 0f       	add	r18, r18
     23a:	6a 95       	dec	r22
     23c:	ea f7       	brpl	.-6      	; 0x238 <set_register_bit+0xa>
     23e:	92 2b       	or	r25, r18
     240:	90 83       	st	Z, r25
}
     242:	08 95       	ret

00000244 <clear_register_bit>:

void clear_register_bit(volatile uint8_t *muc_register, uint8_t bit)
{
	*muc_register &= ~_BV(bit);
     244:	fc 01       	movw	r30, r24
     246:	40 81       	ld	r20, Z
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	01 c0       	rjmp	.+2      	; 0x250 <clear_register_bit+0xc>
     24e:	22 0f       	add	r18, r18
     250:	6a 95       	dec	r22
     252:	ea f7       	brpl	.-6      	; 0x24e <clear_register_bit+0xa>
     254:	20 95       	com	r18
     256:	24 23       	and	r18, r20
     258:	20 83       	st	Z, r18
}
     25a:	08 95       	ret

0000025c <blink>:
//delay: blink time interval
//n>0,delay>0  normal 
//n=0,delay>0  cycle 
//n=0,delay=0  toggle 
void blink(uint8_t n,uint16_t delay)
{
     25c:	4f 92       	push	r4
     25e:	5f 92       	push	r5
     260:	6f 92       	push	r6
     262:	7f 92       	push	r7
     264:	8f 92       	push	r8
     266:	9f 92       	push	r9
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	18 2f       	mov	r17, r24
	DDRB |= _BV(PB5);
     27e:	25 9a       	sbi	0x04, 5	; 4
	if((n>0)&&(delay>0))
     280:	88 23       	and	r24, r24
     282:	09 f4       	brne	.+2      	; 0x286 <blink+0x2a>
     284:	91 c0       	rjmp	.+290    	; 0x3a8 <blink+0x14c>
     286:	61 15       	cp	r22, r1
     288:	71 05       	cpc	r23, r1
     28a:	09 f4       	brne	.+2      	; 0x28e <blink+0x32>
     28c:	68 c0       	rjmp	.+208    	; 0x35e <blink+0x102>
	{
		while(n)
		{

			PORTB |= _BV(PB5);
			_delay_ms(delay);
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 32 08 	call	0x1064	; 0x1064 <__floatunsisf>
     296:	2b 01       	movw	r4, r22
     298:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	4a ef       	ldi	r20, 0xFA	; 250
     2a0:	54 e4       	ldi	r21, 0x44	; 68
     2a2:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     2a6:	6b 01       	movw	r12, r22
     2a8:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2aa:	0e 94 03 08 	call	0x1006	; 0x1006 <__fixunssfsi>
     2ae:	4b 01       	movw	r8, r22
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e8       	ldi	r20, 0x80	; 128
     2b6:	5f e3       	ldi	r21, 0x3F	; 63
     2b8:	c7 01       	movw	r24, r14
     2ba:	b6 01       	movw	r22, r12
     2bc:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     2c0:	c1 e0       	ldi	r28, 0x01	; 1
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	87 ff       	sbrs	r24, 7
     2c6:	e4 01       	movw	r28, r8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c8:	88 ec       	ldi	r24, 0xC8	; 200
     2ca:	a8 2e       	mov	r10, r24
     2cc:	b1 2c       	mov	r11, r1
	if((n>0)&&(delay>0))
	{
		while(n)
		{

			PORTB |= _BV(PB5);
     2ce:	2d 9a       	sbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e8       	ldi	r20, 0x80	; 128
     2d6:	5f e3       	ldi	r21, 0x3F	; 63
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     2e0:	87 fd       	sbrc	r24, 7
     2e2:	54 c0       	rjmp	.+168    	; 0x38c <blink+0x130>
		__ticks = 1;
	else if (__tmp > 65535)
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	3f ef       	ldi	r19, 0xFF	; 255
     2e8:	4f e7       	ldi	r20, 0x7F	; 127
     2ea:	57 e4       	ldi	r21, 0x47	; 71
     2ec:	c7 01       	movw	r24, r14
     2ee:	b6 01       	movw	r22, r12
     2f0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <blink+0x9e>
     2f8:	49 c0       	rjmp	.+146    	; 0x38c <blink+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e2       	ldi	r20, 0x20	; 32
     300:	51 e4       	ldi	r21, 0x41	; 65
     302:	c3 01       	movw	r24, r6
     304:	b2 01       	movw	r22, r4
     306:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     30a:	0e 94 03 08 	call	0x1006	; 0x1006 <__fixunssfsi>
		while(__ticks)
     30e:	61 15       	cp	r22, r1
     310:	71 05       	cpc	r23, r1
     312:	b1 f5       	brne	.+108    	; 0x380 <blink+0x124>
			_delay_ms(delay);
			PORTB &= ~_BV(PB5);
     314:	2d 98       	cbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e8       	ldi	r20, 0x80	; 128
     31c:	5f e3       	ldi	r21, 0x3F	; 63
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     326:	87 fd       	sbrc	r24, 7
     328:	3b c0       	rjmp	.+118    	; 0x3a0 <blink+0x144>
		__ticks = 1;
	else if (__tmp > 65535)
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	3f ef       	ldi	r19, 0xFF	; 255
     32e:	4f e7       	ldi	r20, 0x7F	; 127
     330:	57 e4       	ldi	r21, 0x47	; 71
     332:	c7 01       	movw	r24, r14
     334:	b6 01       	movw	r22, r12
     336:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__gesf2>
     33a:	18 16       	cp	r1, r24
     33c:	8c f5       	brge	.+98     	; 0x3a0 <blink+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e2       	ldi	r20, 0x20	; 32
     344:	51 e4       	ldi	r21, 0x41	; 65
     346:	c3 01       	movw	r24, r6
     348:	b2 01       	movw	r22, r4
     34a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     34e:	0e 94 03 08 	call	0x1006	; 0x1006 <__fixunssfsi>
		while(__ticks)
     352:	61 15       	cp	r22, r1
     354:	71 05       	cpc	r23, r1
     356:	f1 f4       	brne	.+60     	; 0x394 <blink+0x138>
			_delay_ms(delay);
			n--;
     358:	11 50       	subi	r17, 0x01	; 1
void blink(uint8_t n,uint16_t delay)
{
	DDRB |= _BV(PB5);
	if((n>0)&&(delay>0))
	{
		while(n)
     35a:	09 f0       	breq	.+2      	; 0x35e <blink+0x102>
     35c:	b8 cf       	rjmp	.-144    	; 0x2ce <blink+0x72>
		if(bit_is_set(PINB,PB5))
			PORTB &= ~_BV(PB5);
		else
			PORTB |= _BV(PB5);
	}
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	9f 90       	pop	r9
     374:	8f 90       	pop	r8
     376:	7f 90       	pop	r7
     378:	6f 90       	pop	r6
     37a:	5f 90       	pop	r5
     37c:	4f 90       	pop	r4
     37e:	08 95       	ret
     380:	c5 01       	movw	r24, r10
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <blink+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     386:	61 50       	subi	r22, 0x01	; 1
     388:	71 09       	sbc	r23, r1
     38a:	c1 cf       	rjmp	.-126    	; 0x30e <blink+0xb2>
     38c:	ce 01       	movw	r24, r28
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <blink+0x132>
     392:	c0 cf       	rjmp	.-128    	; 0x314 <blink+0xb8>
     394:	c5 01       	movw	r24, r10
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <blink+0x13a>
     39a:	61 50       	subi	r22, 0x01	; 1
     39c:	71 09       	sbc	r23, r1
     39e:	d9 cf       	rjmp	.-78     	; 0x352 <blink+0xf6>
     3a0:	ce 01       	movw	r24, r28
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <blink+0x146>
     3a6:	d8 cf       	rjmp	.-80     	; 0x358 <blink+0xfc>
			PORTB &= ~_BV(PB5);
			_delay_ms(delay);
			n--;
		}
	}
	else if((n==0)&&(delay>0))
     3a8:	61 15       	cp	r22, r1
     3aa:	71 05       	cpc	r23, r1
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <blink+0x154>
     3ae:	79 c0       	rjmp	.+242    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	{
		while(1)
		{
			PORTB |= _BV(PB5);
			_delay_ms(delay);
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	0e 94 32 08 	call	0x1064	; 0x1064 <__floatunsisf>
     3b8:	4b 01       	movw	r8, r22
     3ba:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	4a ef       	ldi	r20, 0xFA	; 250
     3c2:	54 e4       	ldi	r21, 0x44	; 68
     3c4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     3c8:	6b 01       	movw	r12, r22
     3ca:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3cc:	0e 94 03 08 	call	0x1006	; 0x1006 <__fixunssfsi>
     3d0:	2b 01       	movw	r4, r22
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	40 e8       	ldi	r20, 0x80	; 128
     3d8:	5f e3       	ldi	r21, 0x3F	; 63
     3da:	c7 01       	movw	r24, r14
     3dc:	b6 01       	movw	r22, r12
     3de:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     3e2:	c1 e0       	ldi	r28, 0x01	; 1
     3e4:	d0 e0       	ldi	r29, 0x00	; 0
     3e6:	87 ff       	sbrs	r24, 7
     3e8:	e2 01       	movw	r28, r4
     3ea:	08 ec       	ldi	r16, 0xC8	; 200
     3ec:	10 e0       	ldi	r17, 0x00	; 0
	}
	else if((n==0)&&(delay>0))
	{
		while(1)
		{
			PORTB |= _BV(PB5);
     3ee:	2d 9a       	sbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e8       	ldi	r20, 0x80	; 128
     3f6:	5f e3       	ldi	r21, 0x3F	; 63
     3f8:	c7 01       	movw	r24, r14
     3fa:	b6 01       	movw	r22, r12
     3fc:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     400:	87 fd       	sbrc	r24, 7
     402:	47 c0       	rjmp	.+142    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	3f ef       	ldi	r19, 0xFF	; 255
     408:	4f e7       	ldi	r20, 0x7F	; 127
     40a:	57 e4       	ldi	r21, 0x47	; 71
     40c:	c7 01       	movw	r24, r14
     40e:	b6 01       	movw	r22, r12
     410:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__gesf2>
     414:	18 16       	cp	r1, r24
     416:	0c f0       	brlt	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     418:	3c c0       	rjmp	.+120    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e2       	ldi	r20, 0x20	; 32
     420:	51 e4       	ldi	r21, 0x41	; 65
     422:	c5 01       	movw	r24, r10
     424:	b4 01       	movw	r22, r8
     426:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     42a:	0e 94 03 08 	call	0x1006	; 0x1006 <__fixunssfsi>
		while(__ticks)
     42e:	61 15       	cp	r22, r1
     430:	71 05       	cpc	r23, r1
     432:	49 f5       	brne	.+82     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			_delay_ms(delay);
			PORTB &= ~_BV(PB5);
     434:	2d 98       	cbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e8       	ldi	r20, 0x80	; 128
     43c:	5f e3       	ldi	r21, 0x3F	; 63
     43e:	c7 01       	movw	r24, r14
     440:	b6 01       	movw	r22, r12
     442:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     446:	87 fd       	sbrc	r24, 7
     448:	28 c0       	rjmp	.+80     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
		__ticks = 1;
	else if (__tmp > 65535)
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	3f ef       	ldi	r19, 0xFF	; 255
     44e:	4f e7       	ldi	r20, 0x7F	; 127
     450:	57 e4       	ldi	r21, 0x47	; 71
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__gesf2>
     45a:	18 16       	cp	r1, r24
     45c:	f4 f4       	brge	.+60     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 e2       	ldi	r20, 0x20	; 32
     464:	51 e4       	ldi	r21, 0x41	; 65
     466:	c5 01       	movw	r24, r10
     468:	b4 01       	movw	r22, r8
     46a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     46e:	0e 94 03 08 	call	0x1006	; 0x1006 <__fixunssfsi>
		while(__ticks)
     472:	61 15       	cp	r22, r1
     474:	71 05       	cpc	r23, r1
     476:	09 f4       	brne	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     478:	ba cf       	rjmp	.-140    	; 0x3ee <blink+0x192>
     47a:	c8 01       	movw	r24, r16
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     480:	61 50       	subi	r22, 0x01	; 1
     482:	71 09       	sbc	r23, r1
     484:	f6 cf       	rjmp	.-20     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     486:	c8 01       	movw	r24, r16
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     48c:	61 50       	subi	r22, 0x01	; 1
     48e:	71 09       	sbc	r23, r1
     490:	ce cf       	rjmp	.-100    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     492:	ce 01       	movw	r24, r28
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     498:	cd cf       	rjmp	.-102    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     49a:	ce 01       	movw	r24, r28
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     4a0:	a6 cf       	rjmp	.-180    	; 0x3ee <blink+0x192>
			_delay_ms(delay);
		}
	}
	else if((n==0)&&(delay==0))
	{
		DDRB |= _BV(PB5);
     4a2:	25 9a       	sbi	0x04, 5	; 4
		if(bit_is_set(PINB,PB5))
     4a4:	1d 9b       	sbis	0x03, 5	; 3
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			PORTB &= ~_BV(PB5);
     4a8:	2d 98       	cbi	0x05, 5	; 5
     4aa:	59 cf       	rjmp	.-334    	; 0x35e <blink+0x102>
		else
			PORTB |= _BV(PB5);
     4ac:	2d 9a       	sbi	0x05, 5	; 5
	}
}
     4ae:	57 cf       	rjmp	.-338    	; 0x35e <blink+0x102>

000004b0 <avr_uart_init>:
#endif
#include "util/setbaud.h"

void avr_uart_init(void) 
{
    UBRR0H = UBRRH_VALUE;
     4b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = UBRRL_VALUE;
     4b4:	83 e3       	ldi	r24, 0x33	; 51
     4b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
     4ba:	e0 ec       	ldi	r30, 0xC0	; 192
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	8d 7f       	andi	r24, 0xFD	; 253
     4c2:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     4c4:	86 e0       	ldi	r24, 0x06	; 6
     4c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     4ca:	88 e1       	ldi	r24, 0x18	; 24
     4cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	stdout = &avr_uart_output;
     4d0:	e2 e4       	ldi	r30, 0x42	; 66
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	8c e1       	ldi	r24, 0x1C	; 28
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &avr_uart_input;
     4dc:	8e e0       	ldi	r24, 0x0E	; 14
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	80 83       	st	Z, r24

	xdev_out(avr_uart_putchar);
     4e4:	83 e5       	ldi	r24, 0x53	; 83
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <xfunc_output+0x1>
     4ec:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <xfunc_output>
}
     4f0:	08 95       	ret

000004f2 <avr_uart_data_avaiable>:
}

// return 0 if no data available, read it if available
bool avr_uart_data_avaiable(char *data) 
{
    if (UCSR0A & (1<<RXC0)) {
     4f2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     4f6:	27 ff       	sbrs	r18, 7
     4f8:	06 c0       	rjmp	.+12     	; 0x506 <avr_uart_data_avaiable+0x14>
        *data = UDR0;
     4fa:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
        return true;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	08 95       	ret
    }
    return false;
     506:	80 e0       	ldi	r24, 0x00	; 0
}
     508:	08 95       	ret

0000050a <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
     50a:	fc 01       	movw	r30, r24
     50c:	cb 01       	movw	r24, r22
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
     50e:	30 97       	sbiw	r30, 0x00	; 0
     510:	09 f0       	breq	.+2      	; 0x514 <xfputc+0xa>
		func(chr);		/* Write a character to the output device */
     512:	09 94       	ijmp
	} else if (strptr) {
     514:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
     518:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__data_end+0x1>
     51c:	30 97       	sbiw	r30, 0x00	; 0
     51e:	41 f0       	breq	.+16     	; 0x530 <xfputc+0x26>
		 *strptr++ = chr;	/* Write a character to the memory */
     520:	9f 01       	movw	r18, r30
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	3f 4f       	sbci	r19, 0xFF	; 255
     526:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__data_end+0x1>
     52a:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <__data_end>
     52e:	60 83       	st	Z, r22
	}
}
     530:	08 95       	ret

00000532 <xputc>:

void xputc (
	int chr				/* Character to be output */
)
{
	xfputc(xfunc_output, chr);	/* Output it to the default output device */
     532:	bc 01       	movw	r22, r24
     534:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <xfunc_output>
     538:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <xfunc_output+0x1>
     53c:	0c 94 85 02 	jmp	0x50a	; 0x50a <xfputc>

00000540 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
     540:	2f 92       	push	r2
     542:	3f 92       	push	r3
     544:	4f 92       	push	r4
     546:	5f 92       	push	r5
     548:	6f 92       	push	r6
     54a:	7f 92       	push	r7
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	e5 97       	sbiw	r28, 0x35	; 53
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	de bf       	out	0x3e, r29	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	cd bf       	out	0x3d, r28	; 61
     574:	1c 01       	movw	r2, r24
     576:	5b 01       	movw	r10, r22
     578:	6a 01       	movw	r12, r20
     57a:	9e 01       	movw	r18, r28
     57c:	2f 5f       	subi	r18, 0xFF	; 255
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	3a a3       	std	Y+34, r19	; 0x22
     582:	29 a3       	std	Y+33, r18	; 0x21
				*buf++ = '0' + e % 10;
			}
		}
	}
	if (er) {	/* Error condition? */
		if (sign) *buf++ = sign;		/* Add sign if needed */
     584:	ae 01       	movw	r20, r28
     586:	4e 5f       	subi	r20, 0xFE	; 254
     588:	5f 4f       	sbci	r21, 0xFF	; 255
     58a:	5c a3       	std	Y+36, r21	; 0x24
     58c:	4b a3       	std	Y+35, r20	; 0x23
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
     58e:	d5 01       	movw	r26, r10
     590:	6c 91       	ld	r22, X
		if (!c) break;				/* End of format? */
     592:	66 23       	and	r22, r22
     594:	09 f4       	brne	.+2      	; 0x598 <xvfprintf+0x58>
     596:	20 c3       	rjmp	.+1600   	; 0xbd8 <__stack+0x2d9>
		if (c != '%') {				/* Pass it through if not a % sequense */
     598:	65 32       	cpi	r22, 0x25	; 37
     59a:	61 f0       	breq	.+24     	; 0x5b4 <xvfprintf+0x74>
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
     59c:	bf ef       	ldi	r27, 0xFF	; 255
     59e:	ab 1a       	sub	r10, r27
     5a0:	bb 0a       	sbc	r11, r27
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
     5a2:	06 2e       	mov	r0, r22
     5a4:	00 0c       	add	r0, r0
     5a6:	77 0b       	sbc	r23, r23
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
     5a8:	c1 01       	movw	r24, r2
     5aa:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     5ae:	dc a6       	std	Y+44, r13	; 0x2c
     5b0:	cb a6       	std	Y+43, r12	; 0x2b
     5b2:	d3 c0       	rjmp	.+422    	; 0x75a <xvfprintf+0x21a>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
     5b4:	f5 01       	movw	r30, r10
     5b6:	11 81       	ldd	r17, Z+1	; 0x01
		if (c == '0') {				/* Flag: left '0' padded */
     5b8:	10 33       	cpi	r17, 0x30	; 48
     5ba:	11 f5       	brne	.+68     	; 0x600 <xvfprintf+0xc0>
			pad = '0'; c = *fmt++;
     5bc:	33 96       	adiw	r30, 0x03	; 3
     5be:	20 e3       	ldi	r18, 0x30	; 48
     5c0:	2d a7       	std	Y+45, r18	; 0x2d
     5c2:	12 96       	adiw	r26, 0x02	; 2
     5c4:	1c 91       	ld	r17, X
		c = *fmt++;					/* Get a format character */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
     5c6:	91 2c       	mov	r9, r1
     5c8:	81 2c       	mov	r8, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
     5ca:	1a 32       	cpi	r17, 0x2A	; 42
     5cc:	41 f1       	breq	.+80     	; 0x61e <xvfprintf+0xde>
		c = *fmt++;					/* Get a format character */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
     5ce:	18 a6       	std	Y+40, r1	; 0x28
     5d0:	1f a2       	std	Y+39, r1	; 0x27
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
     5d2:	2a e0       	ldi	r18, 0x0A	; 10
     5d4:	5f 01       	movw	r10, r30
			if (n < 0) {			/* Flag: left justified */
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
     5d6:	80 ed       	ldi	r24, 0xD0	; 208
     5d8:	81 0f       	add	r24, r17
     5da:	8a 30       	cpi	r24, 0x0A	; 10
     5dc:	b0 f5       	brcc	.+108    	; 0x64a <xvfprintf+0x10a>
				w = w * 10 + c - '0';
     5de:	4f a1       	ldd	r20, Y+39	; 0x27
     5e0:	58 a5       	ldd	r21, Y+40	; 0x28
     5e2:	24 9f       	mul	r18, r20
     5e4:	c0 01       	movw	r24, r0
     5e6:	25 9f       	mul	r18, r21
     5e8:	90 0d       	add	r25, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	81 0f       	add	r24, r17
     5ee:	91 1d       	adc	r25, r1
     5f0:	17 fd       	sbrc	r17, 7
     5f2:	9a 95       	dec	r25
     5f4:	dc 01       	movw	r26, r24
     5f6:	d0 97       	sbiw	r26, 0x30	; 48
     5f8:	b8 a7       	std	Y+40, r27	; 0x28
     5fa:	af a3       	std	Y+39, r26	; 0x27
				c = *fmt++;
     5fc:	11 91       	ld	r17, Z+
     5fe:	ea cf       	rjmp	.-44     	; 0x5d4 <xvfprintf+0x94>
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
     600:	1d 32       	cpi	r17, 0x2D	; 45
     602:	21 f0       	breq	.+8      	; 0x60c <xvfprintf+0xcc>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
     604:	32 96       	adiw	r30, 0x02	; 2
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
     606:	b0 e2       	ldi	r27, 0x20	; 32
     608:	bd a7       	std	Y+45, r27	; 0x2d
     60a:	dd cf       	rjmp	.-70     	; 0x5c6 <xvfprintf+0x86>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
     60c:	33 96       	adiw	r30, 0x03	; 3
     60e:	12 96       	adiw	r26, 0x02	; 2
     610:	1c 91       	ld	r17, X
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
     612:	b0 e2       	ldi	r27, 0x20	; 32
     614:	bd a7       	std	Y+45, r27	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
     616:	b2 e0       	ldi	r27, 0x02	; 2
     618:	8b 2e       	mov	r8, r27
     61a:	91 2c       	mov	r9, r1
     61c:	d6 cf       	rjmp	.-84     	; 0x5ca <xvfprintf+0x8a>
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
			n = va_arg(arp, int);
     61e:	96 01       	movw	r18, r12
     620:	2e 5f       	subi	r18, 0xFE	; 254
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	d6 01       	movw	r26, r12
     626:	8d 91       	ld	r24, X+
     628:	9c 91       	ld	r25, X
			if (n < 0) {			/* Flag: left justified */
     62a:	97 ff       	sbrs	r25, 7
     62c:	06 c0       	rjmp	.+12     	; 0x63a <xvfprintf+0xfa>
				n = 0 - n; f = 2;
     62e:	91 95       	neg	r25
     630:	81 95       	neg	r24
     632:	91 09       	sbc	r25, r1
     634:	a2 e0       	ldi	r26, 0x02	; 2
     636:	8a 2e       	mov	r8, r26
     638:	91 2c       	mov	r9, r1
			}
			w = n; c = *fmt++;
     63a:	98 a7       	std	Y+40, r25	; 0x28
     63c:	8f a3       	std	Y+39, r24	; 0x27
     63e:	5f 01       	movw	r10, r30
     640:	bf ef       	ldi	r27, 0xFF	; 255
     642:	ab 1a       	sub	r10, r27
     644:	bb 0a       	sbc	r11, r27
     646:	10 81       	ld	r17, Z
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
			n = va_arg(arp, int);
     648:	69 01       	movw	r12, r18
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
     64a:	ee 24       	eor	r14, r14
     64c:	ea 94       	dec	r14
     64e:	fe 2c       	mov	r15, r14
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
     650:	1e 32       	cpi	r17, 0x2E	; 46
     652:	41 f5       	brne	.+80     	; 0x6a4 <xvfprintf+0x164>
			c = *fmt++;
     654:	f5 01       	movw	r30, r10
     656:	10 81       	ld	r17, Z
			if (c == '*') {				/* Precision from an argument */
     658:	1a 32       	cpi	r17, 0x2A	; 42
     65a:	c1 f0       	breq	.+48     	; 0x68c <xvfprintf+0x14c>
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
     65c:	31 96       	adiw	r30, 0x01	; 1
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
				c = *fmt++;
			} else {
				prec = 0;
     65e:	f1 2c       	mov	r15, r1
     660:	e1 2c       	mov	r14, r1
				while (c >= '0' && c <= '9') {
					prec = prec * 10 + c - '0';
     662:	2a e0       	ldi	r18, 0x0A	; 10
     664:	5f 01       	movw	r10, r30
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
				c = *fmt++;
			} else {
				prec = 0;
				while (c >= '0' && c <= '9') {
     666:	80 ed       	ldi	r24, 0xD0	; 208
     668:	81 0f       	add	r24, r17
     66a:	8a 30       	cpi	r24, 0x0A	; 10
     66c:	d8 f4       	brcc	.+54     	; 0x6a4 <xvfprintf+0x164>
					prec = prec * 10 + c - '0';
     66e:	2e 9d       	mul	r18, r14
     670:	c0 01       	movw	r24, r0
     672:	2f 9d       	mul	r18, r15
     674:	90 0d       	add	r25, r0
     676:	11 24       	eor	r1, r1
     678:	7c 01       	movw	r14, r24
     67a:	e1 0e       	add	r14, r17
     67c:	f1 1c       	adc	r15, r1
     67e:	17 fd       	sbrc	r17, 7
     680:	fa 94       	dec	r15
     682:	50 e3       	ldi	r21, 0x30	; 48
     684:	e5 1a       	sub	r14, r21
     686:	f1 08       	sbc	r15, r1
					c = *fmt++;
     688:	11 91       	ld	r17, Z+
     68a:	ec cf       	rjmp	.-40     	; 0x664 <xvfprintf+0x124>
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
     68c:	d6 01       	movw	r26, r12
     68e:	ed 90       	ld	r14, X+
     690:	fc 90       	ld	r15, X
				c = *fmt++;
     692:	11 81       	ldd	r17, Z+1	; 0x01
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
     694:	96 01       	movw	r18, r12
     696:	2e 5f       	subi	r18, 0xFE	; 254
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	69 01       	movw	r12, r18
				c = *fmt++;
     69c:	a5 01       	movw	r20, r10
     69e:	4e 5f       	subi	r20, 0xFE	; 254
     6a0:	5f 4f       	sbci	r21, 0xFF	; 255
     6a2:	5a 01       	movw	r10, r20
					prec = prec * 10 + c - '0';
					c = *fmt++;
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
     6a4:	1c 36       	cpi	r17, 0x6C	; 108
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <xvfprintf+0x176>
			f |= 4; c = *fmt++;
     6a8:	68 94       	set
     6aa:	82 f8       	bld	r8, 2
     6ac:	d5 01       	movw	r26, r10
     6ae:	1c 91       	ld	r17, X
     6b0:	f5 01       	movw	r30, r10
     6b2:	31 96       	adiw	r30, 0x01	; 1
     6b4:	5f 01       	movw	r10, r30
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
     6b6:	11 23       	and	r17, r17
     6b8:	09 f4       	brne	.+2      	; 0x6bc <xvfprintf+0x17c>
     6ba:	8e c2       	rjmp	.+1308   	; 0xbd8 <__stack+0x2d9>
		switch (c) {				/* Type is... */
     6bc:	17 36       	cpi	r17, 0x67	; 103
     6be:	bc f4       	brge	.+46     	; 0x6ee <xvfprintf+0x1ae>
     6c0:	15 36       	cpi	r17, 0x65	; 101
     6c2:	0c f0       	brlt	.+2      	; 0x6c6 <xvfprintf+0x186>
     6c4:	9b c0       	rjmp	.+310    	; 0x7fc <xvfprintf+0x2bc>
     6c6:	12 36       	cpi	r17, 0x62	; 98
     6c8:	09 f4       	brne	.+2      	; 0x6cc <xvfprintf+0x18c>
     6ca:	ea c1       	rjmp	.+980    	; 0xaa0 <__stack+0x1a1>
     6cc:	4c f4       	brge	.+18     	; 0x6e0 <xvfprintf+0x1a0>
     6ce:	15 34       	cpi	r17, 0x45	; 69
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <xvfprintf+0x194>
     6d2:	94 c0       	rjmp	.+296    	; 0x7fc <xvfprintf+0x2bc>
     6d4:	18 35       	cpi	r17, 0x58	; 88
     6d6:	89 f1       	breq	.+98     	; 0x73a <xvfprintf+0x1fa>
     6d8:	61 2f       	mov	r22, r17
     6da:	11 0f       	add	r17, r17
     6dc:	77 0b       	sbc	r23, r23
     6de:	64 cf       	rjmp	.-312    	; 0x5a8 <xvfprintf+0x68>
     6e0:	13 36       	cpi	r17, 0x63	; 99
     6e2:	71 f1       	breq	.+92     	; 0x740 <xvfprintf+0x200>
     6e4:	14 36       	cpi	r17, 0x64	; 100
     6e6:	c1 f7       	brne	.-16     	; 0x6d8 <xvfprintf+0x198>
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
     6e8:	2a e0       	ldi	r18, 0x0A	; 10
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	07 c0       	rjmp	.+14     	; 0x6fc <xvfprintf+0x1bc>
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
     6ee:	13 37       	cpi	r17, 0x73	; 115
     6f0:	b9 f1       	breq	.+110    	; 0x760 <xvfprintf+0x220>
     6f2:	fc f4       	brge	.+62     	; 0x732 <xvfprintf+0x1f2>
		case 'b':					/* Unsigned binary */
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
     6f4:	28 e0       	ldi	r18, 0x08	; 8
     6f6:	30 e0       	ldi	r19, 0x00	; 0
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
     6f8:	1f 36       	cpi	r17, 0x6F	; 111
     6fa:	71 f7       	brne	.-36     	; 0x6d8 <xvfprintf+0x198>
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
     6fc:	82 fe       	sbrs	r8, 2
     6fe:	d3 c1       	rjmp	.+934    	; 0xaa6 <__stack+0x1a7>
			v = (long)va_arg(arp, long);
     700:	a6 01       	movw	r20, r12
     702:	4c 5f       	subi	r20, 0xFC	; 252
     704:	5f 4f       	sbci	r21, 0xFF	; 255
     706:	5c a7       	std	Y+44, r21	; 0x2c
     708:	4b a7       	std	Y+43, r20	; 0x2b
     70a:	d6 01       	movw	r26, r12
     70c:	4d 91       	ld	r20, X+
     70e:	5d 91       	ld	r21, X+
     710:	6d 91       	ld	r22, X+
     712:	7c 91       	ld	r23, X
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
     714:	14 36       	cpi	r17, 0x64	; 100
     716:	09 f0       	breq	.+2      	; 0x71a <xvfprintf+0x1da>
     718:	d9 c1       	rjmp	.+946    	; 0xacc <__stack+0x1cd>
     71a:	77 ff       	sbrs	r23, 7
     71c:	d7 c1       	rjmp	.+942    	; 0xacc <__stack+0x1cd>
			v = 0 - v; f |= 1;
     71e:	70 95       	com	r23
     720:	60 95       	com	r22
     722:	50 95       	com	r21
     724:	41 95       	neg	r20
     726:	5f 4f       	sbci	r21, 0xFF	; 255
     728:	6f 4f       	sbci	r22, 0xFF	; 255
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	68 94       	set
     72e:	80 f8       	bld	r8, 0
     730:	cd c1       	rjmp	.+922    	; 0xacc <__stack+0x1cd>
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
     732:	15 37       	cpi	r17, 0x75	; 117
     734:	c9 f2       	breq	.-78     	; 0x6e8 <xvfprintf+0x1a8>
     736:	18 37       	cpi	r17, 0x78	; 120
     738:	79 f6       	brne	.-98     	; 0x6d8 <xvfprintf+0x198>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
     73a:	20 e1       	ldi	r18, 0x10	; 16
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	de cf       	rjmp	.-68     	; 0x6fc <xvfprintf+0x1bc>
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
     740:	96 01       	movw	r18, r12
     742:	2e 5f       	subi	r18, 0xFE	; 254
     744:	3f 4f       	sbci	r19, 0xFF	; 255
     746:	3c a7       	std	Y+44, r19	; 0x2c
     748:	2b a7       	std	Y+43, r18	; 0x2b
     74a:	d6 01       	movw	r26, r12
     74c:	6c 91       	ld	r22, X
     74e:	06 2e       	mov	r0, r22
     750:	00 0c       	add	r0, r0
     752:	77 0b       	sbc	r23, r23
     754:	c1 01       	movw	r24, r2
     756:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
     75a:	cb a4       	ldd	r12, Y+43	; 0x2b
     75c:	dc a4       	ldd	r13, Y+44	; 0x2c
     75e:	17 cf       	rjmp	.-466    	; 0x58e <xvfprintf+0x4e>
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
     760:	f6 01       	movw	r30, r12
     762:	32 96       	adiw	r30, 0x02	; 2
     764:	fc a7       	std	Y+44, r31	; 0x2c
     766:	eb a7       	std	Y+43, r30	; 0x2b
     768:	d6 01       	movw	r26, r12
     76a:	0d 91       	ld	r16, X+
     76c:	1c 91       	ld	r17, X
			if (!p) p = "";				/* Null ptr generates a null string */
     76e:	01 15       	cp	r16, r1
     770:	11 05       	cpc	r17, r1
     772:	11 f4       	brne	.+4      	; 0x778 <xvfprintf+0x238>
     774:	0a e3       	ldi	r16, 0x3A	; 58
     776:	11 e0       	ldi	r17, 0x01	; 1
			j = strlen(p);
     778:	c8 01       	movw	r24, r16
     77a:	0e 94 67 09 	call	0x12ce	; 0x12ce <strlen>
     77e:	6c 01       	movw	r12, r24
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
     780:	f7 fc       	sbrc	r15, 7
     782:	04 c0       	rjmp	.+8      	; 0x78c <xvfprintf+0x24c>
     784:	e8 16       	cp	r14, r24
     786:	f9 06       	cpc	r15, r25
     788:	08 f4       	brcc	.+2      	; 0x78c <xvfprintf+0x24c>
     78a:	67 01       	movw	r12, r14
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
     78c:	34 01       	movw	r6, r8
     78e:	e2 e0       	ldi	r30, 0x02	; 2
     790:	6e 22       	and	r6, r30
     792:	77 24       	eor	r7, r7
     794:	fd a5       	ldd	r31, Y+45	; 0x2d
     796:	8f 2e       	mov	r8, r31
     798:	ff 0f       	add	r31, r31
     79a:	99 08       	sbc	r9, r9
     79c:	07 c0       	rjmp	.+14     	; 0x7ac <xvfprintf+0x26c>
     79e:	b4 01       	movw	r22, r8
     7a0:	c1 01       	movw	r24, r2
     7a2:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     7a6:	bf ef       	ldi	r27, 0xFF	; 255
     7a8:	cb 1a       	sub	r12, r27
     7aa:	db 0a       	sbc	r13, r27
     7ac:	61 14       	cp	r6, r1
     7ae:	71 04       	cpc	r7, r1
     7b0:	29 f4       	brne	.+10     	; 0x7bc <xvfprintf+0x27c>
     7b2:	2f a1       	ldd	r18, Y+39	; 0x27
     7b4:	38 a5       	ldd	r19, Y+40	; 0x28
     7b6:	c2 16       	cp	r12, r18
     7b8:	d3 06       	cpc	r13, r19
     7ba:	88 f3       	brcs	.-30     	; 0x79e <xvfprintf+0x25e>
			while (*p && prec--) xfputc(func, *p++);/* String body */
     7bc:	d8 01       	movw	r26, r16
     7be:	6d 91       	ld	r22, X+
     7c0:	8d 01       	movw	r16, r26
     7c2:	66 23       	and	r22, r22
     7c4:	19 f0       	breq	.+6      	; 0x7cc <xvfprintf+0x28c>
     7c6:	e1 14       	cp	r14, r1
     7c8:	f1 04       	cpc	r15, r1
     7ca:	71 f4       	brne	.+28     	; 0x7e8 <xvfprintf+0x2a8>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
     7cc:	ef a1       	ldd	r30, Y+39	; 0x27
     7ce:	f8 a5       	ldd	r31, Y+40	; 0x28
     7d0:	ce 16       	cp	r12, r30
     7d2:	df 06       	cpc	r13, r31
     7d4:	10 f6       	brcc	.-124    	; 0x75a <xvfprintf+0x21a>
     7d6:	60 e2       	ldi	r22, 0x20	; 32
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	c1 01       	movw	r24, r2
     7dc:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     7e0:	bf ef       	ldi	r27, 0xFF	; 255
     7e2:	cb 1a       	sub	r12, r27
     7e4:	db 0a       	sbc	r13, r27
     7e6:	f2 cf       	rjmp	.-28     	; 0x7cc <xvfprintf+0x28c>
			p = va_arg(arp, char*);		/* Get a pointer argument */
			if (!p) p = "";				/* Null ptr generates a null string */
			j = strlen(p);
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
			while (*p && prec--) xfputc(func, *p++);/* String body */
     7e8:	06 2e       	mov	r0, r22
     7ea:	00 0c       	add	r0, r0
     7ec:	77 0b       	sbc	r23, r23
     7ee:	c1 01       	movw	r24, r2
     7f0:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     7f4:	31 e0       	ldi	r19, 0x01	; 1
     7f6:	e3 1a       	sub	r14, r19
     7f8:	f1 08       	sbc	r15, r1
     7fa:	e0 cf       	rjmp	.-64     	; 0x7bc <xvfprintf+0x27c>
			continue;
#if XF_USE_FP
		case 'f':					/* Float (decimal) */
		case 'e':					/* Float (e) */
		case 'E':					/* Float (E) */
			ftoa(p = str, va_arg(arp, double), prec, c);	/* Make fp string */
     7fc:	96 01       	movw	r18, r12
     7fe:	2c 5f       	subi	r18, 0xFC	; 252
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	3c a7       	std	Y+44, r19	; 0x2c
     804:	2b a7       	std	Y+43, r18	; 0x2b
     806:	d6 01       	movw	r26, r12
     808:	4d 90       	ld	r4, X+
     80a:	5d 90       	ld	r5, X+
     80c:	6d 90       	ld	r6, X+
     80e:	7c 90       	ld	r7, X
	char sign = 0;
	double w;
	const char *er = 0;


	if (isnan(val)) {			/* Not a number? */
     810:	c3 01       	movw	r24, r6
     812:	b2 01       	movw	r22, r4
     814:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <isnan>
     818:	89 2b       	or	r24, r25
     81a:	09 f0       	breq	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	1b c1       	rjmp	.+566    	; 0xa54 <__stack+0x155>
		er = "NaN";
	} else {
		if (prec < 0) prec = 6;	/* Default precision (6 fractional digits) */
     81e:	f7 fe       	sbrs	r15, 7
     820:	03 c0       	rjmp	.+6      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     822:	66 e0       	ldi	r22, 0x06	; 6
     824:	e6 2e       	mov	r14, r22
     826:	f1 2c       	mov	r15, r1
		if (val < 0) {			/* Nagative value? */
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	a9 01       	movw	r20, r18
     82e:	c3 01       	movw	r24, r6
     830:	b2 01       	movw	r22, r4
     832:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
			val = -val; sign = '-';
		} else {
			sign = '+';
     836:	0b e2       	ldi	r16, 0x2B	; 43

	if (isnan(val)) {			/* Not a number? */
		er = "NaN";
	} else {
		if (prec < 0) prec = 6;	/* Default precision (6 fractional digits) */
		if (val < 0) {			/* Nagative value? */
     838:	87 ff       	sbrs	r24, 7
     83a:	05 c0       	rjmp	.+10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			val = -val; sign = '-';
     83c:	77 fa       	bst	r7, 7
     83e:	70 94       	com	r7
     840:	77 f8       	bld	r7, 7
     842:	70 94       	com	r7
     844:	0d e2       	ldi	r16, 0x2D	; 45
		} else {
			sign = '+';
		}
		if (isinf(val)) {		/* Infinite? */
     846:	c3 01       	movw	r24, r6
     848:	b2 01       	movw	r22, r4
     84a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <isinf>
     84e:	9e a3       	std	Y+38, r25	; 0x26
     850:	8d a3       	std	Y+37, r24	; 0x25
     852:	89 2b       	or	r24, r25
     854:	09 f0       	breq	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     856:	b7 c1       	rjmp	.+878    	; 0xbc6 <__stack+0x2c7>
			er = "INF";
		} else {
			if (fmt == 'f') {	/* Decimal notation? */
     858:	16 36       	cpi	r17, 0x66	; 102
     85a:	09 f0       	breq	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85c:	b9 c0       	rjmp	.+370    	; 0x9d0 <__stack+0xd1>
				val += i10x(-prec) / 2;	/* Round (nearest) */
     85e:	88 27       	eor	r24, r24
     860:	99 27       	eor	r25, r25
     862:	8e 19       	sub	r24, r14
     864:	9f 09       	sbc	r25, r15
     866:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <i10x>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	5f e3       	ldi	r21, 0x3F	; 63
     872:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     876:	9b 01       	movw	r18, r22
     878:	ac 01       	movw	r20, r24
     87a:	c3 01       	movw	r24, r6
     87c:	b2 01       	movw	r22, r4
     87e:	0e 94 19 07 	call	0xe32	; 0xe32 <__addsf3>
     882:	2b 01       	movw	r4, r22
     884:	3c 01       	movw	r6, r24
				m = ilog10(val);
     886:	0e 94 77 00 	call	0xee	; 0xee <ilog10>
     88a:	6c 01       	movw	r12, r24
     88c:	97 ff       	sbrs	r25, 7
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__DATA_REGION_LENGTH__+0x94>
     890:	d1 2c       	mov	r13, r1
     892:	c1 2c       	mov	r12, r1
				if (m < 0) m = 0;
				if (m + prec + 3 >= SZB_OUTPUT) er = "OV";	/* Buffer overflow? */
     894:	c6 01       	movw	r24, r12
     896:	8e 0d       	add	r24, r14
     898:	9f 1d       	adc	r25, r15
     89a:	4d 97       	sbiw	r24, 0x1d	; 29
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     89e:	99 c1       	rjmp	.+818    	; 0xbd2 <__stack+0x2d3>
					}
				}
			}
		}
		if (!er) {	/* Not error condition */
			if (sign == '-') *buf++ = sign;	/* Add a - if negative value */
     8a0:	ae 01       	movw	r20, r28
     8a2:	4f 5f       	subi	r20, 0xFF	; 255
     8a4:	5f 4f       	sbci	r21, 0xFF	; 255
     8a6:	0d 32       	cpi	r16, 0x2D	; 45
     8a8:	21 f4       	brne	.+8      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     8aa:	09 83       	std	Y+1, r16	; 0x01
     8ac:	ae 01       	movw	r20, r28
     8ae:	4e 5f       	subi	r20, 0xFE	; 254
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	5a a7       	std	Y+42, r21	; 0x2a
     8b4:	49 a7       	std	Y+41, r20	; 0x29
			do {				/* Put decimal number */
				w = i10x(m);				/* Snip the highest digit d */
				d = val / w; val -= d * w;
				if (m == -1) *buf++ = XF_DPC;	/* Insert a decimal separarot if get into fractional part */
				*buf++ = '0' + d;			/* Put the digit */
			} while (--m >= -prec);			/* Output all digits specified by prec */
     8b6:	f1 94       	neg	r15
     8b8:	e1 94       	neg	r14
     8ba:	f1 08       	sbc	r15, r1
			}
		}
		if (!er) {	/* Not error condition */
			if (sign == '-') *buf++ = sign;	/* Add a - if negative value */
			do {				/* Put decimal number */
				w = i10x(m);				/* Snip the highest digit d */
     8bc:	c6 01       	movw	r24, r12
     8be:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <i10x>
     8c2:	6e a7       	std	Y+46, r22	; 0x2e
     8c4:	7f a7       	std	Y+47, r23	; 0x2f
     8c6:	88 ab       	std	Y+48, r24	; 0x30
     8c8:	99 ab       	std	Y+49, r25	; 0x31
				d = val / w; val -= d * w;
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	c3 01       	movw	r24, r6
     8d0:	b2 01       	movw	r22, r4
     8d2:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
     8d6:	0e 94 fc 07 	call	0xff8	; 0xff8 <__fixsfsi>
     8da:	6a ab       	std	Y+50, r22	; 0x32
     8dc:	7b ab       	std	Y+51, r23	; 0x33
     8de:	8c ab       	std	Y+52, r24	; 0x34
     8e0:	9d ab       	std	Y+53, r25	; 0x35
     8e2:	aa a9       	ldd	r26, Y+50	; 0x32
     8e4:	bb a9       	ldd	r27, Y+51	; 0x33
     8e6:	bd 01       	movw	r22, r26
     8e8:	bb 0f       	add	r27, r27
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	0e 94 34 08 	call	0x1068	; 0x1068 <__floatsisf>
     8f2:	2e a5       	ldd	r18, Y+46	; 0x2e
     8f4:	3f a5       	ldd	r19, Y+47	; 0x2f
     8f6:	48 a9       	ldd	r20, Y+48	; 0x30
     8f8:	59 a9       	ldd	r21, Y+49	; 0x31
     8fa:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     8fe:	9b 01       	movw	r18, r22
     900:	ac 01       	movw	r20, r24
     902:	c3 01       	movw	r24, r6
     904:	b2 01       	movw	r22, r4
     906:	0e 94 18 07 	call	0xe30	; 0xe30 <__subsf3>
     90a:	2b 01       	movw	r4, r22
     90c:	3c 01       	movw	r6, r24
     90e:	e9 a5       	ldd	r30, Y+41	; 0x29
     910:	fa a5       	ldd	r31, Y+42	; 0x2a
				if (m == -1) *buf++ = XF_DPC;	/* Insert a decimal separarot if get into fractional part */
     912:	bf ef       	ldi	r27, 0xFF	; 255
     914:	cb 16       	cp	r12, r27
     916:	db 06       	cpc	r13, r27
     918:	29 f4       	brne	.+10     	; 0x924 <__stack+0x25>
     91a:	31 96       	adiw	r30, 0x01	; 1
     91c:	2e e2       	ldi	r18, 0x2E	; 46
     91e:	a9 a5       	ldd	r26, Y+41	; 0x29
     920:	ba a5       	ldd	r27, Y+42	; 0x2a
     922:	2c 93       	st	X, r18
				*buf++ = '0' + d;			/* Put the digit */
     924:	af 01       	movw	r20, r30
     926:	4f 5f       	subi	r20, 0xFF	; 255
     928:	5f 4f       	sbci	r21, 0xFF	; 255
     92a:	5a a7       	std	Y+42, r21	; 0x2a
     92c:	49 a7       	std	Y+41, r20	; 0x29
     92e:	8a a9       	ldd	r24, Y+50	; 0x32
     930:	80 5d       	subi	r24, 0xD0	; 208
     932:	80 83       	st	Z, r24
			} while (--m >= -prec);			/* Output all digits specified by prec */
     934:	51 e0       	ldi	r21, 0x01	; 1
     936:	c5 1a       	sub	r12, r21
     938:	d1 08       	sbc	r13, r1
     93a:	ce 14       	cp	r12, r14
     93c:	df 04       	cpc	r13, r15
     93e:	0c f0       	brlt	.+2      	; 0x942 <__stack+0x43>
     940:	bd cf       	rjmp	.-134    	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
			if (fmt != 'f') {	/* Put exponent if needed */
     942:	16 36       	cpi	r17, 0x66	; 102
     944:	d1 f0       	breq	.+52     	; 0x97a <__stack+0x7b>
				*buf++ = fmt;
     946:	11 83       	std	Z+1, r17	; 0x01
				if (e < 0) {
     948:	8d a1       	ldd	r24, Y+37	; 0x25
     94a:	9e a1       	ldd	r25, Y+38	; 0x26
     94c:	97 ff       	sbrs	r25, 7
     94e:	80 c0       	rjmp	.+256    	; 0xa50 <__stack+0x151>
					e = -e; *buf++ = '-';
     950:	91 95       	neg	r25
     952:	81 95       	neg	r24
     954:	91 09       	sbc	r25, r1
     956:	9e a3       	std	Y+38, r25	; 0x26
     958:	8d a3       	std	Y+37, r24	; 0x25
     95a:	8d e2       	ldi	r24, 0x2D	; 45
				} else {
					*buf++ = '+';
     95c:	82 83       	std	Z+2, r24	; 0x02
				}
				*buf++ = '0' + e / 10;
     95e:	8d a1       	ldd	r24, Y+37	; 0x25
     960:	9e a1       	ldd	r25, Y+38	; 0x26
     962:	6a e0       	ldi	r22, 0x0A	; 10
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__divmodhi4>
     96a:	60 5d       	subi	r22, 0xD0	; 208
     96c:	63 83       	std	Z+3, r22	; 0x03
				*buf++ = '0' + e % 10;
     96e:	df 01       	movw	r26, r30
     970:	15 96       	adiw	r26, 0x05	; 5
     972:	ba a7       	std	Y+42, r27	; 0x2a
     974:	a9 a7       	std	Y+41, r26	; 0x29
     976:	80 5d       	subi	r24, 0xD0	; 208
     978:	84 83       	std	Z+4, r24	; 0x04
	}
	if (er) {	/* Error condition? */
		if (sign) *buf++ = sign;		/* Add sign if needed */
		do *buf++ = *er++; while (*er);	/* Put error symbol */
	}
	*buf = 0;	/* Term */
     97a:	a9 a5       	ldd	r26, Y+41	; 0x29
     97c:	ba a5       	ldd	r27, Y+42	; 0x2a
     97e:	1c 92       	st	X, r1
#if XF_USE_FP
		case 'f':					/* Float (decimal) */
		case 'e':					/* Float (e) */
		case 'E':					/* Float (E) */
			ftoa(p = str, va_arg(arp, double), prec, c);	/* Make fp string */
			for (j = strlen(p); !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	0e 94 67 09 	call	0x12ce	; 0x12ce <strlen>
     988:	8c 01       	movw	r16, r24
     98a:	74 01       	movw	r14, r8
     98c:	b2 e0       	ldi	r27, 0x02	; 2
     98e:	eb 22       	and	r14, r27
     990:	ff 24       	eor	r15, r15
     992:	ed a5       	ldd	r30, Y+45	; 0x2d
     994:	8e 2e       	mov	r8, r30
     996:	ee 0f       	add	r30, r30
     998:	99 08       	sbc	r9, r9
     99a:	e1 14       	cp	r14, r1
     99c:	f1 04       	cpc	r15, r1
     99e:	09 f4       	brne	.+2      	; 0x9a2 <__stack+0xa3>
     9a0:	6b c0       	rjmp	.+214    	; 0xa78 <__stack+0x179>
     9a2:	9e 01       	movw	r18, r28
     9a4:	2f 5f       	subi	r18, 0xFF	; 255
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	79 01       	movw	r14, r18
			while (*p) xfputc(func, *p++);		/* Value */
     9aa:	d7 01       	movw	r26, r14
     9ac:	6d 91       	ld	r22, X+
     9ae:	7d 01       	movw	r14, r26
     9b0:	61 11       	cpse	r22, r1
     9b2:	6f c0       	rjmp	.+222    	; 0xa92 <__stack+0x193>
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
     9b4:	ef a1       	ldd	r30, Y+39	; 0x27
     9b6:	f8 a5       	ldd	r31, Y+40	; 0x28
     9b8:	0e 17       	cp	r16, r30
     9ba:	1f 07       	cpc	r17, r31
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__stack+0xc1>
     9be:	cd ce       	rjmp	.-614    	; 0x75a <xvfprintf+0x21a>
     9c0:	60 e2       	ldi	r22, 0x20	; 32
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	c1 01       	movw	r24, r2
     9c6:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     9ca:	0f 5f       	subi	r16, 0xFF	; 255
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	f2 cf       	rjmp	.-28     	; 0x9b4 <__stack+0xb5>
				val += i10x(-prec) / 2;	/* Round (nearest) */
				m = ilog10(val);
				if (m < 0) m = 0;
				if (m + prec + 3 >= SZB_OUTPUT) er = "OV";	/* Buffer overflow? */
			} else {			/* E notation */
				if (val != 0) {		/* Not a true zero? */
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	a9 01       	movw	r20, r18
     9d6:	c3 01       	movw	r24, r6
     9d8:	b2 01       	movw	r22, r4
     9da:	0e 94 85 07 	call	0xf0a	; 0xf0a <__cmpsf2>
     9de:	88 23       	and	r24, r24
     9e0:	a1 f1       	breq	.+104    	; 0xa4a <__stack+0x14b>
					val += i10x(ilog10(val) - prec) / 2;	/* Round (nearest) */
     9e2:	c3 01       	movw	r24, r6
     9e4:	b2 01       	movw	r22, r4
     9e6:	0e 94 77 00 	call	0xee	; 0xee <ilog10>
     9ea:	8e 19       	sub	r24, r14
     9ec:	9f 09       	sbc	r25, r15
     9ee:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <i10x>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	5f e3       	ldi	r21, 0x3F	; 63
     9fa:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
     9fe:	a3 01       	movw	r20, r6
     a00:	92 01       	movw	r18, r4
     a02:	0e 94 19 07 	call	0xe32	; 0xe32 <__addsf3>
     a06:	2b 01       	movw	r4, r22
     a08:	3c 01       	movw	r6, r24
					e = ilog10(val);
     a0a:	0e 94 77 00 	call	0xee	; 0xee <ilog10>
					if (e > 99 || prec + 6 >= SZB_OUTPUT) {	/* Buffer overflow or E > +99? */
     a0e:	84 36       	cpi	r24, 0x64	; 100
     a10:	91 05       	cpc	r25, r1
     a12:	0c f0       	brlt	.+2      	; 0xa16 <__stack+0x117>
     a14:	de c0       	rjmp	.+444    	; 0xbd2 <__stack+0x2d3>
     a16:	ba e1       	ldi	r27, 0x1A	; 26
     a18:	eb 16       	cp	r14, r27
     a1a:	f1 04       	cpc	r15, r1
     a1c:	0c f0       	brlt	.+2      	; 0xa20 <__stack+0x121>
     a1e:	d9 c0       	rjmp	.+434    	; 0xbd2 <__stack+0x2d3>
     a20:	9e a3       	std	Y+38, r25	; 0x26
     a22:	8d a3       	std	Y+37, r24	; 0x25
     a24:	8d 39       	cpi	r24, 0x9D	; 157
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	24 f4       	brge	.+8      	; 0xa32 <__stack+0x133>
     a2a:	2d e9       	ldi	r18, 0x9D	; 157
     a2c:	3f ef       	ldi	r19, 0xFF	; 255
     a2e:	3e a3       	std	Y+38, r19	; 0x26
     a30:	2d a3       	std	Y+37, r18	; 0x25
						er = "OV";
					} else {
						if (e < -99) e = -99;
						val /= i10x(e);	/* Normalize */
     a32:	8d a1       	ldd	r24, Y+37	; 0x25
     a34:	9e a1       	ldd	r25, Y+38	; 0x26
     a36:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <i10x>
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	c3 01       	movw	r24, r6
     a40:	b2 01       	movw	r22, r4
     a42:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
     a46:	2b 01       	movw	r4, r22
     a48:	3c 01       	movw	r6, r24
	int prec,	/* Number of fractinal digits */
	char fmt	/* Notation */
)
{
	int d;
	int e = 0, m = 0;
     a4a:	d1 2c       	mov	r13, r1
     a4c:	c1 2c       	mov	r12, r1
     a4e:	28 cf       	rjmp	.-432    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
			if (fmt != 'f') {	/* Put exponent if needed */
				*buf++ = fmt;
				if (e < 0) {
					e = -e; *buf++ = '-';
				} else {
					*buf++ = '+';
     a50:	8b e2       	ldi	r24, 0x2B	; 43
     a52:	84 cf       	rjmp	.-248    	; 0x95c <__stack+0x5d>
	double w;
	const char *er = 0;


	if (isnan(val)) {			/* Not a number? */
		er = "NaN";
     a54:	ea e2       	ldi	r30, 0x2A	; 42
     a56:	f1 e0       	ldi	r31, 0x01	; 1
	char sign = 0;
	double w;
	const char *er = 0;


	if (isnan(val)) {			/* Not a number? */
     a58:	39 a1       	ldd	r19, Y+33	; 0x21
     a5a:	2a a1       	ldd	r18, Y+34	; 0x22
     a5c:	a3 2f       	mov	r26, r19
     a5e:	b2 2f       	mov	r27, r18
     a60:	9d 01       	movw	r18, r26
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	3a a7       	std	Y+42, r19	; 0x2a
     a68:	29 a7       	std	Y+41, r18	; 0x29
			}
		}
	}
	if (er) {	/* Error condition? */
		if (sign) *buf++ = sign;		/* Add sign if needed */
		do *buf++ = *er++; while (*er);	/* Put error symbol */
     a6a:	81 91       	ld	r24, Z+
     a6c:	8c 93       	st	X, r24
     a6e:	d9 01       	movw	r26, r18
     a70:	80 81       	ld	r24, Z
     a72:	81 11       	cpse	r24, r1
     a74:	f5 cf       	rjmp	.-22     	; 0xa60 <__stack+0x161>
     a76:	81 cf       	rjmp	.-254    	; 0x97a <__stack+0x7b>
#if XF_USE_FP
		case 'f':					/* Float (decimal) */
		case 'e':					/* Float (e) */
		case 'E':					/* Float (E) */
			ftoa(p = str, va_arg(arp, double), prec, c);	/* Make fp string */
			for (j = strlen(p); !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
     a78:	4f a1       	ldd	r20, Y+39	; 0x27
     a7a:	58 a5       	ldd	r21, Y+40	; 0x28
     a7c:	04 17       	cp	r16, r20
     a7e:	15 07       	cpc	r17, r21
     a80:	08 f0       	brcs	.+2      	; 0xa84 <__stack+0x185>
     a82:	8f cf       	rjmp	.-226    	; 0x9a2 <__stack+0xa3>
     a84:	b4 01       	movw	r22, r8
     a86:	c1 01       	movw	r24, r2
     a88:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     a8c:	0f 5f       	subi	r16, 0xFF	; 255
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	84 cf       	rjmp	.-248    	; 0x99a <__stack+0x9b>
			while (*p) xfputc(func, *p++);		/* Value */
     a92:	06 2e       	mov	r0, r22
     a94:	00 0c       	add	r0, r0
     a96:	77 0b       	sbc	r23, r23
     a98:	c1 01       	movw	r24, r2
     a9a:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     a9e:	85 cf       	rjmp	.-246    	; 0x9aa <__stack+0xab>
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
		case 'b':					/* Unsigned binary */
			r = 2; break;
     aa0:	22 e0       	ldi	r18, 0x02	; 2
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	2b ce       	rjmp	.-938    	; 0x6fc <xvfprintf+0x1bc>
     aa6:	f6 01       	movw	r30, r12
     aa8:	32 96       	adiw	r30, 0x02	; 2
     aaa:	fc a7       	std	Y+44, r31	; 0x2c
     aac:	eb a7       	std	Y+43, r30	; 0x2b
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
     aae:	14 36       	cpi	r17, 0x64	; 100
     ab0:	41 f4       	brne	.+16     	; 0xac2 <__stack+0x1c3>
     ab2:	d6 01       	movw	r26, r12
     ab4:	4d 91       	ld	r20, X+
     ab6:	5c 91       	ld	r21, X
     ab8:	05 2e       	mov	r0, r21
     aba:	00 0c       	add	r0, r0
     abc:	66 0b       	sbc	r22, r22
     abe:	77 0b       	sbc	r23, r23
     ac0:	2c ce       	rjmp	.-936    	; 0x71a <xvfprintf+0x1da>
     ac2:	f6 01       	movw	r30, r12
     ac4:	40 81       	ld	r20, Z
     ac6:	51 81       	ldd	r21, Z+1	; 0x01
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
			v = 0 - v; f |= 1;
		}
		i = 0; uv = v;
     acc:	fa 01       	movw	r30, r20
     ace:	cb 01       	movw	r24, r22
     ad0:	57 e2       	ldi	r21, 0x27	; 39
     ad2:	d5 2e       	mov	r13, r21
     ad4:	18 37       	cpi	r17, 0x78	; 120
     ad6:	11 f0       	breq	.+4      	; 0xadc <__stack+0x1dd>
     ad8:	47 e0       	ldi	r20, 0x07	; 7
     ada:	d4 2e       	mov	r13, r20
     adc:	ae 01       	movw	r20, r28
     ade:	4f 5f       	subi	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	5e a3       	std	Y+38, r21	; 0x26
     ae4:	4d a3       	std	Y+37, r20	; 0x25
     ae6:	f1 2c       	mov	r15, r1
     ae8:	e1 2c       	mov	r14, r1
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
     aea:	29 01       	movw	r4, r18
     aec:	71 2c       	mov	r7, r1
     aee:	61 2c       	mov	r6, r1
     af0:	bf 01       	movw	r22, r30
     af2:	a3 01       	movw	r20, r6
     af4:	92 01       	movw	r18, r4
     af6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__udivmodsi4>
     afa:	76 2f       	mov	r23, r22
     afc:	f9 01       	movw	r30, r18
     afe:	ca 01       	movw	r24, r20
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
     b00:	6a 30       	cpi	r22, 0x0A	; 10
     b02:	14 f0       	brlt	.+4      	; 0xb08 <__stack+0x209>
     b04:	7d 2d       	mov	r23, r13
     b06:	76 0f       	add	r23, r22
			str[i++] = d + '0';
     b08:	87 01       	movw	r16, r14
     b0a:	0f 5f       	subi	r16, 0xFF	; 255
     b0c:	1f 4f       	sbci	r17, 0xFF	; 255
     b0e:	70 5d       	subi	r23, 0xD0	; 208
     b10:	ad a1       	ldd	r26, Y+37	; 0x25
     b12:	be a1       	ldd	r27, Y+38	; 0x26
     b14:	7d 93       	st	X+, r23
     b16:	be a3       	std	Y+38, r27	; 0x26
     b18:	ad a3       	std	Y+37, r26	; 0x25
		} while (uv != 0 && i < sizeof str);
     b1a:	23 2b       	or	r18, r19
     b1c:	24 2b       	or	r18, r20
     b1e:	25 2b       	or	r18, r21
     b20:	39 f0       	breq	.+14     	; 0xb30 <__stack+0x231>
     b22:	00 32       	cpi	r16, 0x20	; 32
     b24:	11 05       	cpc	r17, r1
     b26:	09 f0       	breq	.+2      	; 0xb2a <__stack+0x22b>
     b28:	44 c0       	rjmp	.+136    	; 0xbb2 <__stack+0x2b3>
     b2a:	8f e1       	ldi	r24, 0x1F	; 31
     b2c:	e8 2e       	mov	r14, r24
     b2e:	f1 2c       	mov	r15, r1
		if (f & 1) str[i++] = '-';					/* Sign */
     b30:	80 fe       	sbrs	r8, 0
     b32:	0b c0       	rjmp	.+22     	; 0xb4a <__stack+0x24b>
     b34:	e1 e0       	ldi	r30, 0x01	; 1
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	ec 0f       	add	r30, r28
     b3a:	fd 1f       	adc	r31, r29
     b3c:	e0 0f       	add	r30, r16
     b3e:	f1 1f       	adc	r31, r17
     b40:	8d e2       	ldi	r24, 0x2D	; 45
     b42:	80 83       	st	Z, r24
     b44:	87 01       	movw	r16, r14
     b46:	0e 5f       	subi	r16, 0xFE	; 254
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
     b4a:	78 01       	movw	r14, r16
     b4c:	64 01       	movw	r12, r8
     b4e:	b2 e0       	ldi	r27, 0x02	; 2
     b50:	cb 22       	and	r12, r27
     b52:	dd 24       	eor	r13, r13
     b54:	ed a5       	ldd	r30, Y+45	; 0x2d
     b56:	8e 2e       	mov	r8, r30
     b58:	ee 0f       	add	r30, r30
     b5a:	99 08       	sbc	r9, r9
     b5c:	c1 14       	cp	r12, r1
     b5e:	d1 04       	cpc	r13, r1
     b60:	29 f4       	brne	.+10     	; 0xb6c <__stack+0x26d>
     b62:	2f a1       	ldd	r18, Y+39	; 0x27
     b64:	38 a5       	ldd	r19, Y+40	; 0x28
     b66:	e2 16       	cp	r14, r18
     b68:	f3 06       	cpc	r15, r19
     b6a:	28 f1       	brcs	.+74     	; 0xbb6 <__stack+0x2b7>
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	4c 0f       	add	r20, r28
     b72:	5d 1f       	adc	r21, r29
     b74:	04 0f       	add	r16, r20
     b76:	15 1f       	adc	r17, r21
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
     b78:	d8 01       	movw	r26, r16
     b7a:	6e 91       	ld	r22, -X
     b7c:	8d 01       	movw	r16, r26
     b7e:	06 2e       	mov	r0, r22
     b80:	00 0c       	add	r0, r0
     b82:	77 0b       	sbc	r23, r23
     b84:	c1 01       	movw	r24, r2
     b86:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     b8a:	e9 a1       	ldd	r30, Y+33	; 0x21
     b8c:	fa a1       	ldd	r31, Y+34	; 0x22
     b8e:	e0 17       	cp	r30, r16
     b90:	f1 07       	cpc	r31, r17
     b92:	91 f7       	brne	.-28     	; 0xb78 <__stack+0x279>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
     b94:	2f a1       	ldd	r18, Y+39	; 0x27
     b96:	38 a5       	ldd	r19, Y+40	; 0x28
     b98:	e2 16       	cp	r14, r18
     b9a:	f3 06       	cpc	r15, r19
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <__stack+0x2a1>
     b9e:	dd cd       	rjmp	.-1094   	; 0x75a <xvfprintf+0x21a>
     ba0:	60 e2       	ldi	r22, 0x20	; 32
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	c1 01       	movw	r24, r2
     ba6:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     baa:	ff ef       	ldi	r31, 0xFF	; 255
     bac:	ef 1a       	sub	r14, r31
     bae:	ff 0a       	sbc	r15, r31
     bb0:	f1 cf       	rjmp	.-30     	; 0xb94 <__stack+0x295>
     bb2:	78 01       	movw	r14, r16
     bb4:	9d cf       	rjmp	.-198    	; 0xaf0 <__stack+0x1f1>
			d = (char)(uv % r); uv /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (uv != 0 && i < sizeof str);
		if (f & 1) str[i++] = '-';					/* Sign */
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
     bb6:	b4 01       	movw	r22, r8
     bb8:	c1 01       	movw	r24, r2
     bba:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     bbe:	ff ef       	ldi	r31, 0xFF	; 255
     bc0:	ef 1a       	sub	r14, r31
     bc2:	ff 0a       	sbc	r15, r31
     bc4:	cb cf       	rjmp	.-106    	; 0xb5c <__stack+0x25d>
			val = -val; sign = '-';
		} else {
			sign = '+';
		}
		if (isinf(val)) {		/* Infinite? */
			er = "INF";
     bc6:	ee e2       	ldi	r30, 0x2E	; 46
     bc8:	f1 e0       	ldi	r31, 0x01	; 1
				*buf++ = '0' + e % 10;
			}
		}
	}
	if (er) {	/* Error condition? */
		if (sign) *buf++ = sign;		/* Add sign if needed */
     bca:	09 83       	std	Y+1, r16	; 0x01
     bcc:	3b a1       	ldd	r19, Y+35	; 0x23
     bce:	2c a1       	ldd	r18, Y+36	; 0x24
     bd0:	45 cf       	rjmp	.-374    	; 0xa5c <__stack+0x15d>
		} else {
			if (fmt == 'f') {	/* Decimal notation? */
				val += i10x(-prec) / 2;	/* Round (nearest) */
				m = ilog10(val);
				if (m < 0) m = 0;
				if (m + prec + 3 >= SZB_OUTPUT) er = "OV";	/* Buffer overflow? */
     bd2:	e2 e3       	ldi	r30, 0x32	; 50
     bd4:	f1 e0       	ldi	r31, 0x01	; 1
     bd6:	f9 cf       	rjmp	.-14     	; 0xbca <__stack+0x2cb>
		if (f & 1) str[i++] = '-';					/* Sign */
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
	}
}
     bd8:	e5 96       	adiw	r28, 0x35	; 53
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	7f 90       	pop	r7
     bfe:	6f 90       	pop	r6
     c00:	5f 90       	pop	r5
     c02:	4f 90       	pop	r4
     c04:	3f 90       	pop	r3
     c06:	2f 90       	pop	r2
     c08:	08 95       	ret

00000c0a <xfputs>:

void xfputs (			/* Put a string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	8c 01       	movw	r16, r24
     c14:	eb 01       	movw	r28, r22
	while (*str) {			/* Put the string */
     c16:	69 91       	ld	r22, Y+
     c18:	61 11       	cpse	r22, r1
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <xfputs+0x1c>
		xfputc(func, *str++);
	}
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
	while (*str) {			/* Put the string */
		xfputc(func, *str++);
     c26:	06 2e       	mov	r0, r22
     c28:	00 0c       	add	r0, r0
     c2a:	77 0b       	sbc	r23, r23
     c2c:	c8 01       	movw	r24, r16
     c2e:	0e 94 85 02 	call	0x50a	; 0x50a <xfputc>
     c32:	f1 cf       	rjmp	.-30     	; 0xc16 <xfputs+0xc>

00000c34 <xputs>:

void xputs (			/* Put a string to the default device */
	const char* str		/* Pointer to the string */
)
{
	xfputs(xfunc_output, str);
     c34:	bc 01       	movw	r22, r24
     c36:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <xfunc_output>
     c3a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <xfunc_output+0x1>
     c3e:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <xfputs>

00000c42 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	ae 01       	movw	r20, r28
     c4c:	4b 5f       	subi	r20, 0xFB	; 251
     c4e:	5f 4f       	sbci	r21, 0xFF	; 255
     c50:	fa 01       	movw	r30, r20
     c52:	61 91       	ld	r22, Z+
     c54:	71 91       	ld	r23, Z+
     c56:	af 01       	movw	r20, r30
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(xfunc_output, fmt, arp);
     c58:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <xfunc_output>
     c5c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <xfunc_output+0x1>
     c60:	0e 94 a0 02 	call	0x540	; 0x540 <xvfprintf>
	va_end(arp);
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <xfprintf>:
void xfprintf (			/* Put a formatted string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(func, fmt, arp);
     c72:	ae 01       	movw	r20, r28
     c74:	47 5f       	subi	r20, 0xF7	; 247
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	6f 81       	ldd	r22, Y+7	; 0x07
     c7a:	78 85       	ldd	r23, Y+8	; 0x08
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	0e 94 a0 02 	call	0x540	; 0x540 <xvfprintf>
	va_end(arp);
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	strptr = buff;		/* Enable destination for memory */
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
     c9a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	va_start(arp, fmt);
	xvfprintf(0, fmt, arp);
     c9e:	ae 01       	movw	r20, r28
     ca0:	47 5f       	subi	r20, 0xF7	; 247
     ca2:	5f 4f       	sbci	r21, 0xFF	; 255
     ca4:	6f 81       	ldd	r22, Y+7	; 0x07
     ca6:	78 85       	ldd	r23, Y+8	; 0x08
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 a0 02 	call	0x540	; 0x540 <xvfprintf>
	va_end(arp);
	*strptr = 0;		/* Terminate output string */
     cb0:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
     cb4:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__data_end+0x1>
     cb8:	10 82       	st	Z, r1
	strptr = 0;			/* Disable destination for memory */
     cba:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
     cbe:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <adcInit>:

volatile uint16_t adcValue;

void adcInit(void)
{
    ADMUX |= _BV(REFS0);
     cc8:	ec e7       	ldi	r30, 0x7C	; 124
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	80 83       	st	Z, r24
    ADMUX &= ~(_BV(MUX3) | _BV(MUX2) | _BV(MUX1) | _BV(MUX0));
     cd2:	80 81       	ld	r24, Z
     cd4:	80 7f       	andi	r24, 0xF0	; 240
     cd6:	80 83       	st	Z, r24
    ADCSRA |= (_BV(ADEN) | _BV(ADIE) | _BV(ADPS1) | _BV(ADPS0));
     cd8:	ea e7       	ldi	r30, 0x7A	; 122
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8b 68       	ori	r24, 0x8B	; 139
     ce0:	80 83       	st	Z, r24
}
     ce2:	08 95       	ret

00000ce4 <__vector_21>:
    }
    return 0;
}

ISR(ADC_vect)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
    adcValue = ADC;
     cf6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     cfa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     cfe:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <adcValue+0x1>
     d02:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <adcValue>
    ADCSRA |= _BV(ADSC);
     d06:	ea e7       	ldi	r30, 0x7A	; 122
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 64       	ori	r24, 0x40	; 64
     d0e:	80 83       	st	Z, r24
}
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <main>:
}

int main(void) 
{
    float f;
    avr_uart_init();
     d22:	0e 94 58 02 	call	0x4b0	; 0x4b0 <avr_uart_init>
    DDRC &= ~(_BV(PC0));
     d26:	38 98       	cbi	0x07, 0	; 7
    PORTC &= ~(_BV(PC0));
     d28:	40 98       	cbi	0x08, 0	; 8
    sei();
     d2a:	78 94       	sei
    adcInit(); 
     d2c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <adcInit>
    ADCSRA |= _BV(ADSC);
     d30:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d34:	80 64       	ori	r24, 0x40	; 64
     d36:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d3a:	08 ec       	ldi	r16, 0xC8	; 200
     d3c:	10 e0       	ldi	r17, 0x00	; 0
        _delay_ms(1000);
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
        {
            f = adcValue/1023.0*5.0;
        }
        xprintf("%.2f\n",f);
     d3e:	c5 e3       	ldi	r28, 0x35	; 53
     d40:	d1 e0       	ldi	r29, 0x01	; 1
    ADMUX &= ~(_BV(MUX3) | _BV(MUX2) | _BV(MUX1) | _BV(MUX0));
    ADCSRA |= (_BV(ADEN) | _BV(ADIE) | _BV(ADPS1) | _BV(ADPS0));
}

int main(void) 
{
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	97 e2       	ldi	r25, 0x27	; 39
     d46:	f8 01       	movw	r30, r16
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <main+0x26>
     d4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4e:	d9 f7       	brne	.-10     	; 0xd46 <main+0x24>
    adcInit(); 
    ADCSRA |= _BV(ADSC);
    while(1)
    {
        _delay_ms(1000);
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d50:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d52:	f8 94       	cli
        {
            f = adcValue/1023.0*5.0;
     d54:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <adcValue>
     d58:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <adcValue+0x1>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d5c:	8f bf       	out	0x3f, r24	; 63
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 32 08 	call	0x1064	; 0x1064 <__floatunsisf>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 ec       	ldi	r19, 0xC0	; 192
     d6a:	4f e7       	ldi	r20, 0x7F	; 127
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 ea       	ldi	r20, 0xA0	; 160
     d78:	50 e4       	ldi	r21, 0x40	; 64
     d7a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__mulsf3>
        }
        xprintf("%.2f\n",f);
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	7f 93       	push	r23
     d84:	6f 93       	push	r22
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	0e 94 21 06 	call	0xc42	; 0xc42 <xprintf>
    sei();
    adcInit(); 
    ADCSRA |= _BV(ADSC);
    while(1)
    {
        _delay_ms(1000);
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	d3 cf       	rjmp	.-90     	; 0xd42 <main+0x20>

00000d9c <__divmodhi4>:
     d9c:	97 fb       	bst	r25, 7
     d9e:	07 2e       	mov	r0, r23
     da0:	16 f4       	brtc	.+4      	; 0xda6 <__divmodhi4+0xa>
     da2:	00 94       	com	r0
     da4:	07 d0       	rcall	.+14     	; 0xdb4 <__divmodhi4_neg1>
     da6:	77 fd       	sbrc	r23, 7
     da8:	09 d0       	rcall	.+18     	; 0xdbc <__divmodhi4_neg2>
     daa:	0e 94 04 07 	call	0xe08	; 0xe08 <__udivmodhi4>
     dae:	07 fc       	sbrc	r0, 7
     db0:	05 d0       	rcall	.+10     	; 0xdbc <__divmodhi4_neg2>
     db2:	3e f4       	brtc	.+14     	; 0xdc2 <__divmodhi4_exit>

00000db4 <__divmodhi4_neg1>:
     db4:	90 95       	com	r25
     db6:	81 95       	neg	r24
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	08 95       	ret

00000dbc <__divmodhi4_neg2>:
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255

00000dc2 <__divmodhi4_exit>:
     dc2:	08 95       	ret

00000dc4 <__udivmodsi4>:
     dc4:	a1 e2       	ldi	r26, 0x21	; 33
     dc6:	1a 2e       	mov	r1, r26
     dc8:	aa 1b       	sub	r26, r26
     dca:	bb 1b       	sub	r27, r27
     dcc:	fd 01       	movw	r30, r26
     dce:	0d c0       	rjmp	.+26     	; 0xdea <__udivmodsi4_ep>

00000dd0 <__udivmodsi4_loop>:
     dd0:	aa 1f       	adc	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	ee 1f       	adc	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	a2 17       	cp	r26, r18
     dda:	b3 07       	cpc	r27, r19
     ddc:	e4 07       	cpc	r30, r20
     dde:	f5 07       	cpc	r31, r21
     de0:	20 f0       	brcs	.+8      	; 0xdea <__udivmodsi4_ep>
     de2:	a2 1b       	sub	r26, r18
     de4:	b3 0b       	sbc	r27, r19
     de6:	e4 0b       	sbc	r30, r20
     de8:	f5 0b       	sbc	r31, r21

00000dea <__udivmodsi4_ep>:
     dea:	66 1f       	adc	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	1a 94       	dec	r1
     df4:	69 f7       	brne	.-38     	; 0xdd0 <__udivmodsi4_loop>
     df6:	60 95       	com	r22
     df8:	70 95       	com	r23
     dfa:	80 95       	com	r24
     dfc:	90 95       	com	r25
     dfe:	9b 01       	movw	r18, r22
     e00:	ac 01       	movw	r20, r24
     e02:	bd 01       	movw	r22, r26
     e04:	cf 01       	movw	r24, r30
     e06:	08 95       	ret

00000e08 <__udivmodhi4>:
     e08:	aa 1b       	sub	r26, r26
     e0a:	bb 1b       	sub	r27, r27
     e0c:	51 e1       	ldi	r21, 0x11	; 17
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <__udivmodhi4_ep>

00000e10 <__udivmodhi4_loop>:
     e10:	aa 1f       	adc	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	a6 17       	cp	r26, r22
     e16:	b7 07       	cpc	r27, r23
     e18:	10 f0       	brcs	.+4      	; 0xe1e <__udivmodhi4_ep>
     e1a:	a6 1b       	sub	r26, r22
     e1c:	b7 0b       	sbc	r27, r23

00000e1e <__udivmodhi4_ep>:
     e1e:	88 1f       	adc	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	5a 95       	dec	r21
     e24:	a9 f7       	brne	.-22     	; 0xe10 <__udivmodhi4_loop>
     e26:	80 95       	com	r24
     e28:	90 95       	com	r25
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	08 95       	ret

00000e30 <__subsf3>:
     e30:	50 58       	subi	r21, 0x80	; 128

00000e32 <__addsf3>:
     e32:	bb 27       	eor	r27, r27
     e34:	aa 27       	eor	r26, r26
     e36:	0e 94 30 07 	call	0xe60	; 0xe60 <__addsf3x>
     e3a:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_round>
     e3e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscA>
     e42:	38 f0       	brcs	.+14     	; 0xe52 <__addsf3+0x20>
     e44:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_pscB>
     e48:	20 f0       	brcs	.+8      	; 0xe52 <__addsf3+0x20>
     e4a:	39 f4       	brne	.+14     	; 0xe5a <__addsf3+0x28>
     e4c:	9f 3f       	cpi	r25, 0xFF	; 255
     e4e:	19 f4       	brne	.+6      	; 0xe56 <__addsf3+0x24>
     e50:	26 f4       	brtc	.+8      	; 0xe5a <__addsf3+0x28>
     e52:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__fp_nan>
     e56:	0e f4       	brtc	.+2      	; 0xe5a <__addsf3+0x28>
     e58:	e0 95       	com	r30
     e5a:	e7 fb       	bst	r30, 7
     e5c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>

00000e60 <__addsf3x>:
     e60:	e9 2f       	mov	r30, r25
     e62:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_split3>
     e66:	58 f3       	brcs	.-42     	; 0xe3e <__addsf3+0xc>
     e68:	ba 17       	cp	r27, r26
     e6a:	62 07       	cpc	r22, r18
     e6c:	73 07       	cpc	r23, r19
     e6e:	84 07       	cpc	r24, r20
     e70:	95 07       	cpc	r25, r21
     e72:	20 f0       	brcs	.+8      	; 0xe7c <__addsf3x+0x1c>
     e74:	79 f4       	brne	.+30     	; 0xe94 <__addsf3x+0x34>
     e76:	a6 f5       	brtc	.+104    	; 0xee0 <__addsf3x+0x80>
     e78:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_zero>
     e7c:	0e f4       	brtc	.+2      	; 0xe80 <__addsf3x+0x20>
     e7e:	e0 95       	com	r30
     e80:	0b 2e       	mov	r0, r27
     e82:	ba 2f       	mov	r27, r26
     e84:	a0 2d       	mov	r26, r0
     e86:	0b 01       	movw	r0, r22
     e88:	b9 01       	movw	r22, r18
     e8a:	90 01       	movw	r18, r0
     e8c:	0c 01       	movw	r0, r24
     e8e:	ca 01       	movw	r24, r20
     e90:	a0 01       	movw	r20, r0
     e92:	11 24       	eor	r1, r1
     e94:	ff 27       	eor	r31, r31
     e96:	59 1b       	sub	r21, r25
     e98:	99 f0       	breq	.+38     	; 0xec0 <__addsf3x+0x60>
     e9a:	59 3f       	cpi	r21, 0xF9	; 249
     e9c:	50 f4       	brcc	.+20     	; 0xeb2 <__addsf3x+0x52>
     e9e:	50 3e       	cpi	r21, 0xE0	; 224
     ea0:	68 f1       	brcs	.+90     	; 0xefc <__addsf3x+0x9c>
     ea2:	1a 16       	cp	r1, r26
     ea4:	f0 40       	sbci	r31, 0x00	; 0
     ea6:	a2 2f       	mov	r26, r18
     ea8:	23 2f       	mov	r18, r19
     eaa:	34 2f       	mov	r19, r20
     eac:	44 27       	eor	r20, r20
     eae:	58 5f       	subi	r21, 0xF8	; 248
     eb0:	f3 cf       	rjmp	.-26     	; 0xe98 <__addsf3x+0x38>
     eb2:	46 95       	lsr	r20
     eb4:	37 95       	ror	r19
     eb6:	27 95       	ror	r18
     eb8:	a7 95       	ror	r26
     eba:	f0 40       	sbci	r31, 0x00	; 0
     ebc:	53 95       	inc	r21
     ebe:	c9 f7       	brne	.-14     	; 0xeb2 <__addsf3x+0x52>
     ec0:	7e f4       	brtc	.+30     	; 0xee0 <__addsf3x+0x80>
     ec2:	1f 16       	cp	r1, r31
     ec4:	ba 0b       	sbc	r27, r26
     ec6:	62 0b       	sbc	r22, r18
     ec8:	73 0b       	sbc	r23, r19
     eca:	84 0b       	sbc	r24, r20
     ecc:	ba f0       	brmi	.+46     	; 0xefc <__addsf3x+0x9c>
     ece:	91 50       	subi	r25, 0x01	; 1
     ed0:	a1 f0       	breq	.+40     	; 0xefa <__addsf3x+0x9a>
     ed2:	ff 0f       	add	r31, r31
     ed4:	bb 1f       	adc	r27, r27
     ed6:	66 1f       	adc	r22, r22
     ed8:	77 1f       	adc	r23, r23
     eda:	88 1f       	adc	r24, r24
     edc:	c2 f7       	brpl	.-16     	; 0xece <__addsf3x+0x6e>
     ede:	0e c0       	rjmp	.+28     	; 0xefc <__addsf3x+0x9c>
     ee0:	ba 0f       	add	r27, r26
     ee2:	62 1f       	adc	r22, r18
     ee4:	73 1f       	adc	r23, r19
     ee6:	84 1f       	adc	r24, r20
     ee8:	48 f4       	brcc	.+18     	; 0xefc <__addsf3x+0x9c>
     eea:	87 95       	ror	r24
     eec:	77 95       	ror	r23
     eee:	67 95       	ror	r22
     ef0:	b7 95       	ror	r27
     ef2:	f7 95       	ror	r31
     ef4:	9e 3f       	cpi	r25, 0xFE	; 254
     ef6:	08 f0       	brcs	.+2      	; 0xefa <__addsf3x+0x9a>
     ef8:	b0 cf       	rjmp	.-160    	; 0xe5a <__addsf3+0x28>
     efa:	93 95       	inc	r25
     efc:	88 0f       	add	r24, r24
     efe:	08 f0       	brcs	.+2      	; 0xf02 <__addsf3x+0xa2>
     f00:	99 27       	eor	r25, r25
     f02:	ee 0f       	add	r30, r30
     f04:	97 95       	ror	r25
     f06:	87 95       	ror	r24
     f08:	08 95       	ret

00000f0a <__cmpsf2>:
     f0a:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_cmp>
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <__cmpsf2+0x8>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	08 95       	ret

00000f14 <__divsf3>:
     f14:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__divsf3x>
     f18:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_round>
     f1c:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_pscB>
     f20:	58 f0       	brcs	.+22     	; 0xf38 <__divsf3+0x24>
     f22:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscA>
     f26:	40 f0       	brcs	.+16     	; 0xf38 <__divsf3+0x24>
     f28:	29 f4       	brne	.+10     	; 0xf34 <__divsf3+0x20>
     f2a:	5f 3f       	cpi	r21, 0xFF	; 255
     f2c:	29 f0       	breq	.+10     	; 0xf38 <__divsf3+0x24>
     f2e:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>
     f32:	51 11       	cpse	r21, r1
     f34:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>
     f38:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__fp_nan>

00000f3c <__divsf3x>:
     f3c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_split3>
     f40:	68 f3       	brcs	.-38     	; 0xf1c <__divsf3+0x8>

00000f42 <__divsf3_pse>:
     f42:	99 23       	and	r25, r25
     f44:	b1 f3       	breq	.-20     	; 0xf32 <__divsf3+0x1e>
     f46:	55 23       	and	r21, r21
     f48:	91 f3       	breq	.-28     	; 0xf2e <__divsf3+0x1a>
     f4a:	95 1b       	sub	r25, r21
     f4c:	55 0b       	sbc	r21, r21
     f4e:	bb 27       	eor	r27, r27
     f50:	aa 27       	eor	r26, r26
     f52:	62 17       	cp	r22, r18
     f54:	73 07       	cpc	r23, r19
     f56:	84 07       	cpc	r24, r20
     f58:	38 f0       	brcs	.+14     	; 0xf68 <__divsf3_pse+0x26>
     f5a:	9f 5f       	subi	r25, 0xFF	; 255
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	44 1f       	adc	r20, r20
     f64:	aa 1f       	adc	r26, r26
     f66:	a9 f3       	breq	.-22     	; 0xf52 <__divsf3_pse+0x10>
     f68:	35 d0       	rcall	.+106    	; 0xfd4 <__divsf3_pse+0x92>
     f6a:	0e 2e       	mov	r0, r30
     f6c:	3a f0       	brmi	.+14     	; 0xf7c <__divsf3_pse+0x3a>
     f6e:	e0 e8       	ldi	r30, 0x80	; 128
     f70:	32 d0       	rcall	.+100    	; 0xfd6 <__divsf3_pse+0x94>
     f72:	91 50       	subi	r25, 0x01	; 1
     f74:	50 40       	sbci	r21, 0x00	; 0
     f76:	e6 95       	lsr	r30
     f78:	00 1c       	adc	r0, r0
     f7a:	ca f7       	brpl	.-14     	; 0xf6e <__divsf3_pse+0x2c>
     f7c:	2b d0       	rcall	.+86     	; 0xfd4 <__divsf3_pse+0x92>
     f7e:	fe 2f       	mov	r31, r30
     f80:	29 d0       	rcall	.+82     	; 0xfd4 <__divsf3_pse+0x92>
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	bb 1f       	adc	r27, r27
     f8a:	26 17       	cp	r18, r22
     f8c:	37 07       	cpc	r19, r23
     f8e:	48 07       	cpc	r20, r24
     f90:	ab 07       	cpc	r26, r27
     f92:	b0 e8       	ldi	r27, 0x80	; 128
     f94:	09 f0       	breq	.+2      	; 0xf98 <__divsf3_pse+0x56>
     f96:	bb 0b       	sbc	r27, r27
     f98:	80 2d       	mov	r24, r0
     f9a:	bf 01       	movw	r22, r30
     f9c:	ff 27       	eor	r31, r31
     f9e:	93 58       	subi	r25, 0x83	; 131
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	3a f0       	brmi	.+14     	; 0xfb2 <__divsf3_pse+0x70>
     fa4:	9e 3f       	cpi	r25, 0xFE	; 254
     fa6:	51 05       	cpc	r21, r1
     fa8:	78 f0       	brcs	.+30     	; 0xfc8 <__divsf3_pse+0x86>
     faa:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>
     fae:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>
     fb2:	5f 3f       	cpi	r21, 0xFF	; 255
     fb4:	e4 f3       	brlt	.-8      	; 0xfae <__divsf3_pse+0x6c>
     fb6:	98 3e       	cpi	r25, 0xE8	; 232
     fb8:	d4 f3       	brlt	.-12     	; 0xfae <__divsf3_pse+0x6c>
     fba:	86 95       	lsr	r24
     fbc:	77 95       	ror	r23
     fbe:	67 95       	ror	r22
     fc0:	b7 95       	ror	r27
     fc2:	f7 95       	ror	r31
     fc4:	9f 5f       	subi	r25, 0xFF	; 255
     fc6:	c9 f7       	brne	.-14     	; 0xfba <__divsf3_pse+0x78>
     fc8:	88 0f       	add	r24, r24
     fca:	91 1d       	adc	r25, r1
     fcc:	96 95       	lsr	r25
     fce:	87 95       	ror	r24
     fd0:	97 f9       	bld	r25, 7
     fd2:	08 95       	ret
     fd4:	e1 e0       	ldi	r30, 0x01	; 1
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	bb 1f       	adc	r27, r27
     fde:	62 17       	cp	r22, r18
     fe0:	73 07       	cpc	r23, r19
     fe2:	84 07       	cpc	r24, r20
     fe4:	ba 07       	cpc	r27, r26
     fe6:	20 f0       	brcs	.+8      	; 0xff0 <__divsf3_pse+0xae>
     fe8:	62 1b       	sub	r22, r18
     fea:	73 0b       	sbc	r23, r19
     fec:	84 0b       	sbc	r24, r20
     fee:	ba 0b       	sbc	r27, r26
     ff0:	ee 1f       	adc	r30, r30
     ff2:	88 f7       	brcc	.-30     	; 0xfd6 <__divsf3_pse+0x94>
     ff4:	e0 95       	com	r30
     ff6:	08 95       	ret

00000ff8 <__fixsfsi>:
     ff8:	0e 94 03 08 	call	0x1006	; 0x1006 <__fixunssfsi>
     ffc:	68 94       	set
     ffe:	b1 11       	cpse	r27, r1
    1000:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>
    1004:	08 95       	ret

00001006 <__fixunssfsi>:
    1006:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_splitA>
    100a:	88 f0       	brcs	.+34     	; 0x102e <__fixunssfsi+0x28>
    100c:	9f 57       	subi	r25, 0x7F	; 127
    100e:	98 f0       	brcs	.+38     	; 0x1036 <__fixunssfsi+0x30>
    1010:	b9 2f       	mov	r27, r25
    1012:	99 27       	eor	r25, r25
    1014:	b7 51       	subi	r27, 0x17	; 23
    1016:	b0 f0       	brcs	.+44     	; 0x1044 <__fixunssfsi+0x3e>
    1018:	e1 f0       	breq	.+56     	; 0x1052 <__fixunssfsi+0x4c>
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	1a f0       	brmi	.+6      	; 0x102a <__fixunssfsi+0x24>
    1024:	ba 95       	dec	r27
    1026:	c9 f7       	brne	.-14     	; 0x101a <__fixunssfsi+0x14>
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <__fixunssfsi+0x4c>
    102a:	b1 30       	cpi	r27, 0x01	; 1
    102c:	91 f0       	breq	.+36     	; 0x1052 <__fixunssfsi+0x4c>
    102e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_zero>
    1032:	b1 e0       	ldi	r27, 0x01	; 1
    1034:	08 95       	ret
    1036:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_zero>
    103a:	67 2f       	mov	r22, r23
    103c:	78 2f       	mov	r23, r24
    103e:	88 27       	eor	r24, r24
    1040:	b8 5f       	subi	r27, 0xF8	; 248
    1042:	39 f0       	breq	.+14     	; 0x1052 <__fixunssfsi+0x4c>
    1044:	b9 3f       	cpi	r27, 0xF9	; 249
    1046:	cc f3       	brlt	.-14     	; 0x103a <__fixunssfsi+0x34>
    1048:	86 95       	lsr	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	b3 95       	inc	r27
    1050:	d9 f7       	brne	.-10     	; 0x1048 <__fixunssfsi+0x42>
    1052:	3e f4       	brtc	.+14     	; 0x1062 <__fixunssfsi+0x5c>
    1054:	90 95       	com	r25
    1056:	80 95       	com	r24
    1058:	70 95       	com	r23
    105a:	61 95       	neg	r22
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	08 95       	ret

00001064 <__floatunsisf>:
    1064:	e8 94       	clt
    1066:	09 c0       	rjmp	.+18     	; 0x107a <__floatsisf+0x12>

00001068 <__floatsisf>:
    1068:	97 fb       	bst	r25, 7
    106a:	3e f4       	brtc	.+14     	; 0x107a <__floatsisf+0x12>
    106c:	90 95       	com	r25
    106e:	80 95       	com	r24
    1070:	70 95       	com	r23
    1072:	61 95       	neg	r22
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	8f 4f       	sbci	r24, 0xFF	; 255
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	99 23       	and	r25, r25
    107c:	a9 f0       	breq	.+42     	; 0x10a8 <__floatsisf+0x40>
    107e:	f9 2f       	mov	r31, r25
    1080:	96 e9       	ldi	r25, 0x96	; 150
    1082:	bb 27       	eor	r27, r27
    1084:	93 95       	inc	r25
    1086:	f6 95       	lsr	r31
    1088:	87 95       	ror	r24
    108a:	77 95       	ror	r23
    108c:	67 95       	ror	r22
    108e:	b7 95       	ror	r27
    1090:	f1 11       	cpse	r31, r1
    1092:	f8 cf       	rjmp	.-16     	; 0x1084 <__floatsisf+0x1c>
    1094:	fa f4       	brpl	.+62     	; 0x10d4 <__floatsisf+0x6c>
    1096:	bb 0f       	add	r27, r27
    1098:	11 f4       	brne	.+4      	; 0x109e <__floatsisf+0x36>
    109a:	60 ff       	sbrs	r22, 0
    109c:	1b c0       	rjmp	.+54     	; 0x10d4 <__floatsisf+0x6c>
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	8f 4f       	sbci	r24, 0xFF	; 255
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	16 c0       	rjmp	.+44     	; 0x10d4 <__floatsisf+0x6c>
    10a8:	88 23       	and	r24, r24
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <__floatsisf+0x48>
    10ac:	96 e9       	ldi	r25, 0x96	; 150
    10ae:	11 c0       	rjmp	.+34     	; 0x10d2 <__floatsisf+0x6a>
    10b0:	77 23       	and	r23, r23
    10b2:	21 f0       	breq	.+8      	; 0x10bc <__floatsisf+0x54>
    10b4:	9e e8       	ldi	r25, 0x8E	; 142
    10b6:	87 2f       	mov	r24, r23
    10b8:	76 2f       	mov	r23, r22
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <__floatsisf+0x5e>
    10bc:	66 23       	and	r22, r22
    10be:	71 f0       	breq	.+28     	; 0x10dc <__floatsisf+0x74>
    10c0:	96 e8       	ldi	r25, 0x86	; 134
    10c2:	86 2f       	mov	r24, r22
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	2a f0       	brmi	.+10     	; 0x10d4 <__floatsisf+0x6c>
    10ca:	9a 95       	dec	r25
    10cc:	66 0f       	add	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	88 1f       	adc	r24, r24
    10d2:	da f7       	brpl	.-10     	; 0x10ca <__floatsisf+0x62>
    10d4:	88 0f       	add	r24, r24
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
    10da:	97 f9       	bld	r25, 7
    10dc:	08 95       	ret

000010de <__fp_cmp>:
    10de:	99 0f       	add	r25, r25
    10e0:	00 08       	sbc	r0, r0
    10e2:	55 0f       	add	r21, r21
    10e4:	aa 0b       	sbc	r26, r26
    10e6:	e0 e8       	ldi	r30, 0x80	; 128
    10e8:	fe ef       	ldi	r31, 0xFE	; 254
    10ea:	16 16       	cp	r1, r22
    10ec:	17 06       	cpc	r1, r23
    10ee:	e8 07       	cpc	r30, r24
    10f0:	f9 07       	cpc	r31, r25
    10f2:	c0 f0       	brcs	.+48     	; 0x1124 <__fp_cmp+0x46>
    10f4:	12 16       	cp	r1, r18
    10f6:	13 06       	cpc	r1, r19
    10f8:	e4 07       	cpc	r30, r20
    10fa:	f5 07       	cpc	r31, r21
    10fc:	98 f0       	brcs	.+38     	; 0x1124 <__fp_cmp+0x46>
    10fe:	62 1b       	sub	r22, r18
    1100:	73 0b       	sbc	r23, r19
    1102:	84 0b       	sbc	r24, r20
    1104:	95 0b       	sbc	r25, r21
    1106:	39 f4       	brne	.+14     	; 0x1116 <__fp_cmp+0x38>
    1108:	0a 26       	eor	r0, r26
    110a:	61 f0       	breq	.+24     	; 0x1124 <__fp_cmp+0x46>
    110c:	23 2b       	or	r18, r19
    110e:	24 2b       	or	r18, r20
    1110:	25 2b       	or	r18, r21
    1112:	21 f4       	brne	.+8      	; 0x111c <__fp_cmp+0x3e>
    1114:	08 95       	ret
    1116:	0a 26       	eor	r0, r26
    1118:	09 f4       	brne	.+2      	; 0x111c <__fp_cmp+0x3e>
    111a:	a1 40       	sbci	r26, 0x01	; 1
    111c:	a6 95       	lsr	r26
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	81 1d       	adc	r24, r1
    1122:	81 1d       	adc	r24, r1
    1124:	08 95       	ret

00001126 <__fp_inf>:
    1126:	97 f9       	bld	r25, 7
    1128:	9f 67       	ori	r25, 0x7F	; 127
    112a:	80 e8       	ldi	r24, 0x80	; 128
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	08 95       	ret

00001132 <__fp_nan>:
    1132:	9f ef       	ldi	r25, 0xFF	; 255
    1134:	80 ec       	ldi	r24, 0xC0	; 192
    1136:	08 95       	ret

00001138 <__fp_pscA>:
    1138:	00 24       	eor	r0, r0
    113a:	0a 94       	dec	r0
    113c:	16 16       	cp	r1, r22
    113e:	17 06       	cpc	r1, r23
    1140:	18 06       	cpc	r1, r24
    1142:	09 06       	cpc	r0, r25
    1144:	08 95       	ret

00001146 <__fp_pscB>:
    1146:	00 24       	eor	r0, r0
    1148:	0a 94       	dec	r0
    114a:	12 16       	cp	r1, r18
    114c:	13 06       	cpc	r1, r19
    114e:	14 06       	cpc	r1, r20
    1150:	05 06       	cpc	r0, r21
    1152:	08 95       	ret

00001154 <__fp_round>:
    1154:	09 2e       	mov	r0, r25
    1156:	03 94       	inc	r0
    1158:	00 0c       	add	r0, r0
    115a:	11 f4       	brne	.+4      	; 0x1160 <__fp_round+0xc>
    115c:	88 23       	and	r24, r24
    115e:	52 f0       	brmi	.+20     	; 0x1174 <__fp_round+0x20>
    1160:	bb 0f       	add	r27, r27
    1162:	40 f4       	brcc	.+16     	; 0x1174 <__fp_round+0x20>
    1164:	bf 2b       	or	r27, r31
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_round+0x18>
    1168:	60 ff       	sbrs	r22, 0
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__fp_round+0x20>
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__fp_split3>:
    1176:	57 fd       	sbrc	r21, 7
    1178:	90 58       	subi	r25, 0x80	; 128
    117a:	44 0f       	add	r20, r20
    117c:	55 1f       	adc	r21, r21
    117e:	59 f0       	breq	.+22     	; 0x1196 <__fp_splitA+0x10>
    1180:	5f 3f       	cpi	r21, 0xFF	; 255
    1182:	71 f0       	breq	.+28     	; 0x11a0 <__fp_splitA+0x1a>
    1184:	47 95       	ror	r20

00001186 <__fp_splitA>:
    1186:	88 0f       	add	r24, r24
    1188:	97 fb       	bst	r25, 7
    118a:	99 1f       	adc	r25, r25
    118c:	61 f0       	breq	.+24     	; 0x11a6 <__fp_splitA+0x20>
    118e:	9f 3f       	cpi	r25, 0xFF	; 255
    1190:	79 f0       	breq	.+30     	; 0x11b0 <__fp_splitA+0x2a>
    1192:	87 95       	ror	r24
    1194:	08 95       	ret
    1196:	12 16       	cp	r1, r18
    1198:	13 06       	cpc	r1, r19
    119a:	14 06       	cpc	r1, r20
    119c:	55 1f       	adc	r21, r21
    119e:	f2 cf       	rjmp	.-28     	; 0x1184 <__fp_split3+0xe>
    11a0:	46 95       	lsr	r20
    11a2:	f1 df       	rcall	.-30     	; 0x1186 <__fp_splitA>
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <__fp_splitA+0x30>
    11a6:	16 16       	cp	r1, r22
    11a8:	17 06       	cpc	r1, r23
    11aa:	18 06       	cpc	r1, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	f1 cf       	rjmp	.-30     	; 0x1192 <__fp_splitA+0xc>
    11b0:	86 95       	lsr	r24
    11b2:	71 05       	cpc	r23, r1
    11b4:	61 05       	cpc	r22, r1
    11b6:	08 94       	sec
    11b8:	08 95       	ret

000011ba <__fp_zero>:
    11ba:	e8 94       	clt

000011bc <__fp_szero>:
    11bc:	bb 27       	eor	r27, r27
    11be:	66 27       	eor	r22, r22
    11c0:	77 27       	eor	r23, r23
    11c2:	cb 01       	movw	r24, r22
    11c4:	97 f9       	bld	r25, 7
    11c6:	08 95       	ret

000011c8 <__gesf2>:
    11c8:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_cmp>
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <__gesf2+0x8>
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	08 95       	ret

000011d2 <isinf>:
    11d2:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_splitA>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	20 f4       	brcc	.+8      	; 0x11e4 <isinf+0x12>
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <isinf+0x12>
    11de:	0e f4       	brtc	.+2      	; 0x11e2 <isinf+0x10>
    11e0:	02 97       	sbiw	r24, 0x02	; 2
    11e2:	83 95       	inc	r24
    11e4:	08 95       	ret

000011e6 <isnan>:
    11e6:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_splitA>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <isnan+0xc>
    11f0:	88 1f       	adc	r24, r24
    11f2:	08 95       	ret

000011f4 <__mulsf3>:
    11f4:	0e 94 0d 09 	call	0x121a	; 0x121a <__mulsf3x>
    11f8:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_round>
    11fc:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscA>
    1200:	38 f0       	brcs	.+14     	; 0x1210 <__mulsf3+0x1c>
    1202:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_pscB>
    1206:	20 f0       	brcs	.+8      	; 0x1210 <__mulsf3+0x1c>
    1208:	95 23       	and	r25, r21
    120a:	11 f0       	breq	.+4      	; 0x1210 <__mulsf3+0x1c>
    120c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>
    1210:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__fp_nan>
    1214:	11 24       	eor	r1, r1
    1216:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>

0000121a <__mulsf3x>:
    121a:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_split3>
    121e:	70 f3       	brcs	.-36     	; 0x11fc <__mulsf3+0x8>

00001220 <__mulsf3_pse>:
    1220:	95 9f       	mul	r25, r21
    1222:	c1 f3       	breq	.-16     	; 0x1214 <__mulsf3+0x20>
    1224:	95 0f       	add	r25, r21
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	55 1f       	adc	r21, r21
    122a:	62 9f       	mul	r22, r18
    122c:	f0 01       	movw	r30, r0
    122e:	72 9f       	mul	r23, r18
    1230:	bb 27       	eor	r27, r27
    1232:	f0 0d       	add	r31, r0
    1234:	b1 1d       	adc	r27, r1
    1236:	63 9f       	mul	r22, r19
    1238:	aa 27       	eor	r26, r26
    123a:	f0 0d       	add	r31, r0
    123c:	b1 1d       	adc	r27, r1
    123e:	aa 1f       	adc	r26, r26
    1240:	64 9f       	mul	r22, r20
    1242:	66 27       	eor	r22, r22
    1244:	b0 0d       	add	r27, r0
    1246:	a1 1d       	adc	r26, r1
    1248:	66 1f       	adc	r22, r22
    124a:	82 9f       	mul	r24, r18
    124c:	22 27       	eor	r18, r18
    124e:	b0 0d       	add	r27, r0
    1250:	a1 1d       	adc	r26, r1
    1252:	62 1f       	adc	r22, r18
    1254:	73 9f       	mul	r23, r19
    1256:	b0 0d       	add	r27, r0
    1258:	a1 1d       	adc	r26, r1
    125a:	62 1f       	adc	r22, r18
    125c:	83 9f       	mul	r24, r19
    125e:	a0 0d       	add	r26, r0
    1260:	61 1d       	adc	r22, r1
    1262:	22 1f       	adc	r18, r18
    1264:	74 9f       	mul	r23, r20
    1266:	33 27       	eor	r19, r19
    1268:	a0 0d       	add	r26, r0
    126a:	61 1d       	adc	r22, r1
    126c:	23 1f       	adc	r18, r19
    126e:	84 9f       	mul	r24, r20
    1270:	60 0d       	add	r22, r0
    1272:	21 1d       	adc	r18, r1
    1274:	82 2f       	mov	r24, r18
    1276:	76 2f       	mov	r23, r22
    1278:	6a 2f       	mov	r22, r26
    127a:	11 24       	eor	r1, r1
    127c:	9f 57       	subi	r25, 0x7F	; 127
    127e:	50 40       	sbci	r21, 0x00	; 0
    1280:	9a f0       	brmi	.+38     	; 0x12a8 <__mulsf3_pse+0x88>
    1282:	f1 f0       	breq	.+60     	; 0x12c0 <__mulsf3_pse+0xa0>
    1284:	88 23       	and	r24, r24
    1286:	4a f0       	brmi	.+18     	; 0x129a <__mulsf3_pse+0x7a>
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	bb 1f       	adc	r27, r27
    128e:	66 1f       	adc	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	91 50       	subi	r25, 0x01	; 1
    1296:	50 40       	sbci	r21, 0x00	; 0
    1298:	a9 f7       	brne	.-22     	; 0x1284 <__mulsf3_pse+0x64>
    129a:	9e 3f       	cpi	r25, 0xFE	; 254
    129c:	51 05       	cpc	r21, r1
    129e:	80 f0       	brcs	.+32     	; 0x12c0 <__mulsf3_pse+0xa0>
    12a0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>
    12a4:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>
    12a8:	5f 3f       	cpi	r21, 0xFF	; 255
    12aa:	e4 f3       	brlt	.-8      	; 0x12a4 <__mulsf3_pse+0x84>
    12ac:	98 3e       	cpi	r25, 0xE8	; 232
    12ae:	d4 f3       	brlt	.-12     	; 0x12a4 <__mulsf3_pse+0x84>
    12b0:	86 95       	lsr	r24
    12b2:	77 95       	ror	r23
    12b4:	67 95       	ror	r22
    12b6:	b7 95       	ror	r27
    12b8:	f7 95       	ror	r31
    12ba:	e7 95       	ror	r30
    12bc:	9f 5f       	subi	r25, 0xFF	; 255
    12be:	c1 f7       	brne	.-16     	; 0x12b0 <__mulsf3_pse+0x90>
    12c0:	fe 2b       	or	r31, r30
    12c2:	88 0f       	add	r24, r24
    12c4:	91 1d       	adc	r25, r1
    12c6:	96 95       	lsr	r25
    12c8:	87 95       	ror	r24
    12ca:	97 f9       	bld	r25, 7
    12cc:	08 95       	ret

000012ce <strlen>:
    12ce:	fc 01       	movw	r30, r24
    12d0:	01 90       	ld	r0, Z+
    12d2:	00 20       	and	r0, r0
    12d4:	e9 f7       	brne	.-6      	; 0x12d0 <strlen+0x2>
    12d6:	80 95       	com	r24
    12d8:	90 95       	com	r25
    12da:	8e 0f       	add	r24, r30
    12dc:	9f 1f       	adc	r25, r31
    12de:	08 95       	ret

000012e0 <_exit>:
    12e0:	f8 94       	cli

000012e2 <__stop_program>:
    12e2:	ff cf       	rjmp	.-2      	; 0x12e2 <__stop_program>
