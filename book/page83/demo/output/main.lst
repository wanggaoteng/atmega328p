
output/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000c68  00000cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080012c  0080012c  00000d28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001329  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae7  00000000  00000000  00002109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a77  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012cb  00000000  00000000  00003daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000507a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9f 04 	call	0x93e	; 0x93e <main>
  9e:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <avr_uart_putchar>:

	xdev_out(avr_uart_putchar);
}

void avr_uart_putchar(char c, FILE *stream) 
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <avr_uart_putchar+0xe>
        avr_uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <avr_uart_putchar+0xe>
    UDR0 = c;
  bc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <avr_uart_getchar>:

char avr_uart_getchar(FILE *stream) 
{
    loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <avr_uart_getchar>
    return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  d0:	08 95       	ret

000000d2 <avr_uart_getchar_echo>:


char avr_uart_getchar_echo(FILE *stream) 
{
  d2:	cf 93       	push	r28
    loop_until_bit_is_set(UCSR0A, RXC0);
  d4:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	27 ff       	sbrs	r18, 7
  da:	fc cf       	rjmp	.-8      	; 0xd4 <avr_uart_getchar_echo+0x2>
    char c=UDR0;
  dc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    avr_uart_putchar(c, stream);
  e0:	bc 01       	movw	r22, r24
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    return c;
}
  e8:	8c 2f       	mov	r24, r28
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <set_register_bits>:
#include "functions.h"
#include "util/delay.h"

//set_register_bits(&PORTB, 2, PB4, PB5);
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	ef 81       	ldd	r30, Y+7	; 0x07
  fc:	f8 85       	ldd	r31, Y+8	; 0x08
  fe:	49 85       	ldd	r20, Y+9	; 0x09
 100:	5a 85       	ldd	r21, Y+10	; 0x0a
 102:	9e 01       	movw	r18, r28
 104:	25 5f       	subi	r18, 0xF5	; 245
 106:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0x00;
 108:	90 e0       	ldi	r25, 0x00	; 0
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 10a:	80 e0       	ldi	r24, 0x00	; 0
	{
		temp |= _BV( va_arg( pointer, int ) );
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	d9 01       	movw	r26, r18
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 112:	84 17       	cp	r24, r20
 114:	15 06       	cpc	r1, r21
 116:	44 f0       	brlt	.+16     	; 0x128 <set_register_bits+0x3a>
	{
		temp |= _BV( va_arg( pointer, int ) );
	}
	*mcu_register |= temp;
 118:	80 81       	ld	r24, Z
 11a:	89 2b       	or	r24, r25
 11c:	80 83       	st	Z, r24
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret
 128:	2e 5f       	subi	r18, 0xFE	; 254
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
	{
		temp |= _BV( va_arg( pointer, int ) );
 12c:	8b 01       	movw	r16, r22
 12e:	0c 90       	ld	r0, X
 130:	02 c0       	rjmp	.+4      	; 0x136 <set_register_bits+0x48>
 132:	00 0f       	add	r16, r16
 134:	11 1f       	adc	r17, r17
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <set_register_bits+0x44>
 13a:	90 2b       	or	r25, r16
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	e8 cf       	rjmp	.-48     	; 0x110 <set_register_bits+0x22>

00000140 <clear_register_bits>:
	*mcu_register |= temp;
}

//clear_register_bits(&PORTB, 2, PB4, PB5);
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	ef 81       	ldd	r30, Y+7	; 0x07
 14e:	f8 85       	ldd	r31, Y+8	; 0x08
 150:	49 85       	ldd	r20, Y+9	; 0x09
 152:	5a 85       	ldd	r21, Y+10	; 0x0a
 154:	9e 01       	movw	r18, r28
 156:	25 5f       	subi	r18, 0xF5	; 245
 158:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0xff;
 15a:	9f ef       	ldi	r25, 0xFF	; 255
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 15c:	80 e0       	ldi	r24, 0x00	; 0
	{
		temp &= ~_BV( va_arg( pointer, int ) );
 15e:	01 e0       	ldi	r16, 0x01	; 1
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	d9 01       	movw	r26, r18
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 164:	84 17       	cp	r24, r20
 166:	15 06       	cpc	r1, r21
 168:	44 f0       	brlt	.+16     	; 0x17a <clear_register_bits+0x3a>
	{
		temp &= ~_BV( va_arg( pointer, int ) );
	}
	*mcu_register &= temp;
 16a:	80 81       	ld	r24, Z
 16c:	89 23       	and	r24, r25
 16e:	80 83       	st	Z, r24
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret
 17a:	2e 5f       	subi	r18, 0xFE	; 254
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
	{
		temp &= ~_BV( va_arg( pointer, int ) );
 17e:	b8 01       	movw	r22, r16
 180:	0c 90       	ld	r0, X
 182:	02 c0       	rjmp	.+4      	; 0x188 <clear_register_bits+0x48>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <clear_register_bits+0x44>
 18c:	60 95       	com	r22
 18e:	70 95       	com	r23
 190:	96 23       	and	r25, r22
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	e6 cf       	rjmp	.-52     	; 0x162 <clear_register_bits+0x22>

00000196 <blink>:
//delay: blink time interval
//n>0,delay>0  normal 
//n=0,delay>0  cycle 
//n=0,delay=0  toggle 
void blink(uint8_t n,uint16_t delay)
{
 196:	4f 92       	push	r4
 198:	5f 92       	push	r5
 19a:	6f 92       	push	r6
 19c:	7f 92       	push	r7
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	18 2f       	mov	r17, r24
	DDRB |= _BV(PB5);
 1b8:	25 9a       	sbi	0x04, 5	; 4
	if((n>0)&&(delay>0))
 1ba:	88 23       	and	r24, r24
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <blink+0x2a>
 1be:	91 c0       	rjmp	.+290    	; 0x2e2 <blink+0x14c>
 1c0:	61 15       	cp	r22, r1
 1c2:	71 05       	cpc	r23, r1
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <blink+0x32>
 1c6:	68 c0       	rjmp	.+208    	; 0x298 <blink+0x102>
	{
		while(n)
		{

			PORTB |= _BV(PB5);
			_delay_ms(delay);
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 05 05 	call	0xa0a	; 0xa0a <__floatunsisf>
 1d0:	2b 01       	movw	r4, r22
 1d2:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	4a ef       	ldi	r20, 0xFA	; 250
 1da:	54 e4       	ldi	r21, 0x44	; 68
 1dc:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 1e0:	6b 01       	movw	r12, r22
 1e2:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixunssfsi>
 1e8:	4b 01       	movw	r8, r22
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e8       	ldi	r20, 0x80	; 128
 1f0:	5f e3       	ldi	r21, 0x3F	; 63
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__cmpsf2>
 1fa:	c1 e0       	ldi	r28, 0x01	; 1
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	87 ff       	sbrs	r24, 7
 200:	e4 01       	movw	r28, r8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 202:	88 ec       	ldi	r24, 0xC8	; 200
 204:	a8 2e       	mov	r10, r24
 206:	b1 2c       	mov	r11, r1
	if((n>0)&&(delay>0))
	{
		while(n)
		{

			PORTB |= _BV(PB5);
 208:	2d 9a       	sbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e8       	ldi	r20, 0x80	; 128
 210:	5f e3       	ldi	r21, 0x3F	; 63
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__cmpsf2>
 21a:	87 fd       	sbrc	r24, 7
 21c:	54 c0       	rjmp	.+168    	; 0x2c6 <blink+0x130>
		__ticks = 1;
	else if (__tmp > 65535)
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	3f ef       	ldi	r19, 0xFF	; 255
 222:	4f e7       	ldi	r20, 0x7F	; 127
 224:	57 e4       	ldi	r21, 0x47	; 71
 226:	c7 01       	movw	r24, r14
 228:	b6 01       	movw	r22, r12
 22a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 22e:	18 16       	cp	r1, r24
 230:	0c f0       	brlt	.+2      	; 0x234 <blink+0x9e>
 232:	49 c0       	rjmp	.+146    	; 0x2c6 <blink+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e2       	ldi	r20, 0x20	; 32
 23a:	51 e4       	ldi	r21, 0x41	; 65
 23c:	c3 01       	movw	r24, r6
 23e:	b2 01       	movw	r22, r4
 240:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 244:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixunssfsi>
		while(__ticks)
 248:	61 15       	cp	r22, r1
 24a:	71 05       	cpc	r23, r1
 24c:	b1 f5       	brne	.+108    	; 0x2ba <blink+0x124>
			_delay_ms(delay);
			PORTB &= ~_BV(PB5);
 24e:	2d 98       	cbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	40 e8       	ldi	r20, 0x80	; 128
 256:	5f e3       	ldi	r21, 0x3F	; 63
 258:	c7 01       	movw	r24, r14
 25a:	b6 01       	movw	r22, r12
 25c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__cmpsf2>
 260:	87 fd       	sbrc	r24, 7
 262:	3b c0       	rjmp	.+118    	; 0x2da <blink+0x144>
		__ticks = 1;
	else if (__tmp > 65535)
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	3f ef       	ldi	r19, 0xFF	; 255
 268:	4f e7       	ldi	r20, 0x7F	; 127
 26a:	57 e4       	ldi	r21, 0x47	; 71
 26c:	c7 01       	movw	r24, r14
 26e:	b6 01       	movw	r22, r12
 270:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 274:	18 16       	cp	r1, r24
 276:	8c f5       	brge	.+98     	; 0x2da <blink+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	40 e2       	ldi	r20, 0x20	; 32
 27e:	51 e4       	ldi	r21, 0x41	; 65
 280:	c3 01       	movw	r24, r6
 282:	b2 01       	movw	r22, r4
 284:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 288:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixunssfsi>
		while(__ticks)
 28c:	61 15       	cp	r22, r1
 28e:	71 05       	cpc	r23, r1
 290:	f1 f4       	brne	.+60     	; 0x2ce <blink+0x138>
			_delay_ms(delay);
			n--;
 292:	11 50       	subi	r17, 0x01	; 1
void blink(uint8_t n,uint16_t delay)
{
	DDRB |= _BV(PB5);
	if((n>0)&&(delay>0))
	{
		while(n)
 294:	09 f0       	breq	.+2      	; 0x298 <blink+0x102>
 296:	b8 cf       	rjmp	.-144    	; 0x208 <blink+0x72>
		if(bit_is_set(PINB,PB5))
			PORTB &= ~_BV(PB5);
		else
			PORTB |= _BV(PB5);
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	7f 90       	pop	r7
 2b2:	6f 90       	pop	r6
 2b4:	5f 90       	pop	r5
 2b6:	4f 90       	pop	r4
 2b8:	08 95       	ret
 2ba:	c5 01       	movw	r24, r10
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <blink+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c0:	61 50       	subi	r22, 0x01	; 1
 2c2:	71 09       	sbc	r23, r1
 2c4:	c1 cf       	rjmp	.-126    	; 0x248 <blink+0xb2>
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <blink+0x132>
 2cc:	c0 cf       	rjmp	.-128    	; 0x24e <blink+0xb8>
 2ce:	c5 01       	movw	r24, r10
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <blink+0x13a>
 2d4:	61 50       	subi	r22, 0x01	; 1
 2d6:	71 09       	sbc	r23, r1
 2d8:	d9 cf       	rjmp	.-78     	; 0x28c <blink+0xf6>
 2da:	ce 01       	movw	r24, r28
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <blink+0x146>
 2e0:	d8 cf       	rjmp	.-80     	; 0x292 <blink+0xfc>
			PORTB &= ~_BV(PB5);
			_delay_ms(delay);
			n--;
		}
	}
	else if((n==0)&&(delay>0))
 2e2:	61 15       	cp	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <blink+0x154>
 2e8:	79 c0       	rjmp	.+242    	; 0x3dc <blink+0x246>
	{
		while(1)
		{
			PORTB |= _BV(PB5);
			_delay_ms(delay);
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 05 05 	call	0xa0a	; 0xa0a <__floatunsisf>
 2f2:	4b 01       	movw	r8, r22
 2f4:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	4a ef       	ldi	r20, 0xFA	; 250
 2fc:	54 e4       	ldi	r21, 0x44	; 68
 2fe:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 302:	6b 01       	movw	r12, r22
 304:	7c 01       	movw	r14, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 306:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixunssfsi>
 30a:	2b 01       	movw	r4, r22
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e8       	ldi	r20, 0x80	; 128
 312:	5f e3       	ldi	r21, 0x3F	; 63
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__cmpsf2>
 31c:	c1 e0       	ldi	r28, 0x01	; 1
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	87 ff       	sbrs	r24, 7
 322:	e2 01       	movw	r28, r4
 324:	08 ec       	ldi	r16, 0xC8	; 200
 326:	10 e0       	ldi	r17, 0x00	; 0
	}
	else if((n==0)&&(delay>0))
	{
		while(1)
		{
			PORTB |= _BV(PB5);
 328:	2d 9a       	sbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e8       	ldi	r20, 0x80	; 128
 330:	5f e3       	ldi	r21, 0x3F	; 63
 332:	c7 01       	movw	r24, r14
 334:	b6 01       	movw	r22, r12
 336:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__cmpsf2>
 33a:	87 fd       	sbrc	r24, 7
 33c:	47 c0       	rjmp	.+142    	; 0x3cc <blink+0x236>
		__ticks = 1;
	else if (__tmp > 65535)
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	3f ef       	ldi	r19, 0xFF	; 255
 342:	4f e7       	ldi	r20, 0x7F	; 127
 344:	57 e4       	ldi	r21, 0x47	; 71
 346:	c7 01       	movw	r24, r14
 348:	b6 01       	movw	r22, r12
 34a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 34e:	18 16       	cp	r1, r24
 350:	0c f0       	brlt	.+2      	; 0x354 <blink+0x1be>
 352:	3c c0       	rjmp	.+120    	; 0x3cc <blink+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	40 e2       	ldi	r20, 0x20	; 32
 35a:	51 e4       	ldi	r21, 0x41	; 65
 35c:	c5 01       	movw	r24, r10
 35e:	b4 01       	movw	r22, r8
 360:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 364:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixunssfsi>
		while(__ticks)
 368:	61 15       	cp	r22, r1
 36a:	71 05       	cpc	r23, r1
 36c:	49 f5       	brne	.+82     	; 0x3c0 <blink+0x22a>
			_delay_ms(delay);
			PORTB &= ~_BV(PB5);
 36e:	2d 98       	cbi	0x05, 5	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e8       	ldi	r20, 0x80	; 128
 376:	5f e3       	ldi	r21, 0x3F	; 63
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__cmpsf2>
 380:	87 fd       	sbrc	r24, 7
 382:	28 c0       	rjmp	.+80     	; 0x3d4 <blink+0x23e>
		__ticks = 1;
	else if (__tmp > 65535)
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	3f ef       	ldi	r19, 0xFF	; 255
 388:	4f e7       	ldi	r20, 0x7F	; 127
 38a:	57 e4       	ldi	r21, 0x47	; 71
 38c:	c7 01       	movw	r24, r14
 38e:	b6 01       	movw	r22, r12
 390:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 394:	18 16       	cp	r1, r24
 396:	f4 f4       	brge	.+60     	; 0x3d4 <blink+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e2       	ldi	r20, 0x20	; 32
 39e:	51 e4       	ldi	r21, 0x41	; 65
 3a0:	c5 01       	movw	r24, r10
 3a2:	b4 01       	movw	r22, r8
 3a4:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 3a8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixunssfsi>
		while(__ticks)
 3ac:	61 15       	cp	r22, r1
 3ae:	71 05       	cpc	r23, r1
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <blink+0x21e>
 3b2:	ba cf       	rjmp	.-140    	; 0x328 <blink+0x192>
 3b4:	c8 01       	movw	r24, r16
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <blink+0x220>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ba:	61 50       	subi	r22, 0x01	; 1
 3bc:	71 09       	sbc	r23, r1
 3be:	f6 cf       	rjmp	.-20     	; 0x3ac <blink+0x216>
 3c0:	c8 01       	movw	r24, r16
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <blink+0x22c>
 3c6:	61 50       	subi	r22, 0x01	; 1
 3c8:	71 09       	sbc	r23, r1
 3ca:	ce cf       	rjmp	.-100    	; 0x368 <blink+0x1d2>
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <blink+0x238>
 3d2:	cd cf       	rjmp	.-102    	; 0x36e <blink+0x1d8>
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <blink+0x240>
 3da:	a6 cf       	rjmp	.-180    	; 0x328 <blink+0x192>
			_delay_ms(delay);
		}
	}
	else if((n==0)&&(delay==0))
	{
		DDRB |= _BV(PB5);
 3dc:	25 9a       	sbi	0x04, 5	; 4
		if(bit_is_set(PINB,PB5))
 3de:	1d 9b       	sbis	0x03, 5	; 3
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <blink+0x250>
			PORTB &= ~_BV(PB5);
 3e2:	2d 98       	cbi	0x05, 5	; 5
 3e4:	59 cf       	rjmp	.-334    	; 0x298 <blink+0x102>
		else
			PORTB |= _BV(PB5);
 3e6:	2d 9a       	sbi	0x05, 5	; 5
	}
}
 3e8:	57 cf       	rjmp	.-338    	; 0x298 <blink+0x102>

000003ea <avr_uart_init>:
#endif
#include "util/setbaud.h"

void avr_uart_init(void) 
{
    UBRR0H = UBRRH_VALUE;
 3ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = UBRRL_VALUE;
 3ee:	83 e3       	ldi	r24, 0x33	; 51
 3f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
 3f4:	e0 ec       	ldi	r30, 0xC0	; 192
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	8d 7f       	andi	r24, 0xFD	; 253
 3fc:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 404:	88 e1       	ldi	r24, 0x18	; 24
 406:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	stdout = &avr_uart_output;
 40a:	e0 e3       	ldi	r30, 0x30	; 48
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	8c e1       	ldi	r24, 0x1C	; 28
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	93 83       	std	Z+3, r25	; 0x03
 414:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &avr_uart_input;
 416:	8e e0       	ldi	r24, 0x0E	; 14
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	91 83       	std	Z+1, r25	; 0x01
 41c:	80 83       	st	Z, r24

	xdev_out(avr_uart_putchar);
 41e:	83 e5       	ldi	r24, 0x53	; 83
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <xfunc_output+0x1>
 426:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <xfunc_output>
}
 42a:	08 95       	ret

0000042c <avr_uart_data_avaiable>:
}

// return 0 if no data available, read it if available
bool avr_uart_data_avaiable(char *data) 
{
    if (UCSR0A & (1<<RXC0)) {
 42c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 430:	27 ff       	sbrs	r18, 7
 432:	06 c0       	rjmp	.+12     	; 0x440 <avr_uart_data_avaiable+0x14>
        *data = UDR0;
 434:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
        return true;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	08 95       	ret
    }
    return false;
 440:	80 e0       	ldi	r24, 0x00	; 0
}
 442:	08 95       	ret

00000444 <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 444:	fc 01       	movw	r30, r24
 446:	cb 01       	movw	r24, r22
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
 448:	30 97       	sbiw	r30, 0x00	; 0
 44a:	09 f0       	breq	.+2      	; 0x44e <xfputc+0xa>
		func(chr);		/* Write a character to the output device */
 44c:	09 94       	ijmp
	} else if (strptr) {
 44e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 452:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__data_end+0x1>
 456:	30 97       	sbiw	r30, 0x00	; 0
 458:	41 f0       	breq	.+16     	; 0x46a <xfputc+0x26>
		 *strptr++ = chr;	/* Write a character to the memory */
 45a:	9f 01       	movw	r18, r30
 45c:	2f 5f       	subi	r18, 0xFF	; 255
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <__data_end+0x1>
 464:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <__data_end>
 468:	60 83       	st	Z, r22
	}
}
 46a:	08 95       	ret

0000046c <xputc>:

void xputc (
	int chr				/* Character to be output */
)
{
	xfputc(xfunc_output, chr);	/* Output it to the default output device */
 46c:	bc 01       	movw	r22, r24
 46e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <xfunc_output>
 472:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <xfunc_output+0x1>
 476:	0c 94 22 02 	jmp	0x444	; 0x444 <xfputc>

0000047a <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 47a:	2f 92       	push	r2
 47c:	3f 92       	push	r3
 47e:	4f 92       	push	r4
 480:	5f 92       	push	r5
 482:	6f 92       	push	r6
 484:	7f 92       	push	r7
 486:	8f 92       	push	r8
 488:	9f 92       	push	r9
 48a:	af 92       	push	r10
 48c:	bf 92       	push	r11
 48e:	cf 92       	push	r12
 490:	df 92       	push	r13
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	a8 97       	sbiw	r28, 0x28	; 40
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	2c 01       	movw	r4, r24
 4b0:	3b 01       	movw	r6, r22
 4b2:	7a 01       	movw	r14, r20
 4b4:	9e 01       	movw	r18, r28
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	3a a3       	std	Y+34, r19	; 0x22
 4bc:	29 a3       	std	Y+33, r18	; 0x21
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 4be:	d3 01       	movw	r26, r6
 4c0:	6c 91       	ld	r22, X
		if (!c) break;				/* End of format? */
 4c2:	66 23       	and	r22, r22
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <xvfprintf+0x4e>
 4c6:	b5 c1       	rjmp	.+874    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		if (c != '%') {				/* Pass it through if not a % sequense */
 4c8:	65 32       	cpi	r22, 0x25	; 37
 4ca:	61 f0       	breq	.+24     	; 0x4e4 <xvfprintf+0x6a>
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 4cc:	bf ef       	ldi	r27, 0xFF	; 255
 4ce:	6b 1a       	sub	r6, r27
 4d0:	7b 0a       	sbc	r7, r27
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
 4d2:	06 2e       	mov	r0, r22
 4d4:	00 0c       	add	r0, r0
 4d6:	77 0b       	sbc	r23, r23
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 4d8:	c2 01       	movw	r24, r4
 4da:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 4de:	fc a2       	std	Y+36, r15	; 0x24
 4e0:	eb a2       	std	Y+35, r14	; 0x23
 4e2:	39 c1       	rjmp	.+626    	; 0x756 <xvfprintf+0x2dc>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 4e4:	f3 01       	movw	r30, r6
 4e6:	21 81       	ldd	r18, Z+1	; 0x01
		if (c == '0') {				/* Flag: left '0' padded */
 4e8:	20 33       	cpi	r18, 0x30	; 48
 4ea:	09 f0       	breq	.+2      	; 0x4ee <xvfprintf+0x74>
 4ec:	41 c0       	rjmp	.+130    	; 0x570 <xvfprintf+0xf6>
			pad = '0'; c = *fmt++;
 4ee:	33 96       	adiw	r30, 0x03	; 3
 4f0:	2d a3       	std	Y+37, r18	; 0x25
 4f2:	12 96       	adiw	r26, 0x02	; 2
 4f4:	2c 91       	ld	r18, X
		c = *fmt++;					/* Get a format character */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
 4f6:	b1 2c       	mov	r11, r1
 4f8:	a1 2c       	mov	r10, r1
 4fa:	31 2c       	mov	r3, r1
 4fc:	21 2c       	mov	r2, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 4fe:	2a 32       	cpi	r18, 0x2A	; 42
 500:	09 f0       	breq	.+2      	; 0x504 <xvfprintf+0x8a>
 502:	54 c0       	rjmp	.+168    	; 0x5ac <xvfprintf+0x132>
			n = va_arg(arp, int);
 504:	c7 01       	movw	r24, r14
 506:	02 96       	adiw	r24, 0x02	; 2
 508:	d7 01       	movw	r26, r14
 50a:	2d 90       	ld	r2, X+
 50c:	3c 90       	ld	r3, X
			if (n < 0) {			/* Flag: left justified */
 50e:	37 fe       	sbrs	r3, 7
 510:	06 c0       	rjmp	.+12     	; 0x51e <xvfprintf+0xa4>
				n = 0 - n; f = 2;
 512:	31 94       	neg	r3
 514:	21 94       	neg	r2
 516:	31 08       	sbc	r3, r1
 518:	22 e0       	ldi	r18, 0x02	; 2
 51a:	a2 2e       	mov	r10, r18
 51c:	b1 2c       	mov	r11, r1
			}
			w = n; c = *fmt++;
 51e:	3f 01       	movw	r6, r30
 520:	bf ef       	ldi	r27, 0xFF	; 255
 522:	6b 1a       	sub	r6, r27
 524:	7b 0a       	sbc	r7, r27
 526:	20 81       	ld	r18, Z
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
			n = va_arg(arp, int);
 528:	7c 01       	movw	r14, r24
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 52a:	0f ef       	ldi	r16, 0xFF	; 255
 52c:	1f ef       	ldi	r17, 0xFF	; 255
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
 52e:	2e 32       	cpi	r18, 0x2E	; 46
 530:	09 f0       	breq	.+2      	; 0x534 <xvfprintf+0xba>
 532:	4c c0       	rjmp	.+152    	; 0x5cc <xvfprintf+0x152>
			c = *fmt++;
 534:	d3 01       	movw	r26, r6
 536:	2c 91       	ld	r18, X
			if (c == '*') {				/* Precision from an argument */
 538:	2a 32       	cpi	r18, 0x2A	; 42
 53a:	09 f4       	brne	.+2      	; 0x53e <xvfprintf+0xc4>
 53c:	3d c0       	rjmp	.+122    	; 0x5b8 <xvfprintf+0x13e>
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
 53e:	f3 01       	movw	r30, r6
 540:	31 96       	adiw	r30, 0x01	; 1
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
				c = *fmt++;
			} else {
				prec = 0;
 542:	10 e0       	ldi	r17, 0x00	; 0
 544:	00 e0       	ldi	r16, 0x00	; 0
 546:	3f 01       	movw	r6, r30
				while (c >= '0' && c <= '9') {
 548:	80 ed       	ldi	r24, 0xD0	; 208
 54a:	82 0f       	add	r24, r18
 54c:	8a 30       	cpi	r24, 0x0A	; 10
 54e:	08 f0       	brcs	.+2      	; 0x552 <xvfprintf+0xd8>
 550:	3d c0       	rjmp	.+122    	; 0x5cc <xvfprintf+0x152>
					prec = prec * 10 + c - '0';
 552:	aa e0       	ldi	r26, 0x0A	; 10
 554:	a0 9f       	mul	r26, r16
 556:	c0 01       	movw	r24, r0
 558:	a1 9f       	mul	r26, r17
 55a:	90 0d       	add	r25, r0
 55c:	11 24       	eor	r1, r1
 55e:	8c 01       	movw	r16, r24
 560:	02 0f       	add	r16, r18
 562:	11 1d       	adc	r17, r1
 564:	27 fd       	sbrc	r18, 7
 566:	1a 95       	dec	r17
 568:	00 53       	subi	r16, 0x30	; 48
 56a:	11 09       	sbc	r17, r1
					c = *fmt++;
 56c:	21 91       	ld	r18, Z+
 56e:	eb cf       	rjmp	.-42     	; 0x546 <xvfprintf+0xcc>
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 570:	2d 32       	cpi	r18, 0x2D	; 45
 572:	21 f0       	breq	.+8      	; 0x57c <xvfprintf+0x102>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 574:	32 96       	adiw	r30, 0x02	; 2
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 576:	b0 e2       	ldi	r27, 0x20	; 32
 578:	bd a3       	std	Y+37, r27	; 0x25
 57a:	bd cf       	rjmp	.-134    	; 0x4f6 <xvfprintf+0x7c>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 57c:	33 96       	adiw	r30, 0x03	; 3
 57e:	12 96       	adiw	r26, 0x02	; 2
 580:	2c 91       	ld	r18, X
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 582:	b0 e2       	ldi	r27, 0x20	; 32
 584:	bd a3       	std	Y+37, r27	; 0x25
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 586:	32 e0       	ldi	r19, 0x02	; 2
 588:	a3 2e       	mov	r10, r19
 58a:	b1 2c       	mov	r11, r1
 58c:	b6 cf       	rjmp	.-148    	; 0x4fa <xvfprintf+0x80>
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 58e:	3a e0       	ldi	r19, 0x0A	; 10
 590:	32 9d       	mul	r19, r2
 592:	c0 01       	movw	r24, r0
 594:	33 9d       	mul	r19, r3
 596:	90 0d       	add	r25, r0
 598:	11 24       	eor	r1, r1
 59a:	1c 01       	movw	r2, r24
 59c:	22 0e       	add	r2, r18
 59e:	31 1c       	adc	r3, r1
 5a0:	27 fd       	sbrc	r18, 7
 5a2:	3a 94       	dec	r3
 5a4:	80 e3       	ldi	r24, 0x30	; 48
 5a6:	28 1a       	sub	r2, r24
 5a8:	31 08       	sbc	r3, r1
				c = *fmt++;
 5aa:	21 91       	ld	r18, Z+
 5ac:	3f 01       	movw	r6, r30
			if (n < 0) {			/* Flag: left justified */
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
 5ae:	80 ed       	ldi	r24, 0xD0	; 208
 5b0:	82 0f       	add	r24, r18
 5b2:	8a 30       	cpi	r24, 0x0A	; 10
 5b4:	60 f3       	brcs	.-40     	; 0x58e <xvfprintf+0x114>
 5b6:	b9 cf       	rjmp	.-142    	; 0x52a <xvfprintf+0xb0>
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 5b8:	f7 01       	movw	r30, r14
 5ba:	00 81       	ld	r16, Z
 5bc:	11 81       	ldd	r17, Z+1	; 0x01
				c = *fmt++;
 5be:	11 96       	adiw	r26, 0x01	; 1
 5c0:	2c 91       	ld	r18, X
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 5c2:	32 96       	adiw	r30, 0x02	; 2
 5c4:	7f 01       	movw	r14, r30
				c = *fmt++;
 5c6:	c3 01       	movw	r24, r6
 5c8:	02 96       	adiw	r24, 0x02	; 2
 5ca:	3c 01       	movw	r6, r24
					prec = prec * 10 + c - '0';
					c = *fmt++;
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 5cc:	2c 36       	cpi	r18, 0x6C	; 108
 5ce:	39 f4       	brne	.+14     	; 0x5de <xvfprintf+0x164>
			f |= 4; c = *fmt++;
 5d0:	68 94       	set
 5d2:	a2 f8       	bld	r10, 2
 5d4:	f3 01       	movw	r30, r6
 5d6:	20 81       	ld	r18, Z
 5d8:	c3 01       	movw	r24, r6
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	3c 01       	movw	r6, r24
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 5de:	22 23       	and	r18, r18
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <xvfprintf+0x16a>
 5e2:	27 c1       	rjmp	.+590    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		switch (c) {				/* Type is... */
 5e4:	24 36       	cpi	r18, 0x64	; 100
 5e6:	09 f4       	brne	.+2      	; 0x5ea <xvfprintf+0x170>
 5e8:	a7 c0       	rjmp	.+334    	; 0x738 <xvfprintf+0x2be>
 5ea:	64 f4       	brge	.+24     	; 0x604 <xvfprintf+0x18a>
 5ec:	22 36       	cpi	r18, 0x62	; 98
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <xvfprintf+0x178>
 5f0:	00 c1       	rjmp	.+512    	; 0x7f2 <xvfprintf+0x378>
 5f2:	0c f0       	brlt	.+2      	; 0x5f6 <xvfprintf+0x17c>
 5f4:	a4 c0       	rjmp	.+328    	; 0x73e <xvfprintf+0x2c4>
 5f6:	28 35       	cpi	r18, 0x58	; 88
 5f8:	09 f4       	brne	.+2      	; 0x5fc <xvfprintf+0x182>
 5fa:	9b c0       	rjmp	.+310    	; 0x732 <xvfprintf+0x2b8>
 5fc:	62 2f       	mov	r22, r18
 5fe:	22 0f       	add	r18, r18
 600:	77 0b       	sbc	r23, r23
 602:	6a cf       	rjmp	.-300    	; 0x4d8 <xvfprintf+0x5e>
 604:	23 37       	cpi	r18, 0x73	; 115
 606:	09 f4       	brne	.+2      	; 0x60a <xvfprintf+0x190>
 608:	a9 c0       	rjmp	.+338    	; 0x75c <xvfprintf+0x2e2>
 60a:	0c f0       	brlt	.+2      	; 0x60e <xvfprintf+0x194>
 60c:	8d c0       	rjmp	.+282    	; 0x728 <xvfprintf+0x2ae>
		case 'b':					/* Unsigned binary */
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
 60e:	e8 e0       	ldi	r30, 0x08	; 8
 610:	f0 e0       	ldi	r31, 0x00	; 0
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 612:	2f 36       	cpi	r18, 0x6F	; 111
 614:	99 f7       	brne	.-26     	; 0x5fc <xvfprintf+0x182>
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
 616:	c7 01       	movw	r24, r14
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 618:	a2 fe       	sbrs	r10, 2
 61a:	ee c0       	rjmp	.+476    	; 0x7f8 <xvfprintf+0x37e>
			v = (long)va_arg(arp, long);
 61c:	04 96       	adiw	r24, 0x04	; 4
 61e:	9c a3       	std	Y+36, r25	; 0x24
 620:	8b a3       	std	Y+35, r24	; 0x23
 622:	d7 01       	movw	r26, r14
 624:	4d 91       	ld	r20, X+
 626:	5d 91       	ld	r21, X+
 628:	6d 91       	ld	r22, X+
 62a:	7c 91       	ld	r23, X
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 62c:	24 36       	cpi	r18, 0x64	; 100
 62e:	59 f4       	brne	.+22     	; 0x646 <xvfprintf+0x1cc>
 630:	77 ff       	sbrs	r23, 7
 632:	09 c0       	rjmp	.+18     	; 0x646 <xvfprintf+0x1cc>
			v = 0 - v; f |= 1;
 634:	70 95       	com	r23
 636:	60 95       	com	r22
 638:	50 95       	com	r21
 63a:	41 95       	neg	r20
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
 63e:	6f 4f       	sbci	r22, 0xFF	; 255
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	68 94       	set
 644:	a0 f8       	bld	r10, 0
		}
		i = 0; uv = v;
 646:	b4 2f       	mov	r27, r20
 648:	a5 2f       	mov	r26, r21
 64a:	cb 01       	movw	r24, r22
 64c:	28 37       	cpi	r18, 0x78	; 120
 64e:	09 f0       	breq	.+2      	; 0x652 <xvfprintf+0x1d8>
 650:	e3 c0       	rjmp	.+454    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 652:	27 e2       	ldi	r18, 0x27	; 39
 654:	28 a7       	std	Y+40, r18	; 0x28
 656:	9e 01       	movw	r18, r28
 658:	2f 5f       	subi	r18, 0xFF	; 255
 65a:	3f 4f       	sbci	r19, 0xFF	; 255
 65c:	3f a3       	std	Y+39, r19	; 0x27
 65e:	2e a3       	std	Y+38, r18	; 0x26
 660:	91 2c       	mov	r9, r1
 662:	81 2c       	mov	r8, r1
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
 664:	6f 01       	movw	r12, r30
 666:	f1 2c       	mov	r15, r1
 668:	e1 2c       	mov	r14, r1
 66a:	6b 2f       	mov	r22, r27
 66c:	7a 2f       	mov	r23, r26
 66e:	a7 01       	movw	r20, r14
 670:	96 01       	movw	r18, r12
 672:	0e 94 af 04 	call	0x95e	; 0x95e <__udivmodsi4>
 676:	76 2f       	mov	r23, r22
 678:	b2 2f       	mov	r27, r18
 67a:	a3 2f       	mov	r26, r19
 67c:	ca 01       	movw	r24, r20
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 67e:	6a 30       	cpi	r22, 0x0A	; 10
 680:	14 f0       	brlt	.+4      	; 0x686 <xvfprintf+0x20c>
 682:	78 a5       	ldd	r23, Y+40	; 0x28
 684:	76 0f       	add	r23, r22
			str[i++] = d + '0';
 686:	84 01       	movw	r16, r8
 688:	0f 5f       	subi	r16, 0xFF	; 255
 68a:	1f 4f       	sbci	r17, 0xFF	; 255
 68c:	60 e3       	ldi	r22, 0x30	; 48
 68e:	67 0f       	add	r22, r23
 690:	ee a1       	ldd	r30, Y+38	; 0x26
 692:	ff a1       	ldd	r31, Y+39	; 0x27
 694:	61 93       	st	Z+, r22
 696:	ff a3       	std	Y+39, r31	; 0x27
 698:	ee a3       	std	Y+38, r30	; 0x26
		} while (uv != 0 && i < sizeof str);
 69a:	23 2b       	or	r18, r19
 69c:	24 2b       	or	r18, r20
 69e:	25 2b       	or	r18, r21
 6a0:	39 f0       	breq	.+14     	; 0x6b0 <xvfprintf+0x236>
 6a2:	00 32       	cpi	r16, 0x20	; 32
 6a4:	11 05       	cpc	r17, r1
 6a6:	09 f0       	breq	.+2      	; 0x6aa <xvfprintf+0x230>
 6a8:	ba c0       	rjmp	.+372    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 6aa:	8f e1       	ldi	r24, 0x1F	; 31
 6ac:	88 2e       	mov	r8, r24
 6ae:	91 2c       	mov	r9, r1
		if (f & 1) str[i++] = '-';					/* Sign */
 6b0:	a0 fe       	sbrs	r10, 0
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <xvfprintf+0x250>
 6b4:	e1 e0       	ldi	r30, 0x01	; 1
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	ec 0f       	add	r30, r28
 6ba:	fd 1f       	adc	r31, r29
 6bc:	e0 0f       	add	r30, r16
 6be:	f1 1f       	adc	r31, r17
 6c0:	2d e2       	ldi	r18, 0x2D	; 45
 6c2:	20 83       	st	Z, r18
 6c4:	84 01       	movw	r16, r8
 6c6:	0e 5f       	subi	r16, 0xFE	; 254
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 6ca:	78 01       	movw	r14, r16
 6cc:	32 e0       	ldi	r19, 0x02	; 2
 6ce:	a3 22       	and	r10, r19
 6d0:	bb 24       	eor	r11, r11
 6d2:	8d a1       	ldd	r24, Y+37	; 0x25
 6d4:	88 2e       	mov	r8, r24
 6d6:	88 0f       	add	r24, r24
 6d8:	99 08       	sbc	r9, r9
 6da:	a1 14       	cp	r10, r1
 6dc:	b1 04       	cpc	r11, r1
 6de:	21 f4       	brne	.+8      	; 0x6e8 <xvfprintf+0x26e>
 6e0:	e2 14       	cp	r14, r2
 6e2:	f3 04       	cpc	r15, r3
 6e4:	08 f4       	brcc	.+2      	; 0x6e8 <xvfprintf+0x26e>
 6e6:	9d c0       	rjmp	.+314    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 6e8:	a1 e0       	ldi	r26, 0x01	; 1
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	ac 0f       	add	r26, r28
 6ee:	bd 1f       	adc	r27, r29
 6f0:	0a 0f       	add	r16, r26
 6f2:	1b 1f       	adc	r17, r27
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 6f4:	f8 01       	movw	r30, r16
 6f6:	62 91       	ld	r22, -Z
 6f8:	8f 01       	movw	r16, r30
 6fa:	06 2e       	mov	r0, r22
 6fc:	00 0c       	add	r0, r0
 6fe:	77 0b       	sbc	r23, r23
 700:	c2 01       	movw	r24, r4
 702:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 706:	29 a1       	ldd	r18, Y+33	; 0x21
 708:	3a a1       	ldd	r19, Y+34	; 0x22
 70a:	20 17       	cp	r18, r16
 70c:	31 07       	cpc	r19, r17
 70e:	91 f7       	brne	.-28     	; 0x6f4 <xvfprintf+0x27a>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 710:	e2 14       	cp	r14, r2
 712:	f3 04       	cpc	r15, r3
 714:	00 f5       	brcc	.+64     	; 0x756 <xvfprintf+0x2dc>
 716:	60 e2       	ldi	r22, 0x20	; 32
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	c2 01       	movw	r24, r4
 71c:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 720:	3f ef       	ldi	r19, 0xFF	; 255
 722:	e3 1a       	sub	r14, r19
 724:	f3 0a       	sbc	r15, r19
 726:	f4 cf       	rjmp	.-24     	; 0x710 <xvfprintf+0x296>
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 728:	25 37       	cpi	r18, 0x75	; 117
 72a:	31 f0       	breq	.+12     	; 0x738 <xvfprintf+0x2be>
 72c:	28 37       	cpi	r18, 0x78	; 120
 72e:	09 f0       	breq	.+2      	; 0x732 <xvfprintf+0x2b8>
 730:	65 cf       	rjmp	.-310    	; 0x5fc <xvfprintf+0x182>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
 732:	e0 e1       	ldi	r30, 0x10	; 16
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	6f cf       	rjmp	.-290    	; 0x616 <xvfprintf+0x19c>
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 738:	ea e0       	ldi	r30, 0x0A	; 10
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	6c cf       	rjmp	.-296    	; 0x616 <xvfprintf+0x19c>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 73e:	d7 01       	movw	r26, r14
 740:	12 96       	adiw	r26, 0x02	; 2
 742:	bc a3       	std	Y+36, r27	; 0x24
 744:	ab a3       	std	Y+35, r26	; 0x23
 746:	f7 01       	movw	r30, r14
 748:	60 81       	ld	r22, Z
 74a:	06 2e       	mov	r0, r22
 74c:	00 0c       	add	r0, r0
 74e:	77 0b       	sbc	r23, r23
 750:	c2 01       	movw	r24, r4
 752:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 756:	eb a0       	ldd	r14, Y+35	; 0x23
 758:	fc a0       	ldd	r15, Y+36	; 0x24
 75a:	b1 ce       	rjmp	.-670    	; 0x4be <xvfprintf+0x44>
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
 75c:	97 01       	movw	r18, r14
 75e:	2e 5f       	subi	r18, 0xFE	; 254
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	3c a3       	std	Y+36, r19	; 0x24
 764:	2b a3       	std	Y+35, r18	; 0x23
 766:	d7 01       	movw	r26, r14
 768:	cd 90       	ld	r12, X+
 76a:	dc 90       	ld	r13, X
			if (!p) p = "";				/* Null ptr generates a null string */
 76c:	c1 14       	cp	r12, r1
 76e:	d1 04       	cpc	r13, r1
 770:	21 f4       	brne	.+8      	; 0x77a <xvfprintf+0x300>
 772:	9a e2       	ldi	r25, 0x2A	; 42
 774:	c9 2e       	mov	r12, r25
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	d9 2e       	mov	r13, r25
			j = strlen(p);
 77a:	c6 01       	movw	r24, r12
 77c:	0e 94 29 06 	call	0xc52	; 0xc52 <strlen>
 780:	7c 01       	movw	r14, r24
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
 782:	17 fd       	sbrc	r17, 7
 784:	04 c0       	rjmp	.+8      	; 0x78e <xvfprintf+0x314>
 786:	08 17       	cp	r16, r24
 788:	19 07       	cpc	r17, r25
 78a:	08 f4       	brcc	.+2      	; 0x78e <xvfprintf+0x314>
 78c:	78 01       	movw	r14, r16
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 78e:	e2 e0       	ldi	r30, 0x02	; 2
 790:	ae 22       	and	r10, r30
 792:	bb 24       	eor	r11, r11
 794:	fd a1       	ldd	r31, Y+37	; 0x25
 796:	8f 2e       	mov	r8, r31
 798:	ff 0f       	add	r31, r31
 79a:	99 08       	sbc	r9, r9
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <xvfprintf+0x332>
 79e:	b4 01       	movw	r22, r8
 7a0:	c2 01       	movw	r24, r4
 7a2:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 7a6:	bf ef       	ldi	r27, 0xFF	; 255
 7a8:	eb 1a       	sub	r14, r27
 7aa:	fb 0a       	sbc	r15, r27
 7ac:	a1 14       	cp	r10, r1
 7ae:	b1 04       	cpc	r11, r1
 7b0:	19 f4       	brne	.+6      	; 0x7b8 <xvfprintf+0x33e>
 7b2:	e2 14       	cp	r14, r2
 7b4:	f3 04       	cpc	r15, r3
 7b6:	98 f3       	brcs	.-26     	; 0x79e <xvfprintf+0x324>
			while (*p && prec--) xfputc(func, *p++);/* String body */
 7b8:	d6 01       	movw	r26, r12
 7ba:	6d 91       	ld	r22, X+
 7bc:	6d 01       	movw	r12, r26
 7be:	66 23       	and	r22, r22
 7c0:	19 f0       	breq	.+6      	; 0x7c8 <xvfprintf+0x34e>
 7c2:	01 15       	cp	r16, r1
 7c4:	11 05       	cpc	r17, r1
 7c6:	61 f4       	brne	.+24     	; 0x7e0 <xvfprintf+0x366>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 7c8:	e2 14       	cp	r14, r2
 7ca:	f3 04       	cpc	r15, r3
 7cc:	20 f6       	brcc	.-120    	; 0x756 <xvfprintf+0x2dc>
 7ce:	60 e2       	ldi	r22, 0x20	; 32
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	c2 01       	movw	r24, r4
 7d4:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 7d8:	bf ef       	ldi	r27, 0xFF	; 255
 7da:	eb 1a       	sub	r14, r27
 7dc:	fb 0a       	sbc	r15, r27
 7de:	f4 cf       	rjmp	.-24     	; 0x7c8 <xvfprintf+0x34e>
			p = va_arg(arp, char*);		/* Get a pointer argument */
			if (!p) p = "";				/* Null ptr generates a null string */
			j = strlen(p);
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
			while (*p && prec--) xfputc(func, *p++);/* String body */
 7e0:	06 2e       	mov	r0, r22
 7e2:	00 0c       	add	r0, r0
 7e4:	77 0b       	sbc	r23, r23
 7e6:	c2 01       	movw	r24, r4
 7e8:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 7ec:	01 50       	subi	r16, 0x01	; 1
 7ee:	11 09       	sbc	r17, r1
 7f0:	e3 cf       	rjmp	.-58     	; 0x7b8 <xvfprintf+0x33e>
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
		case 'b':					/* Unsigned binary */
			r = 2; break;
 7f2:	e2 e0       	ldi	r30, 0x02	; 2
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	0f cf       	rjmp	.-482    	; 0x616 <xvfprintf+0x19c>
 7f8:	02 96       	adiw	r24, 0x02	; 2
 7fa:	9c a3       	std	Y+36, r25	; 0x24
 7fc:	8b a3       	std	Y+35, r24	; 0x23
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 7fe:	d7 01       	movw	r26, r14
 800:	4d 91       	ld	r20, X+
 802:	5c 91       	ld	r21, X
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	24 36       	cpi	r18, 0x64	; 100
 80a:	09 f0       	breq	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	1c cf       	rjmp	.-456    	; 0x646 <xvfprintf+0x1cc>
 80e:	05 2e       	mov	r0, r21
 810:	00 0c       	add	r0, r0
 812:	66 0b       	sbc	r22, r22
 814:	77 0b       	sbc	r23, r23
 816:	0c cf       	rjmp	.-488    	; 0x630 <xvfprintf+0x1b6>
 818:	37 e0       	ldi	r19, 0x07	; 7
 81a:	38 a7       	std	Y+40, r19	; 0x28
 81c:	1c cf       	rjmp	.-456    	; 0x656 <xvfprintf+0x1dc>
 81e:	48 01       	movw	r8, r16
 820:	24 cf       	rjmp	.-440    	; 0x66a <xvfprintf+0x1f0>
			d = (char)(uv % r); uv /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (uv != 0 && i < sizeof str);
		if (f & 1) str[i++] = '-';					/* Sign */
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 822:	b4 01       	movw	r22, r8
 824:	c2 01       	movw	r24, r4
 826:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	e9 1a       	sub	r14, r25
 82e:	f9 0a       	sbc	r15, r25
 830:	54 cf       	rjmp	.-344    	; 0x6da <xvfprintf+0x260>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
	}
}
 832:	a8 96       	adiw	r28, 0x28	; 40
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	de bf       	out	0x3e, r29	; 62
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	cd bf       	out	0x3d, r28	; 61
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	ff 90       	pop	r15
 848:	ef 90       	pop	r14
 84a:	df 90       	pop	r13
 84c:	cf 90       	pop	r12
 84e:	bf 90       	pop	r11
 850:	af 90       	pop	r10
 852:	9f 90       	pop	r9
 854:	8f 90       	pop	r8
 856:	7f 90       	pop	r7
 858:	6f 90       	pop	r6
 85a:	5f 90       	pop	r5
 85c:	4f 90       	pop	r4
 85e:	3f 90       	pop	r3
 860:	2f 90       	pop	r2
 862:	08 95       	ret

00000864 <xfputs>:

void xfputs (			/* Put a string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	8c 01       	movw	r16, r24
 86e:	eb 01       	movw	r28, r22
	while (*str) {			/* Put the string */
 870:	69 91       	ld	r22, Y+
 872:	61 11       	cpse	r22, r1
 874:	05 c0       	rjmp	.+10     	; 0x880 <xfputs+0x1c>
		xfputc(func, *str++);
	}
}
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	1f 91       	pop	r17
 87c:	0f 91       	pop	r16
 87e:	08 95       	ret
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
	while (*str) {			/* Put the string */
		xfputc(func, *str++);
 880:	06 2e       	mov	r0, r22
 882:	00 0c       	add	r0, r0
 884:	77 0b       	sbc	r23, r23
 886:	c8 01       	movw	r24, r16
 888:	0e 94 22 02 	call	0x444	; 0x444 <xfputc>
 88c:	f1 cf       	rjmp	.-30     	; 0x870 <xfputs+0xc>

0000088e <xputs>:

void xputs (			/* Put a string to the default device */
	const char* str		/* Pointer to the string */
)
{
	xfputs(xfunc_output, str);
 88e:	bc 01       	movw	r22, r24
 890:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <xfunc_output>
 894:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <xfunc_output+0x1>
 898:	0c 94 32 04 	jmp	0x864	; 0x864 <xfputs>

0000089c <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
 8a4:	ae 01       	movw	r20, r28
 8a6:	4b 5f       	subi	r20, 0xFB	; 251
 8a8:	5f 4f       	sbci	r21, 0xFF	; 255
 8aa:	fa 01       	movw	r30, r20
 8ac:	61 91       	ld	r22, Z+
 8ae:	71 91       	ld	r23, Z+
 8b0:	af 01       	movw	r20, r30
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(xfunc_output, fmt, arp);
 8b2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <xfunc_output>
 8b6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <xfunc_output+0x1>
 8ba:	0e 94 3d 02 	call	0x47a	; 0x47a <xvfprintf>
	va_end(arp);
}
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	08 95       	ret

000008c4 <xfprintf>:
void xfprintf (			/* Put a formatted string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(func, fmt, arp);
 8cc:	ae 01       	movw	r20, r28
 8ce:	47 5f       	subi	r20, 0xF7	; 247
 8d0:	5f 4f       	sbci	r21, 0xFF	; 255
 8d2:	6f 81       	ldd	r22, Y+7	; 0x07
 8d4:	78 85       	ldd	r23, Y+8	; 0x08
 8d6:	8d 81       	ldd	r24, Y+5	; 0x05
 8d8:	9e 81       	ldd	r25, Y+6	; 0x06
 8da:	0e 94 3d 02 	call	0x47a	; 0x47a <xvfprintf>
	va_end(arp);
}
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	08 95       	ret

000008e4 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	strptr = buff;		/* Enable destination for memory */
 8ec:	8d 81       	ldd	r24, Y+5	; 0x05
 8ee:	9e 81       	ldd	r25, Y+6	; 0x06
 8f0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 8f4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
	va_start(arp, fmt);
	xvfprintf(0, fmt, arp);
 8f8:	ae 01       	movw	r20, r28
 8fa:	47 5f       	subi	r20, 0xF7	; 247
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	6f 81       	ldd	r22, Y+7	; 0x07
 900:	78 85       	ldd	r23, Y+8	; 0x08
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	0e 94 3d 02 	call	0x47a	; 0x47a <xvfprintf>
	va_end(arp);
	*strptr = 0;		/* Terminate output string */
 90a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 90e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__data_end+0x1>
 912:	10 82       	st	Z, r1
	strptr = 0;			/* Disable destination for memory */
 914:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 918:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <my_putc>:
#include "util/delay.h"
#include "functions.h"

void my_putc(uint8_t c)
{
    loop_until_bit_is_set(UCSR0A, UDRE0);
 922:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 926:	95 ff       	sbrs	r25, 5
 928:	fc cf       	rjmp	.-8      	; 0x922 <my_putc>
    UDR0 = c;
 92a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 92e:	08 95       	ret

00000930 <my_getc>:

uint8_t my_getc(void)
{
    loop_until_bit_is_set(UCSR0A, RXC0);
 930:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 934:	87 ff       	sbrs	r24, 7
 936:	fc cf       	rjmp	.-8      	; 0x930 <my_getc>
    return UDR0;
 938:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 93c:	08 95       	ret

0000093e <main>:

int main(void) 
{
    UBRR0 = 51;
 93e:	83 e3       	ldi	r24, 0x33	; 51
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 946:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    set_bits(UCSR0B, _BV(RXEN0) | _BV(TXEN0));
 94a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 94e:	88 61       	ori	r24, 0x18	; 24
 950:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    while(1)
    {
        my_putc(my_getc());
 954:	0e 94 98 04 	call	0x930	; 0x930 <my_getc>
 958:	0e 94 91 04 	call	0x922	; 0x922 <my_putc>
 95c:	fb cf       	rjmp	.-10     	; 0x954 <main+0x16>

0000095e <__udivmodsi4>:
 95e:	a1 e2       	ldi	r26, 0x21	; 33
 960:	1a 2e       	mov	r1, r26
 962:	aa 1b       	sub	r26, r26
 964:	bb 1b       	sub	r27, r27
 966:	fd 01       	movw	r30, r26
 968:	0d c0       	rjmp	.+26     	; 0x984 <__udivmodsi4_ep>

0000096a <__udivmodsi4_loop>:
 96a:	aa 1f       	adc	r26, r26
 96c:	bb 1f       	adc	r27, r27
 96e:	ee 1f       	adc	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	a2 17       	cp	r26, r18
 974:	b3 07       	cpc	r27, r19
 976:	e4 07       	cpc	r30, r20
 978:	f5 07       	cpc	r31, r21
 97a:	20 f0       	brcs	.+8      	; 0x984 <__udivmodsi4_ep>
 97c:	a2 1b       	sub	r26, r18
 97e:	b3 0b       	sbc	r27, r19
 980:	e4 0b       	sbc	r30, r20
 982:	f5 0b       	sbc	r31, r21

00000984 <__udivmodsi4_ep>:
 984:	66 1f       	adc	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	1a 94       	dec	r1
 98e:	69 f7       	brne	.-38     	; 0x96a <__udivmodsi4_loop>
 990:	60 95       	com	r22
 992:	70 95       	com	r23
 994:	80 95       	com	r24
 996:	90 95       	com	r25
 998:	9b 01       	movw	r18, r22
 99a:	ac 01       	movw	r20, r24
 99c:	bd 01       	movw	r22, r26
 99e:	cf 01       	movw	r24, r30
 9a0:	08 95       	ret

000009a2 <__cmpsf2>:
 9a2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_cmp>
 9a6:	08 f4       	brcc	.+2      	; 0x9aa <__cmpsf2+0x8>
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	08 95       	ret

000009ac <__fixunssfsi>:
 9ac:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_splitA>
 9b0:	88 f0       	brcs	.+34     	; 0x9d4 <__fixunssfsi+0x28>
 9b2:	9f 57       	subi	r25, 0x7F	; 127
 9b4:	98 f0       	brcs	.+38     	; 0x9dc <__fixunssfsi+0x30>
 9b6:	b9 2f       	mov	r27, r25
 9b8:	99 27       	eor	r25, r25
 9ba:	b7 51       	subi	r27, 0x17	; 23
 9bc:	b0 f0       	brcs	.+44     	; 0x9ea <__fixunssfsi+0x3e>
 9be:	e1 f0       	breq	.+56     	; 0x9f8 <__fixunssfsi+0x4c>
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	1a f0       	brmi	.+6      	; 0x9d0 <__fixunssfsi+0x24>
 9ca:	ba 95       	dec	r27
 9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__fixunssfsi+0x14>
 9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <__fixunssfsi+0x4c>
 9d0:	b1 30       	cpi	r27, 0x01	; 1
 9d2:	91 f0       	breq	.+36     	; 0x9f8 <__fixunssfsi+0x4c>
 9d4:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_zero>
 9d8:	b1 e0       	ldi	r27, 0x01	; 1
 9da:	08 95       	ret
 9dc:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_zero>
 9e0:	67 2f       	mov	r22, r23
 9e2:	78 2f       	mov	r23, r24
 9e4:	88 27       	eor	r24, r24
 9e6:	b8 5f       	subi	r27, 0xF8	; 248
 9e8:	39 f0       	breq	.+14     	; 0x9f8 <__fixunssfsi+0x4c>
 9ea:	b9 3f       	cpi	r27, 0xF9	; 249
 9ec:	cc f3       	brlt	.-14     	; 0x9e0 <__fixunssfsi+0x34>
 9ee:	86 95       	lsr	r24
 9f0:	77 95       	ror	r23
 9f2:	67 95       	ror	r22
 9f4:	b3 95       	inc	r27
 9f6:	d9 f7       	brne	.-10     	; 0x9ee <__fixunssfsi+0x42>
 9f8:	3e f4       	brtc	.+14     	; 0xa08 <__fixunssfsi+0x5c>
 9fa:	90 95       	com	r25
 9fc:	80 95       	com	r24
 9fe:	70 95       	com	r23
 a00:	61 95       	neg	r22
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	8f 4f       	sbci	r24, 0xFF	; 255
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	08 95       	ret

00000a0a <__floatunsisf>:
 a0a:	e8 94       	clt
 a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__floatsisf+0x12>

00000a0e <__floatsisf>:
 a0e:	97 fb       	bst	r25, 7
 a10:	3e f4       	brtc	.+14     	; 0xa20 <__floatsisf+0x12>
 a12:	90 95       	com	r25
 a14:	80 95       	com	r24
 a16:	70 95       	com	r23
 a18:	61 95       	neg	r22
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	99 23       	and	r25, r25
 a22:	a9 f0       	breq	.+42     	; 0xa4e <__floatsisf+0x40>
 a24:	f9 2f       	mov	r31, r25
 a26:	96 e9       	ldi	r25, 0x96	; 150
 a28:	bb 27       	eor	r27, r27
 a2a:	93 95       	inc	r25
 a2c:	f6 95       	lsr	r31
 a2e:	87 95       	ror	r24
 a30:	77 95       	ror	r23
 a32:	67 95       	ror	r22
 a34:	b7 95       	ror	r27
 a36:	f1 11       	cpse	r31, r1
 a38:	f8 cf       	rjmp	.-16     	; 0xa2a <__floatsisf+0x1c>
 a3a:	fa f4       	brpl	.+62     	; 0xa7a <__floatsisf+0x6c>
 a3c:	bb 0f       	add	r27, r27
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__floatsisf+0x36>
 a40:	60 ff       	sbrs	r22, 0
 a42:	1b c0       	rjmp	.+54     	; 0xa7a <__floatsisf+0x6c>
 a44:	6f 5f       	subi	r22, 0xFF	; 255
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	16 c0       	rjmp	.+44     	; 0xa7a <__floatsisf+0x6c>
 a4e:	88 23       	and	r24, r24
 a50:	11 f0       	breq	.+4      	; 0xa56 <__floatsisf+0x48>
 a52:	96 e9       	ldi	r25, 0x96	; 150
 a54:	11 c0       	rjmp	.+34     	; 0xa78 <__floatsisf+0x6a>
 a56:	77 23       	and	r23, r23
 a58:	21 f0       	breq	.+8      	; 0xa62 <__floatsisf+0x54>
 a5a:	9e e8       	ldi	r25, 0x8E	; 142
 a5c:	87 2f       	mov	r24, r23
 a5e:	76 2f       	mov	r23, r22
 a60:	05 c0       	rjmp	.+10     	; 0xa6c <__floatsisf+0x5e>
 a62:	66 23       	and	r22, r22
 a64:	71 f0       	breq	.+28     	; 0xa82 <__floatsisf+0x74>
 a66:	96 e8       	ldi	r25, 0x86	; 134
 a68:	86 2f       	mov	r24, r22
 a6a:	70 e0       	ldi	r23, 0x00	; 0
 a6c:	60 e0       	ldi	r22, 0x00	; 0
 a6e:	2a f0       	brmi	.+10     	; 0xa7a <__floatsisf+0x6c>
 a70:	9a 95       	dec	r25
 a72:	66 0f       	add	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	da f7       	brpl	.-10     	; 0xa70 <__floatsisf+0x62>
 a7a:	88 0f       	add	r24, r24
 a7c:	96 95       	lsr	r25
 a7e:	87 95       	ror	r24
 a80:	97 f9       	bld	r25, 7
 a82:	08 95       	ret

00000a84 <__fp_cmp>:
 a84:	99 0f       	add	r25, r25
 a86:	00 08       	sbc	r0, r0
 a88:	55 0f       	add	r21, r21
 a8a:	aa 0b       	sbc	r26, r26
 a8c:	e0 e8       	ldi	r30, 0x80	; 128
 a8e:	fe ef       	ldi	r31, 0xFE	; 254
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	e8 07       	cpc	r30, r24
 a96:	f9 07       	cpc	r31, r25
 a98:	c0 f0       	brcs	.+48     	; 0xaca <__fp_cmp+0x46>
 a9a:	12 16       	cp	r1, r18
 a9c:	13 06       	cpc	r1, r19
 a9e:	e4 07       	cpc	r30, r20
 aa0:	f5 07       	cpc	r31, r21
 aa2:	98 f0       	brcs	.+38     	; 0xaca <__fp_cmp+0x46>
 aa4:	62 1b       	sub	r22, r18
 aa6:	73 0b       	sbc	r23, r19
 aa8:	84 0b       	sbc	r24, r20
 aaa:	95 0b       	sbc	r25, r21
 aac:	39 f4       	brne	.+14     	; 0xabc <__fp_cmp+0x38>
 aae:	0a 26       	eor	r0, r26
 ab0:	61 f0       	breq	.+24     	; 0xaca <__fp_cmp+0x46>
 ab2:	23 2b       	or	r18, r19
 ab4:	24 2b       	or	r18, r20
 ab6:	25 2b       	or	r18, r21
 ab8:	21 f4       	brne	.+8      	; 0xac2 <__fp_cmp+0x3e>
 aba:	08 95       	ret
 abc:	0a 26       	eor	r0, r26
 abe:	09 f4       	brne	.+2      	; 0xac2 <__fp_cmp+0x3e>
 ac0:	a1 40       	sbci	r26, 0x01	; 1
 ac2:	a6 95       	lsr	r26
 ac4:	8f ef       	ldi	r24, 0xFF	; 255
 ac6:	81 1d       	adc	r24, r1
 ac8:	81 1d       	adc	r24, r1
 aca:	08 95       	ret

00000acc <__fp_split3>:
 acc:	57 fd       	sbrc	r21, 7
 ace:	90 58       	subi	r25, 0x80	; 128
 ad0:	44 0f       	add	r20, r20
 ad2:	55 1f       	adc	r21, r21
 ad4:	59 f0       	breq	.+22     	; 0xaec <__fp_splitA+0x10>
 ad6:	5f 3f       	cpi	r21, 0xFF	; 255
 ad8:	71 f0       	breq	.+28     	; 0xaf6 <__fp_splitA+0x1a>
 ada:	47 95       	ror	r20

00000adc <__fp_splitA>:
 adc:	88 0f       	add	r24, r24
 ade:	97 fb       	bst	r25, 7
 ae0:	99 1f       	adc	r25, r25
 ae2:	61 f0       	breq	.+24     	; 0xafc <__fp_splitA+0x20>
 ae4:	9f 3f       	cpi	r25, 0xFF	; 255
 ae6:	79 f0       	breq	.+30     	; 0xb06 <__fp_splitA+0x2a>
 ae8:	87 95       	ror	r24
 aea:	08 95       	ret
 aec:	12 16       	cp	r1, r18
 aee:	13 06       	cpc	r1, r19
 af0:	14 06       	cpc	r1, r20
 af2:	55 1f       	adc	r21, r21
 af4:	f2 cf       	rjmp	.-28     	; 0xada <__fp_split3+0xe>
 af6:	46 95       	lsr	r20
 af8:	f1 df       	rcall	.-30     	; 0xadc <__fp_splitA>
 afa:	08 c0       	rjmp	.+16     	; 0xb0c <__fp_splitA+0x30>
 afc:	16 16       	cp	r1, r22
 afe:	17 06       	cpc	r1, r23
 b00:	18 06       	cpc	r1, r24
 b02:	99 1f       	adc	r25, r25
 b04:	f1 cf       	rjmp	.-30     	; 0xae8 <__fp_splitA+0xc>
 b06:	86 95       	lsr	r24
 b08:	71 05       	cpc	r23, r1
 b0a:	61 05       	cpc	r22, r1
 b0c:	08 94       	sec
 b0e:	08 95       	ret

00000b10 <__fp_zero>:
 b10:	e8 94       	clt

00000b12 <__fp_szero>:
 b12:	bb 27       	eor	r27, r27
 b14:	66 27       	eor	r22, r22
 b16:	77 27       	eor	r23, r23
 b18:	cb 01       	movw	r24, r22
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret

00000b1e <__gesf2>:
 b1e:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_cmp>
 b22:	08 f4       	brcc	.+2      	; 0xb26 <__gesf2+0x8>
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <__mulsf3>:
 b28:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__mulsf3x>
 b2c:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_round>
 b30:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_pscA>
 b34:	38 f0       	brcs	.+14     	; 0xb44 <__mulsf3+0x1c>
 b36:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_pscB>
 b3a:	20 f0       	brcs	.+8      	; 0xb44 <__mulsf3+0x1c>
 b3c:	95 23       	and	r25, r21
 b3e:	11 f0       	breq	.+4      	; 0xb44 <__mulsf3+0x1c>
 b40:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_inf>
 b44:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_nan>
 b48:	11 24       	eor	r1, r1
 b4a:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_szero>

00000b4e <__mulsf3x>:
 b4e:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_split3>
 b52:	70 f3       	brcs	.-36     	; 0xb30 <__mulsf3+0x8>

00000b54 <__mulsf3_pse>:
 b54:	95 9f       	mul	r25, r21
 b56:	c1 f3       	breq	.-16     	; 0xb48 <__mulsf3+0x20>
 b58:	95 0f       	add	r25, r21
 b5a:	50 e0       	ldi	r21, 0x00	; 0
 b5c:	55 1f       	adc	r21, r21
 b5e:	62 9f       	mul	r22, r18
 b60:	f0 01       	movw	r30, r0
 b62:	72 9f       	mul	r23, r18
 b64:	bb 27       	eor	r27, r27
 b66:	f0 0d       	add	r31, r0
 b68:	b1 1d       	adc	r27, r1
 b6a:	63 9f       	mul	r22, r19
 b6c:	aa 27       	eor	r26, r26
 b6e:	f0 0d       	add	r31, r0
 b70:	b1 1d       	adc	r27, r1
 b72:	aa 1f       	adc	r26, r26
 b74:	64 9f       	mul	r22, r20
 b76:	66 27       	eor	r22, r22
 b78:	b0 0d       	add	r27, r0
 b7a:	a1 1d       	adc	r26, r1
 b7c:	66 1f       	adc	r22, r22
 b7e:	82 9f       	mul	r24, r18
 b80:	22 27       	eor	r18, r18
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	62 1f       	adc	r22, r18
 b88:	73 9f       	mul	r23, r19
 b8a:	b0 0d       	add	r27, r0
 b8c:	a1 1d       	adc	r26, r1
 b8e:	62 1f       	adc	r22, r18
 b90:	83 9f       	mul	r24, r19
 b92:	a0 0d       	add	r26, r0
 b94:	61 1d       	adc	r22, r1
 b96:	22 1f       	adc	r18, r18
 b98:	74 9f       	mul	r23, r20
 b9a:	33 27       	eor	r19, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	23 1f       	adc	r18, r19
 ba2:	84 9f       	mul	r24, r20
 ba4:	60 0d       	add	r22, r0
 ba6:	21 1d       	adc	r18, r1
 ba8:	82 2f       	mov	r24, r18
 baa:	76 2f       	mov	r23, r22
 bac:	6a 2f       	mov	r22, r26
 bae:	11 24       	eor	r1, r1
 bb0:	9f 57       	subi	r25, 0x7F	; 127
 bb2:	50 40       	sbci	r21, 0x00	; 0
 bb4:	9a f0       	brmi	.+38     	; 0xbdc <__mulsf3_pse+0x88>
 bb6:	f1 f0       	breq	.+60     	; 0xbf4 <__mulsf3_pse+0xa0>
 bb8:	88 23       	and	r24, r24
 bba:	4a f0       	brmi	.+18     	; 0xbce <__mulsf3_pse+0x7a>
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	bb 1f       	adc	r27, r27
 bc2:	66 1f       	adc	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	91 50       	subi	r25, 0x01	; 1
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	a9 f7       	brne	.-22     	; 0xbb8 <__mulsf3_pse+0x64>
 bce:	9e 3f       	cpi	r25, 0xFE	; 254
 bd0:	51 05       	cpc	r21, r1
 bd2:	80 f0       	brcs	.+32     	; 0xbf4 <__mulsf3_pse+0xa0>
 bd4:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_inf>
 bd8:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_szero>
 bdc:	5f 3f       	cpi	r21, 0xFF	; 255
 bde:	e4 f3       	brlt	.-8      	; 0xbd8 <__mulsf3_pse+0x84>
 be0:	98 3e       	cpi	r25, 0xE8	; 232
 be2:	d4 f3       	brlt	.-12     	; 0xbd8 <__mulsf3_pse+0x84>
 be4:	86 95       	lsr	r24
 be6:	77 95       	ror	r23
 be8:	67 95       	ror	r22
 bea:	b7 95       	ror	r27
 bec:	f7 95       	ror	r31
 bee:	e7 95       	ror	r30
 bf0:	9f 5f       	subi	r25, 0xFF	; 255
 bf2:	c1 f7       	brne	.-16     	; 0xbe4 <__mulsf3_pse+0x90>
 bf4:	fe 2b       	or	r31, r30
 bf6:	88 0f       	add	r24, r24
 bf8:	91 1d       	adc	r25, r1
 bfa:	96 95       	lsr	r25
 bfc:	87 95       	ror	r24
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <__fp_inf>:
 c02:	97 f9       	bld	r25, 7
 c04:	9f 67       	ori	r25, 0x7F	; 127
 c06:	80 e8       	ldi	r24, 0x80	; 128
 c08:	70 e0       	ldi	r23, 0x00	; 0
 c0a:	60 e0       	ldi	r22, 0x00	; 0
 c0c:	08 95       	ret

00000c0e <__fp_nan>:
 c0e:	9f ef       	ldi	r25, 0xFF	; 255
 c10:	80 ec       	ldi	r24, 0xC0	; 192
 c12:	08 95       	ret

00000c14 <__fp_pscA>:
 c14:	00 24       	eor	r0, r0
 c16:	0a 94       	dec	r0
 c18:	16 16       	cp	r1, r22
 c1a:	17 06       	cpc	r1, r23
 c1c:	18 06       	cpc	r1, r24
 c1e:	09 06       	cpc	r0, r25
 c20:	08 95       	ret

00000c22 <__fp_pscB>:
 c22:	00 24       	eor	r0, r0
 c24:	0a 94       	dec	r0
 c26:	12 16       	cp	r1, r18
 c28:	13 06       	cpc	r1, r19
 c2a:	14 06       	cpc	r1, r20
 c2c:	05 06       	cpc	r0, r21
 c2e:	08 95       	ret

00000c30 <__fp_round>:
 c30:	09 2e       	mov	r0, r25
 c32:	03 94       	inc	r0
 c34:	00 0c       	add	r0, r0
 c36:	11 f4       	brne	.+4      	; 0xc3c <__fp_round+0xc>
 c38:	88 23       	and	r24, r24
 c3a:	52 f0       	brmi	.+20     	; 0xc50 <__fp_round+0x20>
 c3c:	bb 0f       	add	r27, r27
 c3e:	40 f4       	brcc	.+16     	; 0xc50 <__fp_round+0x20>
 c40:	bf 2b       	or	r27, r31
 c42:	11 f4       	brne	.+4      	; 0xc48 <__fp_round+0x18>
 c44:	60 ff       	sbrs	r22, 0
 c46:	04 c0       	rjmp	.+8      	; 0xc50 <__fp_round+0x20>
 c48:	6f 5f       	subi	r22, 0xFF	; 255
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255
 c4c:	8f 4f       	sbci	r24, 0xFF	; 255
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	08 95       	ret

00000c52 <strlen>:
 c52:	fc 01       	movw	r30, r24
 c54:	01 90       	ld	r0, Z+
 c56:	00 20       	and	r0, r0
 c58:	e9 f7       	brne	.-6      	; 0xc54 <strlen+0x2>
 c5a:	80 95       	com	r24
 c5c:	90 95       	com	r25
 c5e:	8e 0f       	add	r24, r30
 c60:	9f 1f       	adc	r25, r31
 c62:	08 95       	ret

00000c64 <_exit>:
 c64:	f8 94       	cli

00000c66 <__stop_program>:
 c66:	ff cf       	rjmp	.-2      	; 0xc66 <__stop_program>
