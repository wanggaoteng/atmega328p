
output/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000dfa  00000e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800154  00800154  00000ee2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180a  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b86  00000000  00000000  0000279e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e65  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  0000418c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  000044ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac3  00000000  00000000  00004a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 36       	cpi	r26, 0x69	; 105
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 24 06 	call	0xc48	; 0xc48 <main>
  9e:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <avr_uart_putchar>:

	xdev_out(avr_uart_putchar);
}

void avr_uart_putchar(char c, FILE *stream) 
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <avr_uart_putchar+0xe>
        avr_uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <avr_uart_putchar+0xe>
    UDR0 = c;
  bc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <avr_uart_getchar>:

char avr_uart_getchar(FILE *stream) 
{
    loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <avr_uart_getchar>
    return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  d0:	08 95       	ret

000000d2 <avr_uart_getchar_echo>:


char avr_uart_getchar_echo(FILE *stream) 
{
  d2:	cf 93       	push	r28
    loop_until_bit_is_set(UCSR0A, RXC0);
  d4:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	27 ff       	sbrs	r18, 7
  da:	fc cf       	rjmp	.-8      	; 0xd4 <avr_uart_getchar_echo+0x2>
    char c=UDR0;
  dc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    avr_uart_putchar(c, stream);
  e0:	bc 01       	movw	r22, r24
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    return c;
}
  e8:	8c 2f       	mov	r24, r28
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <delay_ms>:
// }

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	40 ed       	ldi	r20, 0xD0	; 208
  f4:	57 e0       	ldi	r21, 0x07	; 7
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	09 f4       	brne	.+2      	; 0xfe <delay_ms+0x10>
    {
        _delay_loop_2(2000);//8M, _delay_loop_2(1) is four clock cycle (4/8000000)
    }
}
  fc:	08 95       	ret
  fe:	fa 01       	movw	r30, r20
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <delay_ms+0x12>
// }

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	f6 cf       	rjmp	.-20     	; 0xf6 <delay_ms+0x8>

0000010a <delay_us>:
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	42 e0       	ldi	r20, 0x02	; 2
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	09 f4       	brne	.+2      	; 0x11a <delay_us+0x10>
    {
        _delay_loop_2(2);
    }
}
 118:	08 95       	ret
 11a:	fa 01       	movw	r30, r20
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <delay_us+0x12>
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	f6 cf       	rjmp	.-20     	; 0x112 <delay_us+0x8>

00000126 <blink>:
//delay: blink time interval
//n>0,delay>0  normal 
//n=0,delay>0  cycle 
//n=0,delay=0  toggle 
void blink(uint8_t n,uint16_t delay)
{
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	18 2f       	mov	r17, r24
 12e:	eb 01       	movw	r28, r22
	DDRB |= _BV(PB5);
 130:	25 9a       	sbi	0x04, 5	; 4
	if((n>0)&&(delay>0))
 132:	88 23       	and	r24, r24
 134:	81 f0       	breq	.+32     	; 0x156 <blink+0x30>
 136:	20 97       	sbiw	r28, 0x00	; 0
 138:	51 f0       	breq	.+20     	; 0x14e <blink+0x28>
	{
		while(n)
		{

			PORTB |= _BV(PB5);
 13a:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
			PORTB &= ~_BV(PB5);
 142:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 144:	ce 01       	movw	r24, r28
 146:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
			n--;
 14a:	11 50       	subi	r17, 0x01	; 1
void blink(uint8_t n,uint16_t delay)
{
	DDRB |= _BV(PB5);
	if((n>0)&&(delay>0))
	{
		while(n)
 14c:	b1 f7       	brne	.-20     	; 0x13a <blink+0x14>
		if(bit_is_set(PINB,PB5))
			PORTB &= ~_BV(PB5);
		else
			PORTB |= _BV(PB5);
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	08 95       	ret
			PORTB &= ~_BV(PB5);
			delay_ms(delay);
			n--;
		}
	}
	else if((n==0)&&(delay>0))
 156:	20 97       	sbiw	r28, 0x00	; 0
 158:	49 f0       	breq	.+18     	; 0x16c <blink+0x46>
	{
		while(1)
		{
			PORTB |= _BV(PB5);
 15a:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
			PORTB &= ~_BV(PB5);
 162:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 164:	ce 01       	movw	r24, r28
 166:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
 16a:	f7 cf       	rjmp	.-18     	; 0x15a <blink+0x34>
		}
	}
	else if((n==0)&&(delay==0))
	{
		if(bit_is_set(PINB,PB5))
 16c:	1d 9b       	sbis	0x03, 5	; 3
 16e:	02 c0       	rjmp	.+4      	; 0x174 <blink+0x4e>
			PORTB &= ~_BV(PB5);
 170:	2d 98       	cbi	0x05, 5	; 5
 172:	ed cf       	rjmp	.-38     	; 0x14e <blink+0x28>
		else
			PORTB |= _BV(PB5);
 174:	2d 9a       	sbi	0x05, 5	; 5
	}
}
 176:	eb cf       	rjmp	.-42     	; 0x14e <blink+0x28>

00000178 <avr_uart_init>:
#endif
#include "util/setbaud.h"

void avr_uart_init(void) 
{
    UBRR0H = UBRRH_VALUE;
 178:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = UBRRL_VALUE;
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
 182:	e0 ec       	ldi	r30, 0xC0	; 192
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	stdout = &avr_uart_output;
 198:	e3 e6       	ldi	r30, 0x63	; 99
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	8c e1       	ldi	r24, 0x1C	; 28
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	93 83       	std	Z+3, r25	; 0x03
 1a2:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &avr_uart_input;
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	80 83       	st	Z, r24

	xdev_out(avr_uart_putchar);
 1ac:	83 e5       	ldi	r24, 0x53	; 83
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <xfunc_output+0x1>
 1b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <xfunc_output>
}
 1b8:	08 95       	ret

000001ba <avr_uart_data_avaiable>:
}

// return 0 if no data available, read it if available
bool avr_uart_data_avaiable(char *data) 
{
    if (UCSR0A & (1<<RXC0)) {
 1ba:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1be:	27 ff       	sbrs	r18, 7
 1c0:	06 c0       	rjmp	.+12     	; 0x1ce <avr_uart_data_avaiable+0x14>
        *data = UDR0;
 1c2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
        return true;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
    }
    return false;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
}
 1d0:	08 95       	ret

000001d2 <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 1d2:	fc 01       	movw	r30, r24
 1d4:	cb 01       	movw	r24, r22
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
 1d6:	30 97       	sbiw	r30, 0x00	; 0
 1d8:	09 f0       	breq	.+2      	; 0x1dc <xfputc+0xa>
		func(chr);		/* Write a character to the output device */
 1da:	09 94       	ijmp
	} else if (strptr) {
 1dc:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end>
 1e0:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__data_end+0x1>
 1e4:	30 97       	sbiw	r30, 0x00	; 0
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <xfputc+0x26>
		 *strptr++ = chr;	/* Write a character to the memory */
 1e8:	9f 01       	movw	r18, r30
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <__data_end+0x1>
 1f2:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <__data_end>
 1f6:	60 83       	st	Z, r22
	}
}
 1f8:	08 95       	ret

000001fa <xputc>:

void xputc (
	int chr				/* Character to be output */
)
{
	xfputc(xfunc_output, chr);	/* Output it to the default output device */
 1fa:	bc 01       	movw	r22, r24
 1fc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <xfunc_output>
 200:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <xfunc_output+0x1>
 204:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <xfputc>

00000208 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 208:	2f 92       	push	r2
 20a:	3f 92       	push	r3
 20c:	4f 92       	push	r4
 20e:	5f 92       	push	r5
 210:	6f 92       	push	r6
 212:	7f 92       	push	r7
 214:	8f 92       	push	r8
 216:	9f 92       	push	r9
 218:	af 92       	push	r10
 21a:	bf 92       	push	r11
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	a8 97       	sbiw	r28, 0x28	; 40
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	2c 01       	movw	r4, r24
 23e:	3b 01       	movw	r6, r22
 240:	7a 01       	movw	r14, r20
 242:	9e 01       	movw	r18, r28
 244:	2f 5f       	subi	r18, 0xFF	; 255
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	3a a3       	std	Y+34, r19	; 0x22
 24a:	29 a3       	std	Y+33, r18	; 0x21
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 24c:	d3 01       	movw	r26, r6
 24e:	6c 91       	ld	r22, X
		if (!c) break;				/* End of format? */
 250:	66 23       	and	r22, r22
 252:	09 f4       	brne	.+2      	; 0x256 <xvfprintf+0x4e>
 254:	b5 c1       	rjmp	.+874    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
		if (c != '%') {				/* Pass it through if not a % sequense */
 256:	65 32       	cpi	r22, 0x25	; 37
 258:	61 f0       	breq	.+24     	; 0x272 <xvfprintf+0x6a>
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 25a:	bf ef       	ldi	r27, 0xFF	; 255
 25c:	6b 1a       	sub	r6, r27
 25e:	7b 0a       	sbc	r7, r27
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
 260:	06 2e       	mov	r0, r22
 262:	00 0c       	add	r0, r0
 264:	77 0b       	sbc	r23, r23
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 266:	c2 01       	movw	r24, r4
 268:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 26c:	fc a2       	std	Y+36, r15	; 0x24
 26e:	eb a2       	std	Y+35, r14	; 0x23
 270:	39 c1       	rjmp	.+626    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 272:	f3 01       	movw	r30, r6
 274:	21 81       	ldd	r18, Z+1	; 0x01
		if (c == '0') {				/* Flag: left '0' padded */
 276:	20 33       	cpi	r18, 0x30	; 48
 278:	09 f0       	breq	.+2      	; 0x27c <xvfprintf+0x74>
 27a:	41 c0       	rjmp	.+130    	; 0x2fe <xvfprintf+0xf6>
			pad = '0'; c = *fmt++;
 27c:	33 96       	adiw	r30, 0x03	; 3
 27e:	2d a3       	std	Y+37, r18	; 0x25
 280:	12 96       	adiw	r26, 0x02	; 2
 282:	2c 91       	ld	r18, X
		c = *fmt++;					/* Get a format character */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
 284:	b1 2c       	mov	r11, r1
 286:	a1 2c       	mov	r10, r1
 288:	31 2c       	mov	r3, r1
 28a:	21 2c       	mov	r2, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 28c:	2a 32       	cpi	r18, 0x2A	; 42
 28e:	09 f0       	breq	.+2      	; 0x292 <xvfprintf+0x8a>
 290:	54 c0       	rjmp	.+168    	; 0x33a <xvfprintf+0x132>
			n = va_arg(arp, int);
 292:	c7 01       	movw	r24, r14
 294:	02 96       	adiw	r24, 0x02	; 2
 296:	d7 01       	movw	r26, r14
 298:	2d 90       	ld	r2, X+
 29a:	3c 90       	ld	r3, X
			if (n < 0) {			/* Flag: left justified */
 29c:	37 fe       	sbrs	r3, 7
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <xvfprintf+0xa4>
				n = 0 - n; f = 2;
 2a0:	31 94       	neg	r3
 2a2:	21 94       	neg	r2
 2a4:	31 08       	sbc	r3, r1
 2a6:	22 e0       	ldi	r18, 0x02	; 2
 2a8:	a2 2e       	mov	r10, r18
 2aa:	b1 2c       	mov	r11, r1
			}
			w = n; c = *fmt++;
 2ac:	3f 01       	movw	r6, r30
 2ae:	bf ef       	ldi	r27, 0xFF	; 255
 2b0:	6b 1a       	sub	r6, r27
 2b2:	7b 0a       	sbc	r7, r27
 2b4:	20 81       	ld	r18, Z
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
			n = va_arg(arp, int);
 2b6:	7c 01       	movw	r14, r24
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 2b8:	0f ef       	ldi	r16, 0xFF	; 255
 2ba:	1f ef       	ldi	r17, 0xFF	; 255
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
 2bc:	2e 32       	cpi	r18, 0x2E	; 46
 2be:	09 f0       	breq	.+2      	; 0x2c2 <xvfprintf+0xba>
 2c0:	4c c0       	rjmp	.+152    	; 0x35a <xvfprintf+0x152>
			c = *fmt++;
 2c2:	d3 01       	movw	r26, r6
 2c4:	2c 91       	ld	r18, X
			if (c == '*') {				/* Precision from an argument */
 2c6:	2a 32       	cpi	r18, 0x2A	; 42
 2c8:	09 f4       	brne	.+2      	; 0x2cc <xvfprintf+0xc4>
 2ca:	3d c0       	rjmp	.+122    	; 0x346 <xvfprintf+0x13e>
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
 2cc:	f3 01       	movw	r30, r6
 2ce:	31 96       	adiw	r30, 0x01	; 1
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
				c = *fmt++;
			} else {
				prec = 0;
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	00 e0       	ldi	r16, 0x00	; 0
 2d4:	3f 01       	movw	r6, r30
				while (c >= '0' && c <= '9') {
 2d6:	80 ed       	ldi	r24, 0xD0	; 208
 2d8:	82 0f       	add	r24, r18
 2da:	8a 30       	cpi	r24, 0x0A	; 10
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <xvfprintf+0xd8>
 2de:	3d c0       	rjmp	.+122    	; 0x35a <xvfprintf+0x152>
					prec = prec * 10 + c - '0';
 2e0:	aa e0       	ldi	r26, 0x0A	; 10
 2e2:	a0 9f       	mul	r26, r16
 2e4:	c0 01       	movw	r24, r0
 2e6:	a1 9f       	mul	r26, r17
 2e8:	90 0d       	add	r25, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	8c 01       	movw	r16, r24
 2ee:	02 0f       	add	r16, r18
 2f0:	11 1d       	adc	r17, r1
 2f2:	27 fd       	sbrc	r18, 7
 2f4:	1a 95       	dec	r17
 2f6:	00 53       	subi	r16, 0x30	; 48
 2f8:	11 09       	sbc	r17, r1
					c = *fmt++;
 2fa:	21 91       	ld	r18, Z+
 2fc:	eb cf       	rjmp	.-42     	; 0x2d4 <xvfprintf+0xcc>
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 2fe:	2d 32       	cpi	r18, 0x2D	; 45
 300:	21 f0       	breq	.+8      	; 0x30a <xvfprintf+0x102>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 302:	32 96       	adiw	r30, 0x02	; 2
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 304:	b0 e2       	ldi	r27, 0x20	; 32
 306:	bd a3       	std	Y+37, r27	; 0x25
 308:	bd cf       	rjmp	.-134    	; 0x284 <xvfprintf+0x7c>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 30a:	33 96       	adiw	r30, 0x03	; 3
 30c:	12 96       	adiw	r26, 0x02	; 2
 30e:	2c 91       	ld	r18, X
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 310:	b0 e2       	ldi	r27, 0x20	; 32
 312:	bd a3       	std	Y+37, r27	; 0x25
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 314:	32 e0       	ldi	r19, 0x02	; 2
 316:	a3 2e       	mov	r10, r19
 318:	b1 2c       	mov	r11, r1
 31a:	b6 cf       	rjmp	.-148    	; 0x288 <xvfprintf+0x80>
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 31c:	3a e0       	ldi	r19, 0x0A	; 10
 31e:	32 9d       	mul	r19, r2
 320:	c0 01       	movw	r24, r0
 322:	33 9d       	mul	r19, r3
 324:	90 0d       	add	r25, r0
 326:	11 24       	eor	r1, r1
 328:	1c 01       	movw	r2, r24
 32a:	22 0e       	add	r2, r18
 32c:	31 1c       	adc	r3, r1
 32e:	27 fd       	sbrc	r18, 7
 330:	3a 94       	dec	r3
 332:	80 e3       	ldi	r24, 0x30	; 48
 334:	28 1a       	sub	r2, r24
 336:	31 08       	sbc	r3, r1
				c = *fmt++;
 338:	21 91       	ld	r18, Z+
 33a:	3f 01       	movw	r6, r30
			if (n < 0) {			/* Flag: left justified */
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
 33c:	80 ed       	ldi	r24, 0xD0	; 208
 33e:	82 0f       	add	r24, r18
 340:	8a 30       	cpi	r24, 0x0A	; 10
 342:	60 f3       	brcs	.-40     	; 0x31c <xvfprintf+0x114>
 344:	b9 cf       	rjmp	.-142    	; 0x2b8 <xvfprintf+0xb0>
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 346:	f7 01       	movw	r30, r14
 348:	00 81       	ld	r16, Z
 34a:	11 81       	ldd	r17, Z+1	; 0x01
				c = *fmt++;
 34c:	11 96       	adiw	r26, 0x01	; 1
 34e:	2c 91       	ld	r18, X
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 350:	32 96       	adiw	r30, 0x02	; 2
 352:	7f 01       	movw	r14, r30
				c = *fmt++;
 354:	c3 01       	movw	r24, r6
 356:	02 96       	adiw	r24, 0x02	; 2
 358:	3c 01       	movw	r6, r24
					prec = prec * 10 + c - '0';
					c = *fmt++;
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 35a:	2c 36       	cpi	r18, 0x6C	; 108
 35c:	39 f4       	brne	.+14     	; 0x36c <xvfprintf+0x164>
			f |= 4; c = *fmt++;
 35e:	68 94       	set
 360:	a2 f8       	bld	r10, 2
 362:	f3 01       	movw	r30, r6
 364:	20 81       	ld	r18, Z
 366:	c3 01       	movw	r24, r6
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	3c 01       	movw	r6, r24
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 36c:	22 23       	and	r18, r18
 36e:	09 f4       	brne	.+2      	; 0x372 <xvfprintf+0x16a>
 370:	27 c1       	rjmp	.+590    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
		switch (c) {				/* Type is... */
 372:	24 36       	cpi	r18, 0x64	; 100
 374:	09 f4       	brne	.+2      	; 0x378 <xvfprintf+0x170>
 376:	a7 c0       	rjmp	.+334    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 378:	64 f4       	brge	.+24     	; 0x392 <xvfprintf+0x18a>
 37a:	22 36       	cpi	r18, 0x62	; 98
 37c:	09 f4       	brne	.+2      	; 0x380 <xvfprintf+0x178>
 37e:	00 c1       	rjmp	.+512    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 380:	0c f0       	brlt	.+2      	; 0x384 <xvfprintf+0x17c>
 382:	a4 c0       	rjmp	.+328    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 384:	28 35       	cpi	r18, 0x58	; 88
 386:	09 f4       	brne	.+2      	; 0x38a <xvfprintf+0x182>
 388:	9b c0       	rjmp	.+310    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 38a:	62 2f       	mov	r22, r18
 38c:	22 0f       	add	r18, r18
 38e:	77 0b       	sbc	r23, r23
 390:	6a cf       	rjmp	.-300    	; 0x266 <xvfprintf+0x5e>
 392:	23 37       	cpi	r18, 0x73	; 115
 394:	09 f4       	brne	.+2      	; 0x398 <xvfprintf+0x190>
 396:	a9 c0       	rjmp	.+338    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 398:	0c f0       	brlt	.+2      	; 0x39c <xvfprintf+0x194>
 39a:	8d c0       	rjmp	.+282    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		case 'b':					/* Unsigned binary */
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
 39c:	e8 e0       	ldi	r30, 0x08	; 8
 39e:	f0 e0       	ldi	r31, 0x00	; 0
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 3a0:	2f 36       	cpi	r18, 0x6F	; 111
 3a2:	99 f7       	brne	.-26     	; 0x38a <xvfprintf+0x182>
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
 3a4:	c7 01       	movw	r24, r14
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 3a6:	a2 fe       	sbrs	r10, 2
 3a8:	ee c0       	rjmp	.+476    	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
			v = (long)va_arg(arp, long);
 3aa:	04 96       	adiw	r24, 0x04	; 4
 3ac:	9c a3       	std	Y+36, r25	; 0x24
 3ae:	8b a3       	std	Y+35, r24	; 0x23
 3b0:	d7 01       	movw	r26, r14
 3b2:	4d 91       	ld	r20, X+
 3b4:	5d 91       	ld	r21, X+
 3b6:	6d 91       	ld	r22, X+
 3b8:	7c 91       	ld	r23, X
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 3ba:	24 36       	cpi	r18, 0x64	; 100
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <xvfprintf+0x1cc>
 3be:	77 ff       	sbrs	r23, 7
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <xvfprintf+0x1cc>
			v = 0 - v; f |= 1;
 3c2:	70 95       	com	r23
 3c4:	60 95       	com	r22
 3c6:	50 95       	com	r21
 3c8:	41 95       	neg	r20
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	6f 4f       	sbci	r22, 0xFF	; 255
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	68 94       	set
 3d2:	a0 f8       	bld	r10, 0
		}
		i = 0; uv = v;
 3d4:	b4 2f       	mov	r27, r20
 3d6:	a5 2f       	mov	r26, r21
 3d8:	cb 01       	movw	r24, r22
 3da:	28 37       	cpi	r18, 0x78	; 120
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <xvfprintf+0x1d8>
 3de:	e3 c0       	rjmp	.+454    	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 3e0:	27 e2       	ldi	r18, 0x27	; 39
 3e2:	28 a7       	std	Y+40, r18	; 0x28
 3e4:	9e 01       	movw	r18, r28
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ea:	3f a3       	std	Y+39, r19	; 0x27
 3ec:	2e a3       	std	Y+38, r18	; 0x26
 3ee:	91 2c       	mov	r9, r1
 3f0:	81 2c       	mov	r8, r1
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
 3f2:	6f 01       	movw	r12, r30
 3f4:	f1 2c       	mov	r15, r1
 3f6:	e1 2c       	mov	r14, r1
 3f8:	6b 2f       	mov	r22, r27
 3fa:	7a 2f       	mov	r23, r26
 3fc:	a7 01       	movw	r20, r14
 3fe:	96 01       	movw	r18, r12
 400:	0e 94 d0 06 	call	0xda0	; 0xda0 <__udivmodsi4>
 404:	76 2f       	mov	r23, r22
 406:	b2 2f       	mov	r27, r18
 408:	a3 2f       	mov	r26, r19
 40a:	ca 01       	movw	r24, r20
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 40c:	6a 30       	cpi	r22, 0x0A	; 10
 40e:	14 f0       	brlt	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	78 a5       	ldd	r23, Y+40	; 0x28
 412:	76 0f       	add	r23, r22
			str[i++] = d + '0';
 414:	84 01       	movw	r16, r8
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	60 e3       	ldi	r22, 0x30	; 48
 41c:	67 0f       	add	r22, r23
 41e:	ee a1       	ldd	r30, Y+38	; 0x26
 420:	ff a1       	ldd	r31, Y+39	; 0x27
 422:	61 93       	st	Z+, r22
 424:	ff a3       	std	Y+39, r31	; 0x27
 426:	ee a3       	std	Y+38, r30	; 0x26
		} while (uv != 0 && i < sizeof str);
 428:	23 2b       	or	r18, r19
 42a:	24 2b       	or	r18, r20
 42c:	25 2b       	or	r18, r21
 42e:	39 f0       	breq	.+14     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 430:	00 32       	cpi	r16, 0x20	; 32
 432:	11 05       	cpc	r17, r1
 434:	09 f0       	breq	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	ba c0       	rjmp	.+372    	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
 438:	8f e1       	ldi	r24, 0x1F	; 31
 43a:	88 2e       	mov	r8, r24
 43c:	91 2c       	mov	r9, r1
		if (f & 1) str[i++] = '-';					/* Sign */
 43e:	a0 fe       	sbrs	r10, 0
 440:	0b c0       	rjmp	.+22     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 442:	e1 e0       	ldi	r30, 0x01	; 1
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ec 0f       	add	r30, r28
 448:	fd 1f       	adc	r31, r29
 44a:	e0 0f       	add	r30, r16
 44c:	f1 1f       	adc	r31, r17
 44e:	2d e2       	ldi	r18, 0x2D	; 45
 450:	20 83       	st	Z, r18
 452:	84 01       	movw	r16, r8
 454:	0e 5f       	subi	r16, 0xFE	; 254
 456:	1f 4f       	sbci	r17, 0xFF	; 255
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 458:	78 01       	movw	r14, r16
 45a:	32 e0       	ldi	r19, 0x02	; 2
 45c:	a3 22       	and	r10, r19
 45e:	bb 24       	eor	r11, r11
 460:	8d a1       	ldd	r24, Y+37	; 0x25
 462:	88 2e       	mov	r8, r24
 464:	88 0f       	add	r24, r24
 466:	99 08       	sbc	r9, r9
 468:	a1 14       	cp	r10, r1
 46a:	b1 04       	cpc	r11, r1
 46c:	21 f4       	brne	.+8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46e:	e2 14       	cp	r14, r2
 470:	f3 04       	cpc	r15, r3
 472:	08 f4       	brcc	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	9d c0       	rjmp	.+314    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 476:	a1 e0       	ldi	r26, 0x01	; 1
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	ac 0f       	add	r26, r28
 47c:	bd 1f       	adc	r27, r29
 47e:	0a 0f       	add	r16, r26
 480:	1b 1f       	adc	r17, r27
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 482:	f8 01       	movw	r30, r16
 484:	62 91       	ld	r22, -Z
 486:	8f 01       	movw	r16, r30
 488:	06 2e       	mov	r0, r22
 48a:	00 0c       	add	r0, r0
 48c:	77 0b       	sbc	r23, r23
 48e:	c2 01       	movw	r24, r4
 490:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 494:	29 a1       	ldd	r18, Y+33	; 0x21
 496:	3a a1       	ldd	r19, Y+34	; 0x22
 498:	20 17       	cp	r18, r16
 49a:	31 07       	cpc	r19, r17
 49c:	91 f7       	brne	.-28     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 49e:	e2 14       	cp	r14, r2
 4a0:	f3 04       	cpc	r15, r3
 4a2:	00 f5       	brcc	.+64     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4a4:	60 e2       	ldi	r22, 0x20	; 32
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	c2 01       	movw	r24, r4
 4aa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 4ae:	3f ef       	ldi	r19, 0xFF	; 255
 4b0:	e3 1a       	sub	r14, r19
 4b2:	f3 0a       	sbc	r15, r19
 4b4:	f4 cf       	rjmp	.-24     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 4b6:	25 37       	cpi	r18, 0x75	; 117
 4b8:	31 f0       	breq	.+12     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ba:	28 37       	cpi	r18, 0x78	; 120
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4be:	65 cf       	rjmp	.-310    	; 0x38a <xvfprintf+0x182>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
 4c0:	e0 e1       	ldi	r30, 0x10	; 16
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	6f cf       	rjmp	.-290    	; 0x3a4 <xvfprintf+0x19c>
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 4c6:	ea e0       	ldi	r30, 0x0A	; 10
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	6c cf       	rjmp	.-296    	; 0x3a4 <xvfprintf+0x19c>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 4cc:	d7 01       	movw	r26, r14
 4ce:	12 96       	adiw	r26, 0x02	; 2
 4d0:	bc a3       	std	Y+36, r27	; 0x24
 4d2:	ab a3       	std	Y+35, r26	; 0x23
 4d4:	f7 01       	movw	r30, r14
 4d6:	60 81       	ld	r22, Z
 4d8:	06 2e       	mov	r0, r22
 4da:	00 0c       	add	r0, r0
 4dc:	77 0b       	sbc	r23, r23
 4de:	c2 01       	movw	r24, r4
 4e0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 4e4:	eb a0       	ldd	r14, Y+35	; 0x23
 4e6:	fc a0       	ldd	r15, Y+36	; 0x24
 4e8:	b1 ce       	rjmp	.-670    	; 0x24c <xvfprintf+0x44>
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
 4ea:	97 01       	movw	r18, r14
 4ec:	2e 5f       	subi	r18, 0xFE	; 254
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255
 4f0:	3c a3       	std	Y+36, r19	; 0x24
 4f2:	2b a3       	std	Y+35, r18	; 0x23
 4f4:	d7 01       	movw	r26, r14
 4f6:	cd 90       	ld	r12, X+
 4f8:	dc 90       	ld	r13, X
			if (!p) p = "";				/* Null ptr generates a null string */
 4fa:	c1 14       	cp	r12, r1
 4fc:	d1 04       	cpc	r13, r1
 4fe:	21 f4       	brne	.+8      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 500:	9f e3       	ldi	r25, 0x3F	; 63
 502:	c9 2e       	mov	r12, r25
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	d9 2e       	mov	r13, r25
			j = strlen(p);
 508:	c6 01       	movw	r24, r12
 50a:	0e 94 f2 06 	call	0xde4	; 0xde4 <strlen>
 50e:	7c 01       	movw	r14, r24
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
 510:	17 fd       	sbrc	r17, 7
 512:	04 c0       	rjmp	.+8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 514:	08 17       	cp	r16, r24
 516:	19 07       	cpc	r17, r25
 518:	08 f4       	brcc	.+2      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 51a:	78 01       	movw	r14, r16
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 51c:	e2 e0       	ldi	r30, 0x02	; 2
 51e:	ae 22       	and	r10, r30
 520:	bb 24       	eor	r11, r11
 522:	fd a1       	ldd	r31, Y+37	; 0x25
 524:	8f 2e       	mov	r8, r31
 526:	ff 0f       	add	r31, r31
 528:	99 08       	sbc	r9, r9
 52a:	07 c0       	rjmp	.+14     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 52c:	b4 01       	movw	r22, r8
 52e:	c2 01       	movw	r24, r4
 530:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 534:	bf ef       	ldi	r27, 0xFF	; 255
 536:	eb 1a       	sub	r14, r27
 538:	fb 0a       	sbc	r15, r27
 53a:	a1 14       	cp	r10, r1
 53c:	b1 04       	cpc	r11, r1
 53e:	19 f4       	brne	.+6      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 540:	e2 14       	cp	r14, r2
 542:	f3 04       	cpc	r15, r3
 544:	98 f3       	brcs	.-26     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
			while (*p && prec--) xfputc(func, *p++);/* String body */
 546:	d6 01       	movw	r26, r12
 548:	6d 91       	ld	r22, X+
 54a:	6d 01       	movw	r12, r26
 54c:	66 23       	and	r22, r22
 54e:	19 f0       	breq	.+6      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 550:	01 15       	cp	r16, r1
 552:	11 05       	cpc	r17, r1
 554:	61 f4       	brne	.+24     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 556:	e2 14       	cp	r14, r2
 558:	f3 04       	cpc	r15, r3
 55a:	20 f6       	brcc	.-120    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 55c:	60 e2       	ldi	r22, 0x20	; 32
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	c2 01       	movw	r24, r4
 562:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 566:	bf ef       	ldi	r27, 0xFF	; 255
 568:	eb 1a       	sub	r14, r27
 56a:	fb 0a       	sbc	r15, r27
 56c:	f4 cf       	rjmp	.-24     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
			p = va_arg(arp, char*);		/* Get a pointer argument */
			if (!p) p = "";				/* Null ptr generates a null string */
			j = strlen(p);
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
			while (*p && prec--) xfputc(func, *p++);/* String body */
 56e:	06 2e       	mov	r0, r22
 570:	00 0c       	add	r0, r0
 572:	77 0b       	sbc	r23, r23
 574:	c2 01       	movw	r24, r4
 576:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 57a:	01 50       	subi	r16, 0x01	; 1
 57c:	11 09       	sbc	r17, r1
 57e:	e3 cf       	rjmp	.-58     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
		case 'b':					/* Unsigned binary */
			r = 2; break;
 580:	e2 e0       	ldi	r30, 0x02	; 2
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	0f cf       	rjmp	.-482    	; 0x3a4 <xvfprintf+0x19c>
 586:	02 96       	adiw	r24, 0x02	; 2
 588:	9c a3       	std	Y+36, r25	; 0x24
 58a:	8b a3       	std	Y+35, r24	; 0x23
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 58c:	d7 01       	movw	r26, r14
 58e:	4d 91       	ld	r20, X+
 590:	5c 91       	ld	r21, X
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	24 36       	cpi	r18, 0x64	; 100
 598:	09 f0       	breq	.+2      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 59a:	1c cf       	rjmp	.-456    	; 0x3d4 <xvfprintf+0x1cc>
 59c:	05 2e       	mov	r0, r21
 59e:	00 0c       	add	r0, r0
 5a0:	66 0b       	sbc	r22, r22
 5a2:	77 0b       	sbc	r23, r23
 5a4:	0c cf       	rjmp	.-488    	; 0x3be <xvfprintf+0x1b6>
 5a6:	37 e0       	ldi	r19, 0x07	; 7
 5a8:	38 a7       	std	Y+40, r19	; 0x28
 5aa:	1c cf       	rjmp	.-456    	; 0x3e4 <xvfprintf+0x1dc>
 5ac:	48 01       	movw	r8, r16
 5ae:	24 cf       	rjmp	.-440    	; 0x3f8 <xvfprintf+0x1f0>
			d = (char)(uv % r); uv /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (uv != 0 && i < sizeof str);
		if (f & 1) str[i++] = '-';					/* Sign */
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 5b0:	b4 01       	movw	r22, r8
 5b2:	c2 01       	movw	r24, r4
 5b4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	e9 1a       	sub	r14, r25
 5bc:	f9 0a       	sbc	r15, r25
 5be:	54 cf       	rjmp	.-344    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
	}
}
 5c0:	a8 96       	adiw	r28, 0x28	; 40
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	bf 90       	pop	r11
 5de:	af 90       	pop	r10
 5e0:	9f 90       	pop	r9
 5e2:	8f 90       	pop	r8
 5e4:	7f 90       	pop	r7
 5e6:	6f 90       	pop	r6
 5e8:	5f 90       	pop	r5
 5ea:	4f 90       	pop	r4
 5ec:	3f 90       	pop	r3
 5ee:	2f 90       	pop	r2
 5f0:	08 95       	ret

000005f2 <xfputs>:

void xfputs (			/* Put a string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	8c 01       	movw	r16, r24
 5fc:	eb 01       	movw	r28, r22
	while (*str) {			/* Put the string */
 5fe:	69 91       	ld	r22, Y+
 600:	61 11       	cpse	r22, r1
 602:	05 c0       	rjmp	.+10     	; 0x60e <xfputs+0x1c>
		xfputc(func, *str++);
	}
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
	while (*str) {			/* Put the string */
		xfputc(func, *str++);
 60e:	06 2e       	mov	r0, r22
 610:	00 0c       	add	r0, r0
 612:	77 0b       	sbc	r23, r23
 614:	c8 01       	movw	r24, r16
 616:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 61a:	f1 cf       	rjmp	.-30     	; 0x5fe <xfputs+0xc>

0000061c <xputs>:

void xputs (			/* Put a string to the default device */
	const char* str		/* Pointer to the string */
)
{
	xfputs(xfunc_output, str);
 61c:	bc 01       	movw	r22, r24
 61e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <xfunc_output>
 622:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <xfunc_output+0x1>
 626:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <xfputs>

0000062a <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	ae 01       	movw	r20, r28
 634:	4b 5f       	subi	r20, 0xFB	; 251
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	fa 01       	movw	r30, r20
 63a:	61 91       	ld	r22, Z+
 63c:	71 91       	ld	r23, Z+
 63e:	af 01       	movw	r20, r30
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(xfunc_output, fmt, arp);
 640:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <xfunc_output>
 644:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <xfunc_output+0x1>
 648:	0e 94 04 01 	call	0x208	; 0x208 <xvfprintf>
	va_end(arp);
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <xfprintf>:
void xfprintf (			/* Put a formatted string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(func, fmt, arp);
 65a:	ae 01       	movw	r20, r28
 65c:	47 5f       	subi	r20, 0xF7	; 247
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	6f 81       	ldd	r22, Y+7	; 0x07
 662:	78 85       	ldd	r23, Y+8	; 0x08
 664:	8d 81       	ldd	r24, Y+5	; 0x05
 666:	9e 81       	ldd	r25, Y+6	; 0x06
 668:	0e 94 04 01 	call	0x208	; 0x208 <xvfprintf>
	va_end(arp);
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	strptr = buff;		/* Enable destination for memory */
 67a:	8d 81       	ldd	r24, Y+5	; 0x05
 67c:	9e 81       	ldd	r25, Y+6	; 0x06
 67e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
 682:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
	va_start(arp, fmt);
	xvfprintf(0, fmt, arp);
 686:	ae 01       	movw	r20, r28
 688:	47 5f       	subi	r20, 0xF7	; 247
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	6f 81       	ldd	r22, Y+7	; 0x07
 68e:	78 85       	ldd	r23, Y+8	; 0x08
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 04 01 	call	0x208	; 0x208 <xvfprintf>
	va_end(arp);
	*strptr = 0;		/* Terminate output string */
 698:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end>
 69c:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__data_end+0x1>
 6a0:	10 82       	st	Z, r1
	strptr = 0;			/* Disable destination for memory */
 6a2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__data_end+0x1>
 6a6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <at24cxx_init>:

#if HW_I2C_AT24CXX

void at24cxx_init(void)
{
    i2c_init();
 6b0:	80 e2       	ldi	r24, 0x20	; 32
 6b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 6b6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6ba:	84 e4       	ldi	r24, 0x44	; 68
 6bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
}
 6c0:	08 95       	ret

000006c2 <at24cxx_read_one_byte>:
	}
	return -1;											  
}

int at24cxx_read_one_byte(uint16_t ee_type, uint8_t hard_addr, uint16_t read_addr, uint8_t *buffer)
{
 6c2:	fc 01       	movw	r30, r24
    uint8_t sla, n = 0;
	int res = 0;
	if(ee_type > AT24C16)
 6c4:	e1 15       	cp	r30, r1
 6c6:	88 e0       	ldi	r24, 0x08	; 8
 6c8:	f8 07       	cpc	r31, r24
 6ca:	20 f4       	brcc	.+8      	; 0x6d4 <at24cxx_read_one_byte+0x12>
		sla = hard_addr;
	else
		sla = hard_addr | (((read_addr >> 8) & 0x07) << 1);
 6cc:	85 2f       	mov	r24, r21
 6ce:	88 0f       	add	r24, r24
 6d0:	8e 70       	andi	r24, 0x0E	; 14
 6d2:	68 2b       	or	r22, r24
	restart: // note8
 6d4:	7a ec       	ldi	r23, 0xCA	; 202
	if(n++ > MAX_ITER)
	{
		return -1;
	}
	begin:
    i2c_start();
 6d6:	a4 ea       	ldi	r26, 0xA4	; 164
			goto begin;
		default:
			return -1; // not in start condition, do not send stop condition
	}
	TWDR = sla | TW_WRITE;
	i2c_send();
 6d8:	84 e8       	ldi	r24, 0x84	; 132
		case TW_MT_ARB_LOST:
			goto begin;
		default:
			goto error;
	}	
	TWDR = sla | TW_READ;
 6da:	b6 2f       	mov	r27, r22
 6dc:	b1 60       	ori	r27, 0x01	; 1
 6de:	71 50       	subi	r23, 0x01	; 1
	if(ee_type > AT24C16)
		sla = hard_addr;
	else
		sla = hard_addr | (((read_addr >> 8) & 0x07) << 1);
	restart: // note8
	if(n++ > MAX_ITER)
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <at24cxx_read_one_byte+0x22>
 6e2:	87 c0       	rjmp	.+270    	; 0x7f2 <at24cxx_read_one_byte+0x130>
	{
		return -1;
	}
	begin:
    i2c_start();
 6e4:	a0 93 bc 00 	sts	0x00BC, r26	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 6e8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6ec:	97 ff       	sbrs	r25, 7
 6ee:	fc cf       	rjmp	.-8      	; 0x6e8 <at24cxx_read_one_byte+0x26>
	switch(TW_STATUS)
 6f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6f4:	98 7f       	andi	r25, 0xF8	; 248
 6f6:	90 31       	cpi	r25, 0x10	; 16
 6f8:	29 f0       	breq	.+10     	; 0x704 <at24cxx_read_one_byte+0x42>
 6fa:	98 33       	cpi	r25, 0x38	; 56
 6fc:	99 f3       	breq	.-26     	; 0x6e4 <at24cxx_read_one_byte+0x22>
 6fe:	98 30       	cpi	r25, 0x08	; 8
 700:	09 f0       	breq	.+2      	; 0x704 <at24cxx_read_one_byte+0x42>
 702:	77 c0       	rjmp	.+238    	; 0x7f2 <at24cxx_read_one_byte+0x130>
		case TW_MT_ARB_LOST: // note9
			goto begin;
		default:
			return -1; // not in start condition, do not send stop condition
	}
	TWDR = sla | TW_WRITE;
 704:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	i2c_send();
 708:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 70c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 710:	97 ff       	sbrs	r25, 7
 712:	fc cf       	rjmp	.-8      	; 0x70c <at24cxx_read_one_byte+0x4a>
	switch(TW_STATUS)
 714:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 718:	98 7f       	andi	r25, 0xF8	; 248
 71a:	90 32       	cpi	r25, 0x20	; 32
 71c:	01 f3       	breq	.-64     	; 0x6de <at24cxx_read_one_byte+0x1c>
 71e:	98 33       	cpi	r25, 0x38	; 56
 720:	09 f3       	breq	.-62     	; 0x6e4 <at24cxx_read_one_byte+0x22>
 722:	98 31       	cpi	r25, 0x18	; 24
 724:	09 f0       	breq	.+2      	; 0x728 <at24cxx_read_one_byte+0x66>
 726:	4a c0       	rjmp	.+148    	; 0x7bc <at24cxx_read_one_byte+0xfa>
		case TW_MT_ARB_LOST: // re-arbitrate
			goto begin;
		default:
			goto error; // must send stop condition
	}
	if(ee_type > AT24C16) // for 16-bit word address device
 728:	e1 15       	cp	r30, r1
 72a:	98 e0       	ldi	r25, 0x08	; 8
 72c:	f9 07       	cpc	r31, r25
 72e:	90 f0       	brcs	.+36     	; 0x754 <at24cxx_read_one_byte+0x92>
	{
		TWDR = (read_addr >> 8); // send high 8 bits of addr
 730:	50 93 bb 00 	sts	0x00BB, r21	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		i2c_send();
 734:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		i2c_wait();
 738:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 73c:	97 ff       	sbrs	r25, 7
 73e:	fc cf       	rjmp	.-8      	; 0x738 <at24cxx_read_one_byte+0x76>
		switch(TW_STATUS)
 740:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 744:	98 7f       	andi	r25, 0xF8	; 248
 746:	90 33       	cpi	r25, 0x30	; 48
 748:	09 f4       	brne	.+2      	; 0x74c <at24cxx_read_one_byte+0x8a>
 74a:	4d c0       	rjmp	.+154    	; 0x7e6 <at24cxx_read_one_byte+0x124>
 74c:	98 33       	cpi	r25, 0x38	; 56
 74e:	51 f2       	breq	.-108    	; 0x6e4 <at24cxx_read_one_byte+0x22>
 750:	98 32       	cpi	r25, 0x28	; 40
 752:	a1 f5       	brne	.+104    	; 0x7bc <at24cxx_read_one_byte+0xfa>
				goto begin;
			default:
				goto error; // must send stop condition
		}
	}
	TWDR = read_addr; // low 8 bits of addr
 754:	40 93 bb 00 	sts	0x00BB, r20	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	i2c_send();
 758:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 75c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 760:	97 ff       	sbrs	r25, 7
 762:	fc cf       	rjmp	.-8      	; 0x75c <at24cxx_read_one_byte+0x9a>
	switch(TW_STATUS)
 764:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 768:	98 7f       	andi	r25, 0xF8	; 248
 76a:	90 33       	cpi	r25, 0x30	; 48
 76c:	e1 f1       	breq	.+120    	; 0x7e6 <at24cxx_read_one_byte+0x124>
 76e:	98 33       	cpi	r25, 0x38	; 56
 770:	09 f4       	brne	.+2      	; 0x774 <at24cxx_read_one_byte+0xb2>
 772:	b8 cf       	rjmp	.-144    	; 0x6e4 <at24cxx_read_one_byte+0x22>
 774:	98 32       	cpi	r25, 0x28	; 40
 776:	11 f5       	brne	.+68     	; 0x7bc <at24cxx_read_one_byte+0xfa>
		case TW_MT_ARB_LOST:
			goto begin;
		default:
			goto error;
	}
    i2c_start();
 778:	a0 93 bc 00 	sts	0x00BC, r26	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 77c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 780:	97 ff       	sbrs	r25, 7
 782:	fc cf       	rjmp	.-8      	; 0x77c <at24cxx_read_one_byte+0xba>
	switch(TW_STATUS)
 784:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 788:	98 7f       	andi	r25, 0xF8	; 248
 78a:	90 31       	cpi	r25, 0x10	; 16
 78c:	29 f0       	breq	.+10     	; 0x798 <at24cxx_read_one_byte+0xd6>
 78e:	98 33       	cpi	r25, 0x38	; 56
 790:	09 f4       	brne	.+2      	; 0x794 <at24cxx_read_one_byte+0xd2>
 792:	a8 cf       	rjmp	.-176    	; 0x6e4 <at24cxx_read_one_byte+0x22>
 794:	98 30       	cpi	r25, 0x08	; 8
 796:	91 f4       	brne	.+36     	; 0x7bc <at24cxx_read_one_byte+0xfa>
		case TW_MT_ARB_LOST:
			goto begin;
		default:
			goto error;
	}	
	TWDR = sla | TW_READ;
 798:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	i2c_send();
 79c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 7a0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7a4:	97 ff       	sbrs	r25, 7
 7a6:	fc cf       	rjmp	.-8      	; 0x7a0 <at24cxx_read_one_byte+0xde>
	switch(TW_STATUS)
 7a8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 7ac:	98 7f       	andi	r25, 0xF8	; 248
 7ae:	90 34       	cpi	r25, 0x40	; 64
 7b0:	41 f0       	breq	.+16     	; 0x7c2 <at24cxx_read_one_byte+0x100>
 7b2:	98 34       	cpi	r25, 0x48	; 72
 7b4:	c1 f0       	breq	.+48     	; 0x7e6 <at24cxx_read_one_byte+0x124>
 7b6:	98 33       	cpi	r25, 0x38	; 56
 7b8:	09 f4       	brne	.+2      	; 0x7bc <at24cxx_read_one_byte+0xfa>
 7ba:	94 cf       	rjmp	.-216    	; 0x6e4 <at24cxx_read_one_byte+0x22>
	*buffer = TWDR;
	quit:
	i2c_stop();
	return res;
	error:
	res = -1;
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	9f ef       	ldi	r25, 0xFF	; 255
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <at24cxx_read_one_byte+0x128>
		case TW_MR_ARB_LOST:
			goto begin;
		default:
			goto error;
	}
	i2c_send_nack(); // do not change the order
 7c2:	84 e8       	ldi	r24, 0x84	; 132
 7c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 7c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7cc:	87 ff       	sbrs	r24, 7
 7ce:	fc cf       	rjmp	.-8      	; 0x7c8 <at24cxx_read_one_byte+0x106>
	switch(TW_STATUS)
 7d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 7d4:	88 7f       	andi	r24, 0xF8	; 248
 7d6:	80 35       	cpi	r24, 0x50	; 80
 7d8:	31 f0       	breq	.+12     	; 0x7e6 <at24cxx_read_one_byte+0x124>
 7da:	88 35       	cpi	r24, 0x58	; 88
 7dc:	79 f7       	brne	.-34     	; 0x7bc <at24cxx_read_one_byte+0xfa>
		case TW_MR_DATA_ACK:
			goto quit;
		default:
			goto error;
	}
	*buffer = TWDR;
 7de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 7e2:	f9 01       	movw	r30, r18
 7e4:	80 83       	st	Z, r24
}

int at24cxx_read_one_byte(uint16_t ee_type, uint8_t hard_addr, uint16_t read_addr, uint8_t *buffer)
{
    uint8_t sla, n = 0;
	int res = 0;
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	80 e0       	ldi	r24, 0x00	; 0
		default:
			goto error;
	}
	*buffer = TWDR;
	quit:
	i2c_stop();
 7ea:	24 e9       	ldi	r18, 0x94	; 148
 7ec:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return res;
 7f0:	08 95       	ret
		case TW_START:
			break;
		case TW_MT_ARB_LOST: // note9
			goto begin;
		default:
			return -1; // not in start condition, do not send stop condition
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	9f ef       	ldi	r25, 0xFF	; 255
	i2c_stop();
	return res;
	error:
	res = -1;
	goto quit;
}
 7f6:	08 95       	ret

000007f8 <at24cxx_write_one_byte>:

int at24cxx_write_one_byte(uint16_t ee_type, uint8_t hard_addr, uint16_t write_addr, uint8_t *buffer)
{
 7f8:	fc 01       	movw	r30, r24
 7fa:	d9 01       	movw	r26, r18
	uint8_t sla, n = 0;
	int res = 0;
	if(ee_type > AT24C16)
 7fc:	e1 15       	cp	r30, r1
 7fe:	88 e0       	ldi	r24, 0x08	; 8
 800:	f8 07       	cpc	r31, r24
 802:	20 f4       	brcc	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		sla = hard_addr;
	else
		sla = hard_addr | (((write_addr >> 8) & 0x07) << 1);
 804:	85 2f       	mov	r24, r21
 806:	88 0f       	add	r24, r24
 808:	8e 70       	andi	r24, 0x0E	; 14
 80a:	68 2b       	or	r22, r24
	restart:
 80c:	39 ec       	ldi	r19, 0xC9	; 201
    if (n++ >= MAX_ITER)
	{
        return -1;
	}
	begin: // note15
    i2c_start();
 80e:	84 ea       	ldi	r24, 0xA4	; 164
            goto begin;
        default:
            return -1;		// not in start condition 
    }
    TWDR = sla | TW_WRITE;
    i2c_send();
 810:	74 e8       	ldi	r23, 0x84	; 132
 812:	31 50       	subi	r19, 0x01	; 1
	if(ee_type > AT24C16)
		sla = hard_addr;
	else
		sla = hard_addr | (((write_addr >> 8) & 0x07) << 1);
	restart:
    if (n++ >= MAX_ITER)
 814:	09 f4       	brne	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 816:	60 c0       	rjmp	.+192    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
	{
        return -1;
	}
	begin: // note15
    i2c_start();
 818:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 81c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 820:	97 ff       	sbrs	r25, 7
 822:	fc cf       	rjmp	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
    switch(TW_STATUS)
 824:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 828:	98 7f       	andi	r25, 0xF8	; 248
 82a:	90 31       	cpi	r25, 0x10	; 16
 82c:	29 f0       	breq	.+10     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82e:	98 33       	cpi	r25, 0x38	; 56
 830:	99 f3       	breq	.-26     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 832:	98 30       	cpi	r25, 0x08	; 8
 834:	09 f0       	breq	.+2      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 836:	50 c0       	rjmp	.+160    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
        case TW_MT_ARB_LOST:
            goto begin;
        default:
            return -1;		// not in start condition 
    }
    TWDR = sla | TW_WRITE;
 838:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    i2c_send();
 83c:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait();
 840:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 844:	97 ff       	sbrs	r25, 7
 846:	fc cf       	rjmp	.-8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
    switch(TW_STATUS)
 848:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 84c:	98 7f       	andi	r25, 0xF8	; 248
 84e:	90 32       	cpi	r25, 0x20	; 32
 850:	01 f3       	breq	.-64     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 852:	98 33       	cpi	r25, 0x38	; 56
 854:	09 f3       	breq	.-62     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 856:	98 31       	cpi	r25, 0x18	; 24
 858:	e1 f5       	brne	.+120    	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
        case TW_MT_ARB_LOST:	// re-arbitrate 
            goto begin;
        default:
            goto error;		// must send stop condition 
    }
    if(ee_type > AT24C16)
 85a:	e1 15       	cp	r30, r1
 85c:	98 e0       	ldi	r25, 0x08	; 8
 85e:	f9 07       	cpc	r31, r25
 860:	88 f0       	brcs	.+34     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
	{
        TWDR = (write_addr >> 8); // 16-bit word address device, send high 8 bits of addr
 862:	50 93 bb 00 	sts	0x00BB, r21	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        i2c_send(); // send 
 866:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        i2c_wait(); // wait for transmission
 86a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 86e:	97 ff       	sbrs	r25, 7
 870:	fc cf       	rjmp	.-8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
        switch(TW_STATUS)
 872:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 876:	98 7f       	andi	r25, 0xF8	; 248
 878:	90 33       	cpi	r25, 0x30	; 48
 87a:	29 f1       	breq	.+74     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 87c:	98 33       	cpi	r25, 0x38	; 56
 87e:	61 f2       	breq	.-104    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 880:	98 32       	cpi	r25, 0x28	; 40
 882:	39 f5       	brne	.+78     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
                goto begin;
            default:
                goto error; // must send stop condition
        }
	}
	TWDR = write_addr; // low 8 bits of addr 
 884:	40 93 bb 00 	sts	0x00BB, r20	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    i2c_send(); 
 888:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait();
 88c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 890:	97 ff       	sbrs	r25, 7
 892:	fc cf       	rjmp	.-8      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
    switch(TW_STATUS)
 894:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 898:	98 7f       	andi	r25, 0xF8	; 248
 89a:	90 33       	cpi	r25, 0x30	; 48
 89c:	a1 f0       	breq	.+40     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 89e:	98 33       	cpi	r25, 0x38	; 56
 8a0:	09 f4       	brne	.+2      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 8a2:	ba cf       	rjmp	.-140    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 8a4:	98 32       	cpi	r25, 0x28	; 40
 8a6:	a9 f4       	brne	.+42     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
        case TW_MT_ARB_LOST:
            goto begin;
        default:
            goto error;		
    }
	TWDR = *buffer;
 8a8:	8c 91       	ld	r24, X
 8aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	i2c_send();
 8ae:	84 e8       	ldi	r24, 0x84	; 132
 8b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 8b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 8b8:	87 ff       	sbrs	r24, 7
 8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
	switch(TW_STATUS)
 8bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 8c0:	88 7f       	andi	r24, 0xF8	; 248
 8c2:	88 32       	cpi	r24, 0x28	; 40
 8c4:	31 f4       	brne	.+12     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
}

int at24cxx_write_one_byte(uint16_t ee_type, uint8_t hard_addr, uint16_t write_addr, uint8_t *buffer)
{
	uint8_t sla, n = 0;
	int res = 0;
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	80 e0       	ldi	r24, 0x00	; 0
			goto error; // device write protected, note16
		default:
			goto error;
	}
	quit:
	i2c_stop();
 8ca:	24 e9       	ldi	r18, 0x94	; 148
 8cc:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return res;
 8d0:	08 95       	ret
	error:
	res = -1;
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	9f ef       	ldi	r25, 0xFF	; 255
 8d6:	f9 cf       	rjmp	.-14     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
        case TW_START:
            break;
        case TW_MT_ARB_LOST:
            goto begin;
        default:
            return -1;		// not in start condition 
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	9f ef       	ldi	r25, 0xFF	; 255
	i2c_stop();
	return res;
	error:
	res = -1;
	goto quit;
}
 8dc:	08 95       	ret

000008de <at24cxx_check>:
{
    i2c_init();
}

int at24cxx_check(uint16_t ee_type, uint8_t hard_addr)
{
 8de:	ff 92       	push	r15
 8e0:	0f 93       	push	r16
 8e2:	1f 93       	push	r17
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	1f 92       	push	r1
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
 8ee:	8c 01       	movw	r16, r24
 8f0:	f6 2e       	mov	r15, r22
	uint8_t temp;
	at24cxx_read_one_byte(ee_type, hard_addr, 255, &temp);//avoid writing AT24CXX every time start the mcu			   
 8f2:	9e 01       	movw	r18, r28
 8f4:	2f 5f       	subi	r18, 0xFF	; 255
 8f6:	3f 4f       	sbci	r19, 0xFF	; 255
 8f8:	4f ef       	ldi	r20, 0xFF	; 255
 8fa:	50 e0       	ldi	r21, 0x00	; 0
 8fc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <at24cxx_read_one_byte>
	if(temp == 0x55)
 900:	89 81       	ldd	r24, Y+1	; 0x01
 902:	85 35       	cpi	r24, 0x55	; 85
 904:	29 f1       	breq	.+74     	; 0x950 <__stack+0x51>
        return 0;		   
	else
	{
		temp = 0x55;
 906:	85 e5       	ldi	r24, 0x55	; 85
 908:	89 83       	std	Y+1, r24	; 0x01
		at24cxx_write_one_byte(ee_type, hard_addr, 255, &temp);
 90a:	9e 01       	movw	r18, r28
 90c:	2f 5f       	subi	r18, 0xFF	; 255
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	4f ef       	ldi	r20, 0xFF	; 255
 912:	50 e0       	ldi	r21, 0x00	; 0
 914:	6f 2d       	mov	r22, r15
 916:	c8 01       	movw	r24, r16
 918:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <at24cxx_write_one_byte>
	    at24cxx_read_one_byte(ee_type, hard_addr, 255, &temp);	  
 91c:	9e 01       	movw	r18, r28
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	4f ef       	ldi	r20, 0xFF	; 255
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	6f 2d       	mov	r22, r15
 928:	c8 01       	movw	r24, r16
 92a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <at24cxx_read_one_byte>
		if(temp == 0x55)
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	29 81       	ldd	r18, Y+1	; 0x01
 934:	25 35       	cpi	r18, 0x55	; 85
 936:	11 f4       	brne	.+4      	; 0x93c <__stack+0x3d>
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	91 95       	neg	r25
 93e:	81 95       	neg	r24
 940:	91 09       	sbc	r25, r1
            return 0;
	}
	return -1;											  
}
 942:	0f 90       	pop	r0
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	1f 91       	pop	r17
 94a:	0f 91       	pop	r16
 94c:	ff 90       	pop	r15
 94e:	08 95       	ret
int at24cxx_check(uint16_t ee_type, uint8_t hard_addr)
{
	uint8_t temp;
	at24cxx_read_one_byte(ee_type, hard_addr, 255, &temp);//avoid writing AT24CXX every time start the mcu			   
	if(temp == 0x55)
        return 0;		   
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	f6 cf       	rjmp	.-20     	; 0x942 <__stack+0x43>

00000956 <at24cxx_n_write>:
    res = -1;
    goto quit;
}

int at24cxx_n_write(uint16_t ee_type, uint8_t hard_addr, uint16_t write_addr, int len, uint8_t *buffer)
{
 956:	6f 92       	push	r6
 958:	7f 92       	push	r7
 95a:	9f 92       	push	r9
 95c:	af 92       	push	r10
 95e:	bf 92       	push	r11
 960:	cf 92       	push	r12
 962:	df 92       	push	r13
 964:	ef 92       	push	r14
 966:	ff 92       	push	r15
 968:	0f 93       	push	r16
 96a:	1f 93       	push	r17
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	3c 01       	movw	r6, r24
 972:	79 01       	movw	r14, r18
    int res, total = 0;
 974:	d0 e0       	ldi	r29, 0x00	; 0
 976:	c0 e0       	ldi	r28, 0x00	; 0
    if (n++ >= MAX_ITER)
	{
        return -1;
	}
    begin: // note15
    i2c_start();
 978:	74 ea       	ldi	r23, 0xA4	; 164
            goto begin;
        default:
            return -1;		// not in start condition 
    }
    TWDR = sla | TW_WRITE;
    i2c_send();
 97a:	24 e8       	ldi	r18, 0x84	; 132
	        default:
	            goto error;
	    }
    }
    quit:
    i2c_stop(); // send stop condition 
 97c:	84 e9       	ldi	r24, 0x94	; 148
 97e:	98 2e       	mov	r9, r24
static int at24cxx_page_write(uint16_t ee_type, uint8_t hard_addr, uint16_t write_addr, int len, uint8_t *buffer)
{
    uint8_t sla, n = 0;
    int res = 0;
    uint16_t end_addr;
    if (write_addr + len <= (write_addr | (PAGE_SIZE - 1)))
 980:	57 01       	movw	r10, r14
 982:	a4 0e       	add	r10, r20
 984:	b5 1e       	adc	r11, r21
 986:	ca 01       	movw	r24, r20
 988:	87 60       	ori	r24, 0x07	; 7
 98a:	8a 15       	cp	r24, r10
 98c:	9b 05       	cpc	r25, r11
 98e:	20 f4       	brcc	.+8      	; 0x998 <at24cxx_n_write+0x42>
        end_addr = write_addr + len;
    else
        end_addr = (write_addr | (PAGE_SIZE - 1)) + 1;
 990:	5c 01       	movw	r10, r24
 992:	3f ef       	ldi	r19, 0xFF	; 255
 994:	a3 1a       	sub	r10, r19
 996:	b3 0a       	sbc	r11, r19
 998:	c5 2e       	mov	r12, r21
    len = end_addr - write_addr;
	if(ee_type > AT24C16)
		sla = hard_addr; // 16-bit address devices need only TWI Device Address
 99a:	96 2f       	mov	r25, r22
    if (write_addr + len <= (write_addr | (PAGE_SIZE - 1)))
        end_addr = write_addr + len;
    else
        end_addr = (write_addr | (PAGE_SIZE - 1)) + 1;
    len = end_addr - write_addr;
	if(ee_type > AT24C16)
 99c:	61 14       	cp	r6, r1
 99e:	88 e0       	ldi	r24, 0x08	; 8
 9a0:	78 06       	cpc	r7, r24
 9a2:	20 f4       	brcc	.+8      	; 0x9ac <at24cxx_n_write+0x56>
		sla = hard_addr; // 16-bit address devices need only TWI Device Address
	else 
		sla = hard_addr | (((write_addr >> 8) & 0x07) << 1);
 9a4:	95 2f       	mov	r25, r21
 9a6:	99 0f       	add	r25, r25
 9a8:	9e 70       	andi	r25, 0x0E	; 14
 9aa:	96 2b       	or	r25, r22
    restart:
 9ac:	e9 ec       	ldi	r30, 0xC9	; 201
 9ae:	e1 50       	subi	r30, 0x01	; 1
    if (n++ >= MAX_ITER)
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <at24cxx_n_write+0x5e>
 9b2:	90 c0       	rjmp	.+288    	; 0xad4 <at24cxx_n_write+0x17e>
	{
        return -1;
	}
    begin: // note15
    i2c_start();
 9b4:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait(); 
 9b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9bc:	87 ff       	sbrs	r24, 7
 9be:	fc cf       	rjmp	.-8      	; 0x9b8 <at24cxx_n_write+0x62>
    switch(TW_STATUS)
 9c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 9c4:	88 7f       	andi	r24, 0xF8	; 248
 9c6:	80 31       	cpi	r24, 0x10	; 16
 9c8:	29 f0       	breq	.+10     	; 0x9d4 <at24cxx_n_write+0x7e>
 9ca:	88 33       	cpi	r24, 0x38	; 56
 9cc:	99 f3       	breq	.-26     	; 0x9b4 <at24cxx_n_write+0x5e>
 9ce:	88 30       	cpi	r24, 0x08	; 8
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <at24cxx_n_write+0x7e>
 9d2:	7d c0       	rjmp	.+250    	; 0xace <at24cxx_n_write+0x178>
        case TW_MT_ARB_LOST:
            goto begin;
        default:
            return -1;		// not in start condition 
    }
    TWDR = sla | TW_WRITE;
 9d4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    i2c_send();
 9d8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait();
 9dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9e0:	87 ff       	sbrs	r24, 7
 9e2:	fc cf       	rjmp	.-8      	; 0x9dc <at24cxx_n_write+0x86>
    switch(TW_STATUS)
 9e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 9e8:	88 7f       	andi	r24, 0xF8	; 248
 9ea:	80 32       	cpi	r24, 0x20	; 32
 9ec:	01 f3       	breq	.-64     	; 0x9ae <at24cxx_n_write+0x58>
 9ee:	88 33       	cpi	r24, 0x38	; 56
 9f0:	09 f3       	breq	.-62     	; 0x9b4 <at24cxx_n_write+0x5e>
 9f2:	88 31       	cpi	r24, 0x18	; 24
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <at24cxx_n_write+0xa2>
 9f6:	68 c0       	rjmp	.+208    	; 0xac8 <at24cxx_n_write+0x172>
        case TW_MT_ARB_LOST:	// re-arbitrate 
            goto begin;
        default:
            goto error;		// must send stop condition 
    }
    if(ee_type > AT24C16)
 9f8:	61 14       	cp	r6, r1
 9fa:	a8 e0       	ldi	r26, 0x08	; 8
 9fc:	7a 06       	cpc	r7, r26
 9fe:	90 f0       	brcs	.+36     	; 0xa24 <at24cxx_n_write+0xce>
	{
        TWDR = (write_addr >> 8); // 16-bit word address device, send high 8 bits of addr
 a00:	c0 92 bb 00 	sts	0x00BB, r12	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        i2c_send(); 
 a04:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        i2c_wait(); 
 a08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a0c:	87 ff       	sbrs	r24, 7
 a0e:	fc cf       	rjmp	.-8      	; 0xa08 <at24cxx_n_write+0xb2>
        switch(TW_STATUS)
 a10:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a14:	38 7f       	andi	r19, 0xF8	; 248
 a16:	30 33       	cpi	r19, 0x30	; 48
 a18:	a9 f1       	breq	.+106    	; 0xa84 <at24cxx_n_write+0x12e>
 a1a:	38 33       	cpi	r19, 0x38	; 56
 a1c:	59 f2       	breq	.-106    	; 0x9b4 <at24cxx_n_write+0x5e>
 a1e:	38 32       	cpi	r19, 0x28	; 40
 a20:	09 f0       	breq	.+2      	; 0xa24 <at24cxx_n_write+0xce>
 a22:	52 c0       	rjmp	.+164    	; 0xac8 <at24cxx_n_write+0x172>
                goto begin;
            default:
                goto error; // must send stop condition
        }
	}
    TWDR = write_addr;		// low 8 bits of addr 
 a24:	40 93 bb 00 	sts	0x00BB, r20	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    i2c_send(); 
 a28:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait();
 a2c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a30:	87 ff       	sbrs	r24, 7
 a32:	fc cf       	rjmp	.-8      	; 0xa2c <at24cxx_n_write+0xd6>
    switch(TW_STATUS)
 a34:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a38:	38 7f       	andi	r19, 0xF8	; 248
 a3a:	30 33       	cpi	r19, 0x30	; 48
 a3c:	19 f1       	breq	.+70     	; 0xa84 <at24cxx_n_write+0x12e>
 a3e:	38 33       	cpi	r19, 0x38	; 56
 a40:	09 f4       	brne	.+2      	; 0xa44 <at24cxx_n_write+0xee>
 a42:	b8 cf       	rjmp	.-144    	; 0x9b4 <at24cxx_n_write+0x5e>
 a44:	38 32       	cpi	r19, 0x28	; 40
 a46:	09 f0       	breq	.+2      	; 0xa4a <at24cxx_n_write+0xf4>
 a48:	3f c0       	rjmp	.+126    	; 0xac8 <at24cxx_n_write+0x172>
    uint16_t end_addr;
    if (write_addr + len <= (write_addr | (PAGE_SIZE - 1)))
        end_addr = write_addr + len;
    else
        end_addr = (write_addr | (PAGE_SIZE - 1)) + 1;
    len = end_addr - write_addr;
 a4a:	a4 1a       	sub	r10, r20
 a4c:	b5 0a       	sbc	r11, r21
 a4e:	c8 01       	movw	r24, r16
}

static int at24cxx_page_write(uint16_t ee_type, uint8_t hard_addr, uint16_t write_addr, int len, uint8_t *buffer)
{
    uint8_t sla, n = 0;
    int res = 0;
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	e0 e0       	ldi	r30, 0x00	; 0
        case TW_MT_ARB_LOST:
            goto begin;
        default:
            goto error;		
    }
    for(; len > 0; len--)
 a54:	65 01       	movw	r12, r10
 a56:	ce 1a       	sub	r12, r30
 a58:	df 0a       	sbc	r13, r31
 a5a:	1c 14       	cp	r1, r12
 a5c:	1d 04       	cpc	r1, r13
 a5e:	a4 f4       	brge	.+40     	; 0xa88 <at24cxx_n_write+0x132>
    {
        TWDR = *buffer;
 a60:	dc 01       	movw	r26, r24
 a62:	3d 91       	ld	r19, X+
 a64:	cd 01       	movw	r24, r26
 a66:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		buffer++;
        i2c_send(); 
 a6a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        i2c_wait(); 
 a6e:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a72:	37 ff       	sbrs	r19, 7
 a74:	fc cf       	rjmp	.-8      	; 0xa6e <at24cxx_n_write+0x118>
        switch(TW_STATUS)
 a76:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a7a:	38 7f       	andi	r19, 0xF8	; 248
 a7c:	38 32       	cpi	r19, 0x28	; 40
 a7e:	21 f5       	brne	.+72     	; 0xac8 <at24cxx_n_write+0x172>
	    {
	        case TW_MT_DATA_NACK:
	            goto error;		// device write protected, note16
            case TW_MT_DATA_ACK:
                res++;
 a80:	31 96       	adiw	r30, 0x01	; 1
 a82:	e8 cf       	rjmp	.-48     	; 0xa54 <at24cxx_n_write+0xfe>
}

static int at24cxx_page_write(uint16_t ee_type, uint8_t hard_addr, uint16_t write_addr, int len, uint8_t *buffer)
{
    uint8_t sla, n = 0;
    int res = 0;
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	e0 e0       	ldi	r30, 0x00	; 0
	        default:
	            goto error;
	    }
    }
    quit:
    i2c_stop(); // send stop condition 
 a88:	90 92 bc 00 	sts	0x00BC, r9	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
{
    int res, total = 0;
    do
    {
        res = at24cxx_page_write(ee_type, hard_addr, write_addr, len, buffer);
        if (res == -1)
 a8c:	ef 3f       	cpi	r30, 0xFF	; 255
 a8e:	fe 07       	cpc	r31, r30
 a90:	09 f1       	breq	.+66     	; 0xad4 <at24cxx_n_write+0x17e>
	        return -1;
        write_addr += res;
 a92:	4e 0f       	add	r20, r30
 a94:	5f 1f       	adc	r21, r31
        len -= res;
 a96:	ee 1a       	sub	r14, r30
 a98:	ff 0a       	sbc	r15, r31
        buffer += res;
 a9a:	0e 0f       	add	r16, r30
 a9c:	1f 1f       	adc	r17, r31
        total += res;
 a9e:	ce 0f       	add	r28, r30
 aa0:	df 1f       	adc	r29, r31
    }while (len > 0);
 aa2:	1e 14       	cp	r1, r14
 aa4:	1f 04       	cpc	r1, r15
 aa6:	0c f4       	brge	.+2      	; 0xaaa <at24cxx_n_write+0x154>
 aa8:	6b cf       	rjmp	.-298    	; 0x980 <at24cxx_n_write+0x2a>
    return total;
}
 aaa:	ce 01       	movw	r24, r28
 aac:	df 91       	pop	r29
 aae:	cf 91       	pop	r28
 ab0:	1f 91       	pop	r17
 ab2:	0f 91       	pop	r16
 ab4:	ff 90       	pop	r15
 ab6:	ef 90       	pop	r14
 ab8:	df 90       	pop	r13
 aba:	cf 90       	pop	r12
 abc:	bf 90       	pop	r11
 abe:	af 90       	pop	r10
 ac0:	9f 90       	pop	r9
 ac2:	7f 90       	pop	r7
 ac4:	6f 90       	pop	r6
 ac6:	08 95       	ret
    }
    quit:
    i2c_stop(); // send stop condition 
    return res;
    error:
    res = -1;
 ac8:	ef ef       	ldi	r30, 0xFF	; 255
 aca:	ff ef       	ldi	r31, 0xFF	; 255
 acc:	dd cf       	rjmp	.-70     	; 0xa88 <at24cxx_n_write+0x132>
        case TW_START:
            break;
        case TW_MT_ARB_LOST:
            goto begin;
        default:
            return -1;		// not in start condition 
 ace:	ef ef       	ldi	r30, 0xFF	; 255
 ad0:	ff ef       	ldi	r31, 0xFF	; 255
 ad2:	dc cf       	rjmp	.-72     	; 0xa8c <at24cxx_n_write+0x136>
    int res, total = 0;
    do
    {
        res = at24cxx_page_write(ee_type, hard_addr, write_addr, len, buffer);
        if (res == -1)
	        return -1;
 ad4:	cf ef       	ldi	r28, 0xFF	; 255
 ad6:	df ef       	ldi	r29, 0xFF	; 255
 ad8:	e8 cf       	rjmp	.-48     	; 0xaaa <at24cxx_n_write+0x154>

00000ada <at24cxx_n_read>:
    return total;
}

// sequential read, no max number to read restriction
int at24cxx_n_read(uint16_t ee_type, uint8_t hard_addr, uint16_t read_addr, int len, uint8_t *buffer)
{
 ada:	0f 93       	push	r16
 adc:	1f 93       	push	r17
 ade:	cf 93       	push	r28
 ae0:	fc 01       	movw	r30, r24
	uint8_t sla, n = 0;
	int res = 0;
	if(ee_type > AT24C16)
 ae2:	e1 15       	cp	r30, r1
 ae4:	88 e0       	ldi	r24, 0x08	; 8
 ae6:	f8 07       	cpc	r31, r24
 ae8:	20 f4       	brcc	.+8      	; 0xaf2 <at24cxx_n_read+0x18>
		sla = hard_addr; // 16-bit address devices need only TWI Device Address
	else
		sla = hard_addr | (((read_addr >> 8) & 0x07) << 1);
 aea:	85 2f       	mov	r24, r21
 aec:	88 0f       	add	r24, r24
 aee:	8e 70       	andi	r24, 0x0E	; 14
 af0:	68 2b       	or	r22, r24
	restart: // Note[8]
 af2:	a9 ec       	ldi	r26, 0xC9	; 201
	if(n++ >= MAX_ITER)
		return -1;
	begin:
	i2c_start();
 af4:	b4 ea       	ldi	r27, 0xA4	; 164
			goto begin;
		default:
			return -1; // not in start condition, do not send stop condition
	}
	TWDR = sla | TW_WRITE; // Note[10]
	i2c_send();
 af6:	74 e8       	ldi	r23, 0x84	; 132
		case TW_MT_ARB_LOST:
			goto begin;
		default:
			goto error;
	}
	TWDR = sla | TW_READ;
 af8:	c6 2f       	mov	r28, r22
 afa:	c1 60       	ori	r28, 0x01	; 1
 afc:	a1 50       	subi	r26, 0x01	; 1
	if(ee_type > AT24C16)
		sla = hard_addr; // 16-bit address devices need only TWI Device Address
	else
		sla = hard_addr | (((read_addr >> 8) & 0x07) << 1);
	restart: // Note[8]
	if(n++ >= MAX_ITER)
 afe:	09 f4       	brne	.+2      	; 0xb02 <at24cxx_n_read+0x28>
 b00:	a0 c0       	rjmp	.+320    	; 0xc42 <at24cxx_n_read+0x168>
		return -1;
	begin:
	i2c_start();
 b02:	b0 93 bc 00 	sts	0x00BC, r27	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 b06:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 b0a:	87 ff       	sbrs	r24, 7
 b0c:	fc cf       	rjmp	.-8      	; 0xb06 <at24cxx_n_read+0x2c>
	switch(TW_STATUS)
 b0e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 b12:	88 7f       	andi	r24, 0xF8	; 248
 b14:	80 31       	cpi	r24, 0x10	; 16
 b16:	29 f0       	breq	.+10     	; 0xb22 <at24cxx_n_read+0x48>
 b18:	88 33       	cpi	r24, 0x38	; 56
 b1a:	99 f3       	breq	.-26     	; 0xb02 <at24cxx_n_read+0x28>
 b1c:	88 30       	cpi	r24, 0x08	; 8
 b1e:	09 f0       	breq	.+2      	; 0xb22 <at24cxx_n_read+0x48>
 b20:	90 c0       	rjmp	.+288    	; 0xc42 <at24cxx_n_read+0x168>
		case TW_MT_ARB_LOST: // Note[9]
			goto begin;
		default:
			return -1; // not in start condition, do not send stop condition
	}
	TWDR = sla | TW_WRITE; // Note[10]
 b22:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	i2c_send();
 b26:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 b2a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 b2e:	87 ff       	sbrs	r24, 7
 b30:	fc cf       	rjmp	.-8      	; 0xb2a <at24cxx_n_read+0x50>
	switch(TW_STATUS)
 b32:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 b36:	98 7f       	andi	r25, 0xF8	; 248
 b38:	90 32       	cpi	r25, 0x20	; 32
 b3a:	01 f3       	breq	.-64     	; 0xafc <at24cxx_n_read+0x22>
 b3c:	98 33       	cpi	r25, 0x38	; 56
 b3e:	09 f3       	breq	.-62     	; 0xb02 <at24cxx_n_read+0x28>
 b40:	98 31       	cpi	r25, 0x18	; 24
 b42:	09 f0       	breq	.+2      	; 0xb46 <at24cxx_n_read+0x6c>
 b44:	49 c0       	rjmp	.+146    	; 0xbd8 <at24cxx_n_read+0xfe>
		case TW_MT_ARB_LOST: // re-arbitrate
			goto begin;
		default:
			goto error; // must send stop condition
	}
	if(ee_type > AT24C16)
 b46:	e1 15       	cp	r30, r1
 b48:	88 e0       	ldi	r24, 0x08	; 8
 b4a:	f8 07       	cpc	r31, r24
 b4c:	88 f0       	brcs	.+34     	; 0xb70 <at24cxx_n_read+0x96>
	{
		TWDR = (read_addr >> 8); // 16-bit word address device, send high 8 bits of addr
 b4e:	50 93 bb 00 	sts	0x00BB, r21	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		i2c_send();
 b52:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		i2c_wait();
 b56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 b5a:	87 ff       	sbrs	r24, 7
 b5c:	fc cf       	rjmp	.-8      	; 0xb56 <at24cxx_n_read+0x7c>
		switch(TW_STATUS)
 b5e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 b62:	98 7f       	andi	r25, 0xF8	; 248
 b64:	90 33       	cpi	r25, 0x30	; 48
 b66:	d9 f1       	breq	.+118    	; 0xbde <at24cxx_n_read+0x104>
 b68:	98 33       	cpi	r25, 0x38	; 56
 b6a:	59 f2       	breq	.-106    	; 0xb02 <at24cxx_n_read+0x28>
 b6c:	98 32       	cpi	r25, 0x28	; 40
 b6e:	a1 f5       	brne	.+104    	; 0xbd8 <at24cxx_n_read+0xfe>
				goto begin;
			default:
				goto error; // must send stop condition
		}
	}
	TWDR = read_addr; // low 8 bits of addr
 b70:	40 93 bb 00 	sts	0x00BB, r20	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	i2c_send();
 b74:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 b78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 b7c:	87 ff       	sbrs	r24, 7
 b7e:	fc cf       	rjmp	.-8      	; 0xb78 <at24cxx_n_read+0x9e>
	switch(TW_STATUS)
 b80:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 b84:	98 7f       	andi	r25, 0xF8	; 248
 b86:	90 33       	cpi	r25, 0x30	; 48
 b88:	51 f1       	breq	.+84     	; 0xbde <at24cxx_n_read+0x104>
 b8a:	98 33       	cpi	r25, 0x38	; 56
 b8c:	09 f4       	brne	.+2      	; 0xb90 <at24cxx_n_read+0xb6>
 b8e:	b9 cf       	rjmp	.-142    	; 0xb02 <at24cxx_n_read+0x28>
 b90:	98 32       	cpi	r25, 0x28	; 40
 b92:	11 f5       	brne	.+68     	; 0xbd8 <at24cxx_n_read+0xfe>
		case TW_MT_ARB_LOST:
			goto begin;
		default:
			goto error;
	}
	i2c_start();
 b94:	b0 93 bc 00 	sts	0x00BC, r27	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 b98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 b9c:	87 ff       	sbrs	r24, 7
 b9e:	fc cf       	rjmp	.-8      	; 0xb98 <at24cxx_n_read+0xbe>
	switch(TW_STATUS)
 ba0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 ba4:	98 7f       	andi	r25, 0xF8	; 248
 ba6:	90 31       	cpi	r25, 0x10	; 16
 ba8:	29 f0       	breq	.+10     	; 0xbb4 <at24cxx_n_read+0xda>
 baa:	98 33       	cpi	r25, 0x38	; 56
 bac:	09 f4       	brne	.+2      	; 0xbb0 <at24cxx_n_read+0xd6>
 bae:	a9 cf       	rjmp	.-174    	; 0xb02 <at24cxx_n_read+0x28>
 bb0:	98 30       	cpi	r25, 0x08	; 8
 bb2:	91 f4       	brne	.+36     	; 0xbd8 <at24cxx_n_read+0xfe>
		case TW_MT_ARB_LOST:
			goto begin;
		default:
			goto error;
	}
	TWDR = sla | TW_READ;
 bb4:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	i2c_send();
 bb8:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
 bbc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 bc0:	87 ff       	sbrs	r24, 7
 bc2:	fc cf       	rjmp	.-8      	; 0xbbc <at24cxx_n_read+0xe2>
	switch(TW_STATUS)
 bc4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 bc8:	98 7f       	andi	r25, 0xF8	; 248
 bca:	90 34       	cpi	r25, 0x40	; 64
 bcc:	89 f0       	breq	.+34     	; 0xbf0 <at24cxx_n_read+0x116>
 bce:	98 34       	cpi	r25, 0x48	; 72
 bd0:	31 f0       	breq	.+12     	; 0xbde <at24cxx_n_read+0x104>
 bd2:	98 33       	cpi	r25, 0x38	; 56
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <at24cxx_n_read+0xfe>
 bd6:	95 cf       	rjmp	.-214    	; 0xb02 <at24cxx_n_read+0x28>
	}
	quit: // Note[14]
	i2c_stop();
	return res;
	error:
	res = -1;
 bd8:	8f ef       	ldi	r24, 0xFF	; 255
 bda:	9f ef       	ldi	r25, 0xFF	; 255
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <at24cxx_n_read+0x108>

// sequential read, no max number to read restriction
int at24cxx_n_read(uint16_t ee_type, uint8_t hard_addr, uint16_t read_addr, int len, uint8_t *buffer)
{
	uint8_t sla, n = 0;
	int res = 0;
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	80 e0       	ldi	r24, 0x00	; 0
			default:
				goto error;
		}
	}
	quit: // Note[14]
	i2c_stop();
 be2:	24 e9       	ldi	r18, 0x94	; 148
 be4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return res;
	error:
	res = -1;
	goto quit;
}
 be8:	cf 91       	pop	r28
 bea:	1f 91       	pop	r17
 bec:	0f 91       	pop	r16
 bee:	08 95       	ret
 bf0:	f8 01       	movw	r30, r16

// sequential read, no max number to read restriction
int at24cxx_n_read(uint16_t ee_type, uint8_t hard_addr, uint16_t read_addr, int len, uint8_t *buffer)
{
	uint8_t sla, n = 0;
	int res = 0;
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	80 e0       	ldi	r24, 0x00	; 0
	for(; len > 0; len--) // Note[13]
	{
		if(len == 1)
			i2c_send_nack(); // master send nack
		else
			i2c_send_ack(); // master send ack
 bf6:	54 ec       	ldi	r21, 0xC4	; 196
			goto error;
	} // after send (sla | TW_READ) to slave, and the status is TW_MR_SLA_ACK, then the TWDR contains the data from slave
	for(; len > 0; len--) // Note[13]
	{
		if(len == 1)
			i2c_send_nack(); // master send nack
 bf8:	64 e8       	ldi	r22, 0x84	; 132
		case TW_MR_ARB_LOST:
			goto begin;
		default:
			goto error;
	} // after send (sla | TW_READ) to slave, and the status is TW_MR_SLA_ACK, then the TWDR contains the data from slave
	for(; len > 0; len--) // Note[13]
 bfa:	12 16       	cp	r1, r18
 bfc:	13 06       	cpc	r1, r19
 bfe:	8c f7       	brge	.-30     	; 0xbe2 <at24cxx_n_read+0x108>
	{
		if(len == 1)
 c00:	21 30       	cpi	r18, 0x01	; 1
 c02:	31 05       	cpc	r19, r1
 c04:	d9 f4       	brne	.+54     	; 0xc3c <at24cxx_n_read+0x162>
			i2c_send_nack(); // master send nack
 c06:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		else
			i2c_send_ack(); // master send ack
		i2c_wait();
 c0a:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 c0e:	47 ff       	sbrs	r20, 7
 c10:	fc cf       	rjmp	.-8      	; 0xc0a <at24cxx_n_read+0x130>
		switch(TW_STATUS)
 c12:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 c16:	48 7f       	andi	r20, 0xF8	; 248
 c18:	40 35       	cpi	r20, 0x50	; 80
 c1a:	21 f0       	breq	.+8      	; 0xc24 <at24cxx_n_read+0x14a>
 c1c:	48 35       	cpi	r20, 0x58	; 88
 c1e:	e1 f6       	brne	.-72     	; 0xbd8 <at24cxx_n_read+0xfe>
		{
			case TW_MR_DATA_NACK:
				len = 0; // force end of loop
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	20 e0       	ldi	r18, 0x00	; 0
			case TW_MR_DATA_ACK:
				*buffer++ = TWDR;
 c24:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 c28:	41 93       	st	Z+, r20
				res++;
 c2a:	01 96       	adiw	r24, 0x01	; 1
				if(TW_STATUS == TW_MR_DATA_NACK)
 c2c:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 c30:	48 7f       	andi	r20, 0xF8	; 248
 c32:	48 35       	cpi	r20, 0x58	; 88
 c34:	b1 f2       	breq	.-84     	; 0xbe2 <at24cxx_n_read+0x108>
		case TW_MR_ARB_LOST:
			goto begin;
		default:
			goto error;
	} // after send (sla | TW_READ) to slave, and the status is TW_MR_SLA_ACK, then the TWDR contains the data from slave
	for(; len > 0; len--) // Note[13]
 c36:	21 50       	subi	r18, 0x01	; 1
 c38:	31 09       	sbc	r19, r1
 c3a:	df cf       	rjmp	.-66     	; 0xbfa <at24cxx_n_read+0x120>
	{
		if(len == 1)
			i2c_send_nack(); // master send nack
		else
			i2c_send_ack(); // master send ack
 c3c:	50 93 bc 00 	sts	0x00BC, r21	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 c40:	e4 cf       	rjmp	.-56     	; 0xc0a <at24cxx_n_read+0x130>
		case TW_START:
			break;
		case TW_MT_ARB_LOST: // Note[9]
			goto begin;
		default:
			return -1; // not in start condition, do not send stop condition
 c42:	8f ef       	ldi	r24, 0xFF	; 255
 c44:	9f ef       	ldi	r25, 0xFF	; 255
 c46:	d0 cf       	rjmp	.-96     	; 0xbe8 <at24cxx_n_read+0x10e>

00000c48 <main>:
#include "functions.h"

uint8_t a[11] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
uint8_t b[11];
int main(void) 
{
 c48:	ef 92       	push	r14
 c4a:	ff 92       	push	r15
 c4c:	0f 93       	push	r16
 c4e:	1f 93       	push	r17
 c50:	cf 93       	push	r28
 c52:	df 93       	push	r29
    int n, m;
    avr_uart_init();
 c54:	0e 94 bc 00 	call	0x178	; 0x178 <avr_uart_init>
    at24cxx_init();
 c58:	0e 94 58 03 	call	0x6b0	; 0x6b0 <at24cxx_init>
    xprintf("at24c02: \n");
 c5c:	85 e3       	ldi	r24, 0x35	; 53
 c5e:	91 e0       	ldi	r25, 0x01	; 1
 c60:	9f 93       	push	r25
 c62:	8f 93       	push	r24
 c64:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    n = at24cxx_n_write(AT24C02, AT24CXX_ADDR(A2, A1, A0), 0, 11, a);
 c68:	0a e2       	ldi	r16, 0x2A	; 42
 c6a:	11 e0       	ldi	r17, 0x01	; 1
 c6c:	2b e0       	ldi	r18, 0x0B	; 11
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	50 e0       	ldi	r21, 0x00	; 0
 c72:	40 e0       	ldi	r20, 0x00	; 0
 c74:	60 ea       	ldi	r22, 0xA0	; 160
 c76:	8f ef       	ldi	r24, 0xFF	; 255
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	0e 94 ab 04 	call	0x956	; 0x956 <at24cxx_n_write>
    xprintf("%d\n", n);
 c7e:	9f 93       	push	r25
 c80:	8f 93       	push	r24
 c82:	c0 e4       	ldi	r28, 0x40	; 64
 c84:	d1 e0       	ldi	r29, 0x01	; 1
 c86:	df 93       	push	r29
 c88:	cf 93       	push	r28
 c8a:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    m = at24cxx_n_read(AT24C02, AT24CXX_ADDR(A2, A1, A0), 0, 11, b);
 c8e:	08 e5       	ldi	r16, 0x58	; 88
 c90:	11 e0       	ldi	r17, 0x01	; 1
 c92:	2b e0       	ldi	r18, 0x0B	; 11
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	50 e0       	ldi	r21, 0x00	; 0
 c98:	40 e0       	ldi	r20, 0x00	; 0
 c9a:	60 ea       	ldi	r22, 0xA0	; 160
 c9c:	8f ef       	ldi	r24, 0xFF	; 255
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	0e 94 6d 05 	call	0xada	; 0xada <at24cxx_n_read>
    xprintf("%d\n", m);
 ca4:	9f 93       	push	r25
 ca6:	8f 93       	push	r24
 ca8:	df 93       	push	r29
 caa:	cf 93       	push	r28
 cac:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
 cb0:	78 01       	movw	r14, r16
 cb2:	8d b7       	in	r24, 0x3d	; 61
 cb4:	9e b7       	in	r25, 0x3e	; 62
 cb6:	0a 96       	adiw	r24, 0x0a	; 10
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	f8 94       	cli
 cbc:	9e bf       	out	0x3e, r25	; 62
 cbe:	0f be       	out	0x3f, r0	; 63
 cc0:	8d bf       	out	0x3d, r24	; 61
 cc2:	e8 01       	movw	r28, r16
    for(int i = 0; i < 11; i++)
    {
        xprintf("%d ", b[i]);
 cc4:	04 e4       	ldi	r16, 0x44	; 68
 cc6:	11 e0       	ldi	r17, 0x01	; 1
 cc8:	89 91       	ld	r24, Y+
 cca:	1f 92       	push	r1
 ccc:	8f 93       	push	r24
 cce:	1f 93       	push	r17
 cd0:	0f 93       	push	r16
 cd2:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    xprintf("at24c02: \n");
    n = at24cxx_n_write(AT24C02, AT24CXX_ADDR(A2, A1, A0), 0, 11, a);
    xprintf("%d\n", n);
    m = at24cxx_n_read(AT24C02, AT24CXX_ADDR(A2, A1, A0), 0, 11, b);
    xprintf("%d\n", m);
    for(int i = 0; i < 11; i++)
 cd6:	0f 90       	pop	r0
 cd8:	0f 90       	pop	r0
 cda:	0f 90       	pop	r0
 cdc:	0f 90       	pop	r0
 cde:	91 e0       	ldi	r25, 0x01	; 1
 ce0:	c3 36       	cpi	r28, 0x63	; 99
 ce2:	d9 07       	cpc	r29, r25
 ce4:	89 f7       	brne	.-30     	; 0xcc8 <main+0x80>
    {
        xprintf("%d ", b[i]);
    }
    xprintf("\n");
 ce6:	8e e3       	ldi	r24, 0x3E	; 62
 ce8:	91 e0       	ldi	r25, 0x01	; 1
 cea:	9f 93       	push	r25
 cec:	8f 93       	push	r24
 cee:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    xprintf("at24c32: \n");
 cf2:	88 e4       	ldi	r24, 0x48	; 72
 cf4:	91 e0       	ldi	r25, 0x01	; 1
 cf6:	9f 93       	push	r25
 cf8:	8f 93       	push	r24
 cfa:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    n = at24cxx_n_write(AT24C32, AT24CXX_ADDR(A2, A1, !A0), 0, 11, a);
 cfe:	0a e2       	ldi	r16, 0x2A	; 42
 d00:	11 e0       	ldi	r17, 0x01	; 1
 d02:	2b e0       	ldi	r18, 0x0B	; 11
 d04:	30 e0       	ldi	r19, 0x00	; 0
 d06:	50 e0       	ldi	r21, 0x00	; 0
 d08:	40 e0       	ldi	r20, 0x00	; 0
 d0a:	62 ea       	ldi	r22, 0xA2	; 162
 d0c:	8f ef       	ldi	r24, 0xFF	; 255
 d0e:	9f e0       	ldi	r25, 0x0F	; 15
 d10:	0e 94 ab 04 	call	0x956	; 0x956 <at24cxx_n_write>
    xprintf("%d\n", n);
 d14:	9f 93       	push	r25
 d16:	8f 93       	push	r24
 d18:	c0 e4       	ldi	r28, 0x40	; 64
 d1a:	d1 e0       	ldi	r29, 0x01	; 1
 d1c:	df 93       	push	r29
 d1e:	cf 93       	push	r28
 d20:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    m = at24cxx_n_read(AT24C32, AT24CXX_ADDR(A2, A1, !A0), 0, 11, b);
 d24:	08 e5       	ldi	r16, 0x58	; 88
 d26:	11 e0       	ldi	r17, 0x01	; 1
 d28:	2b e0       	ldi	r18, 0x0B	; 11
 d2a:	30 e0       	ldi	r19, 0x00	; 0
 d2c:	50 e0       	ldi	r21, 0x00	; 0
 d2e:	40 e0       	ldi	r20, 0x00	; 0
 d30:	62 ea       	ldi	r22, 0xA2	; 162
 d32:	8f ef       	ldi	r24, 0xFF	; 255
 d34:	9f e0       	ldi	r25, 0x0F	; 15
 d36:	0e 94 6d 05 	call	0xada	; 0xada <at24cxx_n_read>
    xprintf("%d\n", m);
 d3a:	9f 93       	push	r25
 d3c:	8f 93       	push	r24
 d3e:	df 93       	push	r29
 d40:	cf 93       	push	r28
 d42:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
 d46:	ed b7       	in	r30, 0x3d	; 61
 d48:	fe b7       	in	r31, 0x3e	; 62
 d4a:	3c 96       	adiw	r30, 0x0c	; 12
 d4c:	0f b6       	in	r0, 0x3f	; 63
 d4e:	f8 94       	cli
 d50:	fe bf       	out	0x3e, r31	; 62
 d52:	0f be       	out	0x3f, r0	; 63
 d54:	ed bf       	out	0x3d, r30	; 61
    for(int i = 0; i < 11; i++)
    {
        xprintf("%d ", b[i]);
 d56:	c4 e4       	ldi	r28, 0x44	; 68
 d58:	d1 e0       	ldi	r29, 0x01	; 1
 d5a:	f7 01       	movw	r30, r14
 d5c:	81 91       	ld	r24, Z+
 d5e:	7f 01       	movw	r14, r30
 d60:	1f 92       	push	r1
 d62:	8f 93       	push	r24
 d64:	df 93       	push	r29
 d66:	cf 93       	push	r28
 d68:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    xprintf("at24c32: \n");
    n = at24cxx_n_write(AT24C32, AT24CXX_ADDR(A2, A1, !A0), 0, 11, a);
    xprintf("%d\n", n);
    m = at24cxx_n_read(AT24C32, AT24CXX_ADDR(A2, A1, !A0), 0, 11, b);
    xprintf("%d\n", m);
    for(int i = 0; i < 11; i++)
 d6c:	0f 90       	pop	r0
 d6e:	0f 90       	pop	r0
 d70:	0f 90       	pop	r0
 d72:	0f 90       	pop	r0
 d74:	93 e6       	ldi	r25, 0x63	; 99
 d76:	e9 16       	cp	r14, r25
 d78:	91 e0       	ldi	r25, 0x01	; 1
 d7a:	f9 06       	cpc	r15, r25
 d7c:	71 f7       	brne	.-36     	; 0xd5a <main+0x112>
    {
        xprintf("%d ", b[i]);
    }
    xprintf("\n");
 d7e:	8e e3       	ldi	r24, 0x3E	; 62
 d80:	91 e0       	ldi	r25, 0x01	; 1
 d82:	9f 93       	push	r25
 d84:	8f 93       	push	r24
 d86:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
    return 0;
 d8a:	0f 90       	pop	r0
 d8c:	0f 90       	pop	r0
}
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	80 e0       	ldi	r24, 0x00	; 0
 d92:	df 91       	pop	r29
 d94:	cf 91       	pop	r28
 d96:	1f 91       	pop	r17
 d98:	0f 91       	pop	r16
 d9a:	ff 90       	pop	r15
 d9c:	ef 90       	pop	r14
 d9e:	08 95       	ret

00000da0 <__udivmodsi4>:
 da0:	a1 e2       	ldi	r26, 0x21	; 33
 da2:	1a 2e       	mov	r1, r26
 da4:	aa 1b       	sub	r26, r26
 da6:	bb 1b       	sub	r27, r27
 da8:	fd 01       	movw	r30, r26
 daa:	0d c0       	rjmp	.+26     	; 0xdc6 <__udivmodsi4_ep>

00000dac <__udivmodsi4_loop>:
 dac:	aa 1f       	adc	r26, r26
 dae:	bb 1f       	adc	r27, r27
 db0:	ee 1f       	adc	r30, r30
 db2:	ff 1f       	adc	r31, r31
 db4:	a2 17       	cp	r26, r18
 db6:	b3 07       	cpc	r27, r19
 db8:	e4 07       	cpc	r30, r20
 dba:	f5 07       	cpc	r31, r21
 dbc:	20 f0       	brcs	.+8      	; 0xdc6 <__udivmodsi4_ep>
 dbe:	a2 1b       	sub	r26, r18
 dc0:	b3 0b       	sbc	r27, r19
 dc2:	e4 0b       	sbc	r30, r20
 dc4:	f5 0b       	sbc	r31, r21

00000dc6 <__udivmodsi4_ep>:
 dc6:	66 1f       	adc	r22, r22
 dc8:	77 1f       	adc	r23, r23
 dca:	88 1f       	adc	r24, r24
 dcc:	99 1f       	adc	r25, r25
 dce:	1a 94       	dec	r1
 dd0:	69 f7       	brne	.-38     	; 0xdac <__udivmodsi4_loop>
 dd2:	60 95       	com	r22
 dd4:	70 95       	com	r23
 dd6:	80 95       	com	r24
 dd8:	90 95       	com	r25
 dda:	9b 01       	movw	r18, r22
 ddc:	ac 01       	movw	r20, r24
 dde:	bd 01       	movw	r22, r26
 de0:	cf 01       	movw	r24, r30
 de2:	08 95       	ret

00000de4 <strlen>:
 de4:	fc 01       	movw	r30, r24
 de6:	01 90       	ld	r0, Z+
 de8:	00 20       	and	r0, r0
 dea:	e9 f7       	brne	.-6      	; 0xde6 <strlen+0x2>
 dec:	80 95       	com	r24
 dee:	90 95       	com	r25
 df0:	8e 0f       	add	r24, r30
 df2:	9f 1f       	adc	r25, r31
 df4:	08 95       	ret

00000df6 <_exit>:
 df6:	f8 94       	cli

00000df8 <__stop_program>:
 df8:	ff cf       	rjmp	.-2      	; 0xdf8 <__stop_program>
