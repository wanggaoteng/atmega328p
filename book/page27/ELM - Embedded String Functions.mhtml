From: <Saved by Blink>
Snapshot-Content-Location: http://elm-chan.org/fsw/strf/xprintf.html
Subject: ELM - Embedded String Functions
Date: Sat, 27 May 2023 09:45:23 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--s0ajSBQD3dnmVGD00JpiEte8u7O9IOp2sIPToDksi6----"


------MultipartBoundary--s0ajSBQD3dnmVGD00JpiEte8u7O9IOp2sIPToDksi6----
Content-Type: text/html
Content-ID: <frame-2BD441BFBB164BF5FC3C949D5C2DD3B7@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://elm-chan.org/fsw/strf/xprintf.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/htm=
l4/strict.dtd"><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">

<meta http-equiv=3D"Content-Style-Type" content=3D"text/css">
<link rel=3D"alternate" hreflang=3D"ja" title=3D"Japanese" href=3D"http://e=
lm-chan.org/fsw/strf/xprintf_j.html">
<link rel=3D"start" title=3D"Site Top" href=3D"http://elm-chan.org/">
<link rel=3D"up" title=3D"Freewares" href=3D"http://elm-chan.org/fsw_e.html=
">
<link rel=3D"stylesheet" href=3D"http://elm-chan.org/fsw/strf/css_e.css" ty=
pe=3D"text/css" media=3D"screen" title=3D"ELM Default">
<title>ELM - Embedded String Functions</title>
</head>

<body>
<h1>xprintf - Embedded String Functions</h1>
<hr>

<div class=3D"abst">
<p>xprintf is a compact string I/O library. It is ideal for tiny microcontr=
ollers that has insufficient program memory for regular printf function. Th=
e recommended use is: writing formatted strings into LCD or UART and for de=
bug/maintenance console.</p>
<p>xprintf can be configured with configuration options to reduce the modul=
e size. Following table shows the example of code size in Cortex-M3 (gcc -O=
s). long long and float want C99 or later.</p>
<table class=3D"lst1">
<tbody><tr><th>Feature</th><th>.text</th></tr>
<tr><td>Basic output</td><td>789</td></tr>
<tr><td>long long integer</td><td>+91</td></tr>
<tr><td>Floating point</td><td>+1027</td></tr>
<tr><td>Input</td><td>+238</td></tr>
</tbody></table>
</div>

<div class=3D"para">
<h3>Application Interface</h3>
<p>The Embedded String Functions provides following functions.</p>
<h4>Output</h4>
<pre><span class=3D"c">/*----------------------------------------------/
/  xputc - Put a character
/----------------------------------------------*/</span>

void xputc (
    int <span class=3D"arg">chr</span>           <span class=3D"c">/* A cha=
racter to be output (0-255) */</span>
);

void xfputc (
    void(*<span class=3D"arg">func</span>)(int), <span class=3D"c">/* Point=
er to the output function */</span>
    int <span class=3D"arg">chr</span>           <span class=3D"c">/* Chara=
cter to be output (0-255) */</span>
);
</pre>
<pre><span class=3D"c">/*----------------------------------------------/
/  xputs - Put a null-terminated string
/----------------------------------------------*/</span>

void xputs (
    const char* <span class=3D"arg">str</span>   <span class=3D"c">/* Point=
er to the null-terminated string to be output */</span>
);

void xfputs (
    void(*<span class=3D"arg">func</span>)(int), <span class=3D"c">/* Point=
er to the output function */</span>
    const char* <span class=3D"arg">str</span>   <span class=3D"c">/* Point=
er to the null-terminated string to be output */</span>
);
</pre>
<pre><span class=3D"c">/*----------------------------------------------/
/  xprintf - Formatted string output
/----------------------------------------------*/</span>

void xprintf (        <span class=3D"c">/* Put a formatted string to the de=
fault device */</span>
    const char* <span class=3D"arg">fmt</span>,  <span class=3D"c">/* Point=
er to the null-terminated format string */</span>
    ...               <span class=3D"c">/* Optional arguments... */</span>
);

void xfprintf (       <span class=3D"c">/* Put a formatted string to the sp=
ecified device */</span>
    void(*<span class=3D"arg">func</span>)(int), <span class=3D"c">/* Point=
er to the output function */</span>
    const char* <span class=3D"arg">fmt</span>,  <span class=3D"c">/* Point=
er to the null-terminated format string */</span>
    ...               <span class=3D"c">/* Optional arguments... */</span>
);

void xsprintf (       <span class=3D"c">/* Put a formatted string to the me=
mory */</span>
    char* <span class=3D"arg">buff</span>,       <span class=3D"c">/* Point=
er to the buffer to store output string */</span>
    const char* <span class=3D"arg">fmt</span>,  <span class=3D"c">/* Point=
er to the null-terminated format string */</span>
    ...               <span class=3D"c">/* Optional arguments... */</span>
);
</pre>
<pre><span class=3D"c">/*----------------------------------------------/
/  put_dump - Put a line of binary dump
/----------------------------------------------*/</span>

void put_dump (
    const void* <span class=3D"arg">buff</span>,   <span class=3D"c">/* Poi=
nter to the data to be displayed */</span>
    unsigned long <span class=3D"arg">adr</span>,  <span class=3D"c">/* Hea=
ding address */</span>
    int <span class=3D"arg">cnt</span>,            <span class=3D"c">/* Num=
ber of items to be displayed */</span>
    int <span class=3D"arg">width</span>           <span class=3D"c">/* Siz=
e of item (1, 2 or 4) */</span>
);
</pre>
<p>
The format control directive is a sub-set of standard library shown as foll=
ows:
</p>
<pre>    %[flag][width][precision][size]type
</pre>
<dl>
<dt>flag</dt><dd>Padding options. A <tt>-</tt> specifies left-aligned. A <t=
t>0</tt> specifies zero padded. The default setting is in right-aligned and=
 space padded.</dd>
<dt>width</dt><dd>Minimum width of the field, <tt>1-99</tt> or <tt>*</tt>. =
If the width of generated string is less than the specified value, rest fie=
ld is padded with spaces or zeros. An <tt>*</tt> specifies the value comes =
from an argument in int type.</dd>
<dt>precision</dt><dd>Specifies number of fractional digits or maximum widt=
h of string, <tt>.0-.99</tt> or <tt>.*</tt>. If number is omitted, it will =
be same as <tt>.0</tt>. Default setting is 6 for number and no limit for st=
ring.</dd>
<dt>size</dt><dd>Specifies size of integer argument, <tt>l</tt>(long) and <=
tt>ll</tt>(long long). If <tt>sizeof (long) =3D=3D sizeof (int)</tt> is tru=
e (this is typical of 32-bit systems), prefix <tt>l</tt> can be omitted for=
 long integer argument. The default size is int for integer arrument and fl=
oating point argument is always assumed double.</dd>
<dt>type</dt><dd>Specifies type of the output format and the argument as sh=
own below. The length of generated string is in assumtion of int is 32-bit.
<table class=3D"lst1">
<tbody><tr><th>Type</th><th>Format</th><th>Argument</th><th>Length</th></tr=
>
<tr><td><tt>d</tt></td><td>Signed&nbsp;decimal</td><td rowspan=3D"5"><tt>in=
t</tt>,<br><tt>long</tt>,<br><tt>long&nbsp;long</tt></td><td>1 to 11 (20 fo=
r ll) characters.</td></tr>
<tr><td><tt>u</tt></td><td>Unsigned&nbsp;decimal</td><td>1 to 10 (20 for ll=
) characters.</td></tr>
<tr><td><tt>o</tt></td><td>Unsigned&nbsp;octal</td><td>1 to 11 (22 for ll) =
characters.</td></tr>
<tr><td><tt>x X</tt></td><td>Unsigned&nbsp;hexdecimal</td><td>1 to 8 (16 fo=
r ll) characters.</td></tr>
<tr><td><tt>b</tt></td><td>Unsigned&nbsp;binary</td><td>1 to 32 characters.=
 Limited to lower 32 digits when ll is specified.</td></tr>
<tr><td><tt>c</tt></td><td>Character</td><td><tt>int</tt></td><td>1 charact=
er.</td></tr>
<tr><td><tt>s</tt></td><td>String</td><td><tt>char*</tt></td><td>As input s=
tring. If the maximum length of input string is unkown, precision should be=
 specified to avoid output buffer overflow. Null pointer generates a null s=
tring.</td></tr>
<tr><td><tt>f</tt></td><td>Floating point<br>(decimal)</td><td rowspan=3D"2=
"><tt>double</tt></td><td>1 to 31 characters. If the number of characters e=
xceeds 31, it generates <tt>"=C2=B1OV"</tt>. Not a number and infinite gene=
rate <tt>"NaN"</tt> and <tt>"=C2=B1INF"</tt>.</td></tr>
<tr><td><tt>e E</tt></td><td>Floating point<br>(e notation)</td><td>4 to 31=
 characters. If the number of characters exceeds 31 or exponent exceeds +99=
, it generates <tt>"=C2=B1OV"</tt>.</td></tr>
</tbody></table>
</dd>
</dl>
<pre>Examples:
    xprintf("%d", 1234);             <span class=3D"c">/* "1234" */</span>
    xprintf("%6d,%3d%%", -200, 5);   <span class=3D"c">/* "  -200,  5%" */<=
/span>
    xprintf("%-6u", 100);            <span class=3D"c">/* "100   " */</span=
>
    xprintf("%ld", 12345678);        <span class=3D"c">/* "12345678" */</sp=
an>
    xprintf("%llu", 0x100000000);    <span class=3D"c">/* "4294967296"   &l=
t;XF_USE_LLI&gt; */</span>
    xprintf("%lld", -1LL);           <span class=3D"c">/* "-1"           &l=
t;XF_USE_LLI&gt; */</span>
    xprintf("%04x", 0xA3);           <span class=3D"c">/* "00a3" */</span>
    xprintf("%08lX", 0x123ABC);      <span class=3D"c">/* "00123ABC" */</sp=
an>
    xprintf("%016b", 0x550F);        <span class=3D"c">/* "0101010100001111=
" */</span>
    xprintf("%*d", 6, 100);          <span class=3D"c">/* "   100" */</span=
>
    xprintf("%s", "abcdefg");        <span class=3D"c">/* "abcdefg" */</spa=
n>
    xprintf("%5s", "abc");           <span class=3D"c">/* "  abc" */</span>
    xprintf("%-5s", "abc");          <span class=3D"c">/* "abc  " */</span>
    xprintf("%.5s", "abcdefg");      <span class=3D"c">/* "abcde" */</span>
    xprintf("%-5.2s", "abcdefg");    <span class=3D"c">/* "ab   " */</span>
    xprintf("%c", 'a');              <span class=3D"c">/* "a" */</span>
    xprintf("%12f", 10.0);           <span class=3D"c">/* "   10.000000" &l=
t;XF_USE_FP&gt; */</span>
    xprintf("%.4E", 123.45678);      <span class=3D"c">/* "1.2346E+02"   &l=
t;XF_USE_FP&gt; */</span>
</pre>



<h4>Input</h4>
<pre><span class=3D"c">/*----------------------------------------------/
/  xgets - Get a line from the input device
/----------------------------------------------*/</span>

int xgets (     <span class=3D"c">/* 0:End of stream, 1:A line arrived */</=
span>
    char* <span class=3D"arg">buff</span>, <span class=3D"c">/* Pointer to =
the buffer to input */</span>
    int <span class=3D"arg">len</span>     <span class=3D"c">/* Buffer leng=
th */</span>
);
</pre>
<pre><span class=3D"c">/*----------------------------------------------/
/  xatoi - Get a value of integer string
/----------------------------------------------*/
/* "123 -5    0x3ff 0b1111 0377 1.5 "
       ^                            1st call returns 123 and next ptr
          ^                         2nd call returns -5 and next ptr
                   ^                3rd call returns 1023 and next ptr
                          ^         4th call returns 15 and next ptr
                               ^    5th call returns 255 and next ptr
                                 ^  6th call fails and returns 0
*/</span>

int xatoi (      <span class=3D"c">/* 0:Failed, 1:Succeeded */</span>
    char** <span class=3D"arg">str</span>,  <span class=3D"c">/* Pointer to=
 pointer to the string */</span>
    long* <span class=3D"arg">res</span>    <span class=3D"c">/* Pointer to=
 the valiable to store the value */</span>
);
</pre>
<pre><span class=3D"c">/*----------------------------------------------/
/  xatof - Get a value of floating point string
/----------------------------------------------*/
/* "123 -5.75 .6   +8.88E+5 1e-6  .  "
       ^                              1st call returns 1.23e2 and next ptr
             ^                        2nd call returns -5.75e0 and next ptr
                ^                     3rd call returns 6e-1 and next ptr
                           ^          4th call returns 8.88e5 and next ptr
                                ^     5th call returns 1e-6 and next ptr
                                   ^  6th call fails and returns 0
*/</span>

int xatof (      <span class=3D"c">/* 0:Failed, 1:Succeded */</span>
    char** <span class=3D"arg">str</span>,  <span class=3D"c">/* Pointer to=
 pointer to the string */</span>
    double* <span class=3D"arg">res</span>  <span class=3D"c">/* Pointer to=
 the valiable to store the value */</span>
);
</pre>

</div>


<div class=3D"para">
<h3>Device I/O functions</h3>
<p>The output function is a user provided call-back function to write a byt=
e to the output device. Its address should be set to the function pointer <=
tt><em>xfunc_output</em></tt> in the module, default output device. Typical=
ly, this function puts the byte to UART, LCD or some output device. The out=
put function is called-back from <tt>xputc()</tt>. There is a macro to set =
it easy. For example, when attach <tt>void uart1_putc (uint8_t chr);</tt> t=
o the module, <tt>xdev_out(uart1_putc);</tt> will do. If the output functio=
n has multiple arguments or simple output function is not available, a glue=
 function will be needed. <tt>xfputc()</tt>, <tt>xfputs()</tt>, <tt>xfprint=
f()</tt> and <tt>xsprintf()</tt> override the default output device with it=
s argument.</p>
<p>The input function is a user provided call-back function to read a byte =
from the input device. Its address should be set to the function pointer <t=
t><em>xfunc_input</em></tt>, default input device. There is a macro <tt>xde=
v_in()</tt> to set it easy. e.g. <tt>xdev_in(uart1_getc);</tt> The <tt>xfge=
ts()</tt> function override the default input device with its argument. The=
 input function is called-back from the <tt>xgets()</tt> function. Typicall=
y, input function reads a byte from input device or file. When the input de=
vice reported end of stream, the input function should return -1. The <tt>x=
gets()</tt> function aborts with zero and the application will able to dete=
ct it.</p>
<pre><span class=3D"c">/* Write a byte to the output dechvice */</span>

void output_func (
    int <span class=3D"arg">chr</span>  <span class=3D"c">/* A byte to be w=
ritten */</span>
);
</pre>
<pre><span class=3D"c">/* Read a byte from the input device */</span>

int input_func (void);  <span class=3D"c">/* Returns 0 to 255 as a read cha=
racter, -1 as EOF */</span>
</pre>
</div>


<div class=3D"para">
<h3>Downloads</h3>
<ul>
<li><a href=3D"http://elm-chan.org/fsw/strf/xprintf.zip">Embedded String Fu=
nctions source files</a> <span class=3D"mfd">July 31, 2021</span></li>
<li><a href=3D"http://elm-chan.org/fsw/ff/ffsample.zip">Example to use the =
Embedded String Functions</a></li>
</ul>
</div>


<hr>
<p class=3D"foot"><a href=3D"http://elm-chan.org/fsw.html">Return</a></p>


</body></html>
------MultipartBoundary--s0ajSBQD3dnmVGD00JpiEte8u7O9IOp2sIPToDksi6----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://elm-chan.org/fsw/strf/css_e.css

@charset "utf-8";

* { margin: 0px; padding: 0px; border-width: 0px; }

body { margin: 8px; background-color: rgb(224, 255, 255); font-family: seri=
f; line-height: 133%; max-width: 1024px; }

a:link { color: blue; }

a:visited { color: darkmagenta; }

a:hover { background-color: rgb(160, 255, 255); }

a:active { color: darkmagenta; overflow: hidden; outline: none; position: r=
elative; top: 1px; left: 1px; }

abbr { border-width: 1px; }

p { margin: 0px 0px 0.3em 1em; }

em { font-style: normal; font-weight: bold; margin: 0px 0.1em; }

strong { }

pre { border: 1px dashed gray; margin: 0.5em 1em; padding: 0.5em; line-heig=
ht: 1.2em; font-size: 85%; font-family: Consolas, "Courier New", monospace;=
 background-color: white; }

pre span.c { color: green; }

tt { margin: 0px 0.2em; font-size: 85%; font-family: Consolas, "Courier New=
", monospace; }

ol { margin: 0px 2.5em; }

ul { margin: 0px 2em; }

dl { margin: 0px 1em; }

dt { font-size: 85%; font-family: Consolas, "Courier New", monospace; }

dl.par dt { margin: 0.5em 0px 0px; font-style: italic; }

dl.ret dt { margin: 0.5em 0px 0px; }

dd { margin: 0px 2em; }

hr { border-width: 1px; margin: 1em; }

div.abst { font-family: sans-serif; }

div.para { clear: both; font-family: serif; }

div.ret a { font-size: 85%; font-family: Consolas, "Courier New", monospace=
; }

.equ { text-indent: 0px; margin: 1em 2em; }

.indent { margin-left: 2em; }

.rset { float: right; margin: 0px 0px 0.5em 0.5em; }

.lset { float: left; margin: 0px 0.5em 0.5em; }

ul.flat li { list-style-type: none; margin: 0px; }

a.imglnk img { border: 1px solid; }

.iequ { white-space: nowrap; font-weight: bold; }

.clr { clear: both; }

.arg { font-style: italic; }

.it { font-style: italic; }

.mfd { font-size: 0.7em; padding: 0px 1px; border: 1px solid; white-space: =
nowrap; }

h1 { line-height: 1em; font-size: 2em; font-family: sans-serif; padding: 0.=
3em 0px; }

p.hdd { float: right; text-align: right; margin-top: 0.5em; }

hr.hds { clear: both; margin-bottom: 1em; }

h2 { font-size: 2em; font-family: sans-serif; background-color: rgb(216, 21=
6, 255); padding: 0.5em; margin: 0px 0px 0.5em; }

h3 { font-size: 1.5em; font-family: sans-serif; margin: 1.5em 0px 0.5em; }

h4 { font-size: 1.2em; font-family: sans-serif; margin: 1em 0px 0.2em; }

h5 { font-size: 1em; font-family: sans-serif; margin: 0.5em 0px 0em; }

small { font-size: 80%; }

.indent { margin-left: 2em; }

table { margin: 0.5em 1em; border-collapse: collapse; border: 2px solid bla=
ck; }

th { background-color: white; border-style: solid; border-width: 1px 1px 2p=
x; border-color: black; padding: 0px 3px; vertical-align: top; white-space:=
 nowrap; }

td { background-color: white; border: 1px solid black; padding: 0px 3px; ve=
rtical-align: top; line-height: 1.3em; }

table.lst td:first-child { font-size: 85%; font-family: Consolas, "Courier =
New", monospace; }

table.lst2 td { font-size: 85%; font-family: Consolas, "Courier New", monos=
pace; }

table caption { font-family: sans-serif; font-weight: bold; }

tr.lst3 td { border-width: 2px 1px 1px; }

p.foot { clear: both; text-indent: 0px; margin: 1em 0.5em; }
------MultipartBoundary--s0ajSBQD3dnmVGD00JpiEte8u7O9IOp2sIPToDksi6------
