
output/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000087c  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  0080012c  0080012c  0000093c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b0  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aeb  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a66  00000000  00000000  0000278f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  000031f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001042  00000000  00000000  0000394f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00004991  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 35       	cpi	r26, 0x57	; 87
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <main>
  9e:	0c 94 3c 04 	jmp	0x878	; 0x878 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <avr_uart_putchar>:

	xdev_out(avr_uart_putchar);
}

void avr_uart_putchar(char c, FILE *stream) 
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <avr_uart_putchar+0xe>
        avr_uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <avr_uart_putchar+0xe>
    UDR0 = c;
  bc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <avr_uart_getchar>:

char avr_uart_getchar(FILE *stream) 
{
    loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <avr_uart_getchar>
    return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  d0:	08 95       	ret

000000d2 <avr_uart_getchar_echo>:


char avr_uart_getchar_echo(FILE *stream) 
{
  d2:	cf 93       	push	r28
    loop_until_bit_is_set(UCSR0A, RXC0);
  d4:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	27 ff       	sbrs	r18, 7
  da:	fc cf       	rjmp	.-8      	; 0xd4 <avr_uart_getchar_echo+0x2>
    char c=UDR0;
  dc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    avr_uart_putchar(c, stream);
  e0:	bc 01       	movw	r22, r24
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    return c;
}
  e8:	8c 2f       	mov	r24, r28
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <set_register_bits>:
#include "functions.h"
#include "util/delay_basic.h"

//set_register_bits(&PORTB, 2, PB4, PB5);
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	ef 81       	ldd	r30, Y+7	; 0x07
  fc:	f8 85       	ldd	r31, Y+8	; 0x08
  fe:	49 85       	ldd	r20, Y+9	; 0x09
 100:	5a 85       	ldd	r21, Y+10	; 0x0a
 102:	9e 01       	movw	r18, r28
 104:	25 5f       	subi	r18, 0xF5	; 245
 106:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0x00;
 108:	90 e0       	ldi	r25, 0x00	; 0
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 10a:	80 e0       	ldi	r24, 0x00	; 0
	{
		temp |= _BV( va_arg( pointer, int ) );
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	d9 01       	movw	r26, r18
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 112:	84 17       	cp	r24, r20
 114:	15 06       	cpc	r1, r21
 116:	44 f0       	brlt	.+16     	; 0x128 <set_register_bits+0x3a>
	{
		temp |= _BV( va_arg( pointer, int ) );
	}
	*mcu_register |= temp;
 118:	80 81       	ld	r24, Z
 11a:	89 2b       	or	r24, r25
 11c:	80 83       	st	Z, r24
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret
 128:	2e 5f       	subi	r18, 0xFE	; 254
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
	{
		temp |= _BV( va_arg( pointer, int ) );
 12c:	8b 01       	movw	r16, r22
 12e:	0c 90       	ld	r0, X
 130:	02 c0       	rjmp	.+4      	; 0x136 <set_register_bits+0x48>
 132:	00 0f       	add	r16, r16
 134:	11 1f       	adc	r17, r17
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <set_register_bits+0x44>
 13a:	90 2b       	or	r25, r16
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	e8 cf       	rjmp	.-48     	; 0x110 <set_register_bits+0x22>

00000140 <clear_register_bits>:
	*mcu_register |= temp;
}

//clear_register_bits(&PORTB, 2, PB4, PB5);
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	ef 81       	ldd	r30, Y+7	; 0x07
 14e:	f8 85       	ldd	r31, Y+8	; 0x08
 150:	49 85       	ldd	r20, Y+9	; 0x09
 152:	5a 85       	ldd	r21, Y+10	; 0x0a
 154:	9e 01       	movw	r18, r28
 156:	25 5f       	subi	r18, 0xF5	; 245
 158:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0xff;
 15a:	9f ef       	ldi	r25, 0xFF	; 255
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 15c:	80 e0       	ldi	r24, 0x00	; 0
	{
		temp &= ~_BV( va_arg( pointer, int ) );
 15e:	01 e0       	ldi	r16, 0x01	; 1
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	d9 01       	movw	r26, r18
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 164:	84 17       	cp	r24, r20
 166:	15 06       	cpc	r1, r21
 168:	44 f0       	brlt	.+16     	; 0x17a <clear_register_bits+0x3a>
	{
		temp &= ~_BV( va_arg( pointer, int ) );
	}
	*mcu_register &= temp;
 16a:	80 81       	ld	r24, Z
 16c:	89 23       	and	r24, r25
 16e:	80 83       	st	Z, r24
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret
 17a:	2e 5f       	subi	r18, 0xFE	; 254
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
	{
		temp &= ~_BV( va_arg( pointer, int ) );
 17e:	b8 01       	movw	r22, r16
 180:	0c 90       	ld	r0, X
 182:	02 c0       	rjmp	.+4      	; 0x188 <clear_register_bits+0x48>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <clear_register_bits+0x44>
 18c:	60 95       	com	r22
 18e:	70 95       	com	r23
 190:	96 23       	and	r25, r22
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	e6 cf       	rjmp	.-52     	; 0x162 <clear_register_bits+0x22>

00000196 <delay_ms>:
}

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 19a:	40 ed       	ldi	r20, 0xD0	; 208
 19c:	57 e0       	ldi	r21, 0x07	; 7
 19e:	28 17       	cp	r18, r24
 1a0:	39 07       	cpc	r19, r25
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <delay_ms+0x10>
    {
        _delay_loop_2(2000);//8M, _delay_loop_2(1) is four clock cycle (4/8000000)
    }
}
 1a4:	08 95       	ret
 1a6:	fa 01       	movw	r30, r20
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <delay_ms+0x12>
}

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	f6 cf       	rjmp	.-20     	; 0x19e <delay_ms+0x8>

000001b2 <delay_us>:
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	42 e0       	ldi	r20, 0x02	; 2
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	28 17       	cp	r18, r24
 1bc:	39 07       	cpc	r19, r25
 1be:	09 f4       	brne	.+2      	; 0x1c2 <delay_us+0x10>
    {
        _delay_loop_2(2);
    }
}
 1c0:	08 95       	ret
 1c2:	fa 01       	movw	r30, r20
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <delay_us+0x12>
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	f6 cf       	rjmp	.-20     	; 0x1ba <delay_us+0x8>

000001ce <blink>:
//delay: blink time interval
//n>0,delay>0  normal 
//n=0,delay>0  cycle 
//n=0,delay=0  toggle 
void blink(uint8_t n,uint16_t delay)
{
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	18 2f       	mov	r17, r24
 1d6:	eb 01       	movw	r28, r22
	DDRB |= _BV(PB5);
 1d8:	25 9a       	sbi	0x04, 5	; 4
	if((n>0)&&(delay>0))
 1da:	88 23       	and	r24, r24
 1dc:	81 f0       	breq	.+32     	; 0x1fe <blink+0x30>
 1de:	20 97       	sbiw	r28, 0x00	; 0
 1e0:	51 f0       	breq	.+20     	; 0x1f6 <blink+0x28>
	{
		while(n)
		{

			PORTB |= _BV(PB5);
 1e2:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 1e4:	ce 01       	movw	r24, r28
 1e6:	0e 94 cb 00 	call	0x196	; 0x196 <delay_ms>
			PORTB &= ~_BV(PB5);
 1ea:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 1ec:	ce 01       	movw	r24, r28
 1ee:	0e 94 cb 00 	call	0x196	; 0x196 <delay_ms>
			n--;
 1f2:	11 50       	subi	r17, 0x01	; 1
void blink(uint8_t n,uint16_t delay)
{
	DDRB |= _BV(PB5);
	if((n>0)&&(delay>0))
	{
		while(n)
 1f4:	b1 f7       	brne	.-20     	; 0x1e2 <blink+0x14>
		if(bit_is_set(PINB,PB5))
			PORTB &= ~_BV(PB5);
		else
			PORTB |= _BV(PB5);
	}
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	08 95       	ret
			PORTB &= ~_BV(PB5);
			delay_ms(delay);
			n--;
		}
	}
	else if((n==0)&&(delay>0))
 1fe:	20 97       	sbiw	r28, 0x00	; 0
 200:	49 f0       	breq	.+18     	; 0x214 <blink+0x46>
	{
		while(1)
		{
			PORTB |= _BV(PB5);
 202:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 204:	ce 01       	movw	r24, r28
 206:	0e 94 cb 00 	call	0x196	; 0x196 <delay_ms>
			PORTB &= ~_BV(PB5);
 20a:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 20c:	ce 01       	movw	r24, r28
 20e:	0e 94 cb 00 	call	0x196	; 0x196 <delay_ms>
 212:	f7 cf       	rjmp	.-18     	; 0x202 <blink+0x34>
		}
	}
	else if((n==0)&&(delay==0))
	{
		DDRB |= _BV(PB5);
 214:	25 9a       	sbi	0x04, 5	; 4
		if(bit_is_set(PINB,PB5))
 216:	1d 9b       	sbis	0x03, 5	; 3
 218:	02 c0       	rjmp	.+4      	; 0x21e <blink+0x50>
			PORTB &= ~_BV(PB5);
 21a:	2d 98       	cbi	0x05, 5	; 5
 21c:	ec cf       	rjmp	.-40     	; 0x1f6 <blink+0x28>
		else
			PORTB |= _BV(PB5);
 21e:	2d 9a       	sbi	0x05, 5	; 5
	}
}
 220:	ea cf       	rjmp	.-44     	; 0x1f6 <blink+0x28>

00000222 <avr_uart_init>:
#endif
#include "util/setbaud.h"

void avr_uart_init(void) 
{
    UBRR0H = UBRRH_VALUE;
 222:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = UBRRL_VALUE;
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
 22c:	e0 ec       	ldi	r30, 0xC0	; 192
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 23c:	88 e1       	ldi	r24, 0x18	; 24
 23e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	stdout = &avr_uart_output;
 242:	e1 e5       	ldi	r30, 0x51	; 81
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	8c e1       	ldi	r24, 0x1C	; 28
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	93 83       	std	Z+3, r25	; 0x03
 24c:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &avr_uart_input;
 24e:	8e e0       	ldi	r24, 0x0E	; 14
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24

	xdev_out(avr_uart_putchar);
 256:	83 e5       	ldi	r24, 0x53	; 83
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <xfunc_output+0x1>
 25e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <xfunc_output>
}
 262:	08 95       	ret

00000264 <avr_uart_data_avaiable>:
}

// return 0 if no data available, read it if available
bool avr_uart_data_avaiable(char *data) 
{
    if (UCSR0A & (1<<RXC0)) {
 264:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 268:	27 ff       	sbrs	r18, 7
 26a:	06 c0       	rjmp	.+12     	; 0x278 <avr_uart_data_avaiable+0x14>
        *data = UDR0;
 26c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
        return true;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret
    }
    return false;
 278:	80 e0       	ldi	r24, 0x00	; 0
}
 27a:	08 95       	ret

0000027c <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 27c:	fc 01       	movw	r30, r24
 27e:	cb 01       	movw	r24, r22
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
 280:	30 97       	sbiw	r30, 0x00	; 0
 282:	09 f0       	breq	.+2      	; 0x286 <xfputc+0xa>
		func(chr);		/* Write a character to the output device */
 284:	09 94       	ijmp
	} else if (strptr) {
 286:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 28a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__data_end+0x1>
 28e:	30 97       	sbiw	r30, 0x00	; 0
 290:	41 f0       	breq	.+16     	; 0x2a2 <xfputc+0x26>
		 *strptr++ = chr;	/* Write a character to the memory */
 292:	9f 01       	movw	r18, r30
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <__data_end+0x1>
 29c:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <__data_end>
 2a0:	60 83       	st	Z, r22
	}
}
 2a2:	08 95       	ret

000002a4 <xputc>:

void xputc (
	int chr				/* Character to be output */
)
{
	xfputc(xfunc_output, chr);	/* Output it to the default output device */
 2a4:	bc 01       	movw	r22, r24
 2a6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <xfunc_output>
 2aa:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <xfunc_output+0x1>
 2ae:	0c 94 3e 01 	jmp	0x27c	; 0x27c <xfputc>

000002b2 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 2b2:	2f 92       	push	r2
 2b4:	3f 92       	push	r3
 2b6:	4f 92       	push	r4
 2b8:	5f 92       	push	r5
 2ba:	6f 92       	push	r6
 2bc:	7f 92       	push	r7
 2be:	8f 92       	push	r8
 2c0:	9f 92       	push	r9
 2c2:	af 92       	push	r10
 2c4:	bf 92       	push	r11
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	a8 97       	sbiw	r28, 0x28	; 40
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	2c 01       	movw	r4, r24
 2e8:	3b 01       	movw	r6, r22
 2ea:	7a 01       	movw	r14, r20
 2ec:	9e 01       	movw	r18, r28
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	3a a3       	std	Y+34, r19	; 0x22
 2f4:	29 a3       	std	Y+33, r18	; 0x21
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 2f6:	d3 01       	movw	r26, r6
 2f8:	6c 91       	ld	r22, X
		if (!c) break;				/* End of format? */
 2fa:	66 23       	and	r22, r22
 2fc:	09 f4       	brne	.+2      	; 0x300 <xvfprintf+0x4e>
 2fe:	b5 c1       	rjmp	.+874    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
		if (c != '%') {				/* Pass it through if not a % sequense */
 300:	65 32       	cpi	r22, 0x25	; 37
 302:	61 f0       	breq	.+24     	; 0x31c <xvfprintf+0x6a>
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 304:	bf ef       	ldi	r27, 0xFF	; 255
 306:	6b 1a       	sub	r6, r27
 308:	7b 0a       	sbc	r7, r27
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
 30a:	06 2e       	mov	r0, r22
 30c:	00 0c       	add	r0, r0
 30e:	77 0b       	sbc	r23, r23
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 310:	c2 01       	movw	r24, r4
 312:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 316:	fc a2       	std	Y+36, r15	; 0x24
 318:	eb a2       	std	Y+35, r14	; 0x23
 31a:	39 c1       	rjmp	.+626    	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 31c:	f3 01       	movw	r30, r6
 31e:	21 81       	ldd	r18, Z+1	; 0x01
		if (c == '0') {				/* Flag: left '0' padded */
 320:	20 33       	cpi	r18, 0x30	; 48
 322:	09 f0       	breq	.+2      	; 0x326 <xvfprintf+0x74>
 324:	41 c0       	rjmp	.+130    	; 0x3a8 <xvfprintf+0xf6>
			pad = '0'; c = *fmt++;
 326:	33 96       	adiw	r30, 0x03	; 3
 328:	2d a3       	std	Y+37, r18	; 0x25
 32a:	12 96       	adiw	r26, 0x02	; 2
 32c:	2c 91       	ld	r18, X
		c = *fmt++;					/* Get a format character */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
 32e:	b1 2c       	mov	r11, r1
 330:	a1 2c       	mov	r10, r1
 332:	31 2c       	mov	r3, r1
 334:	21 2c       	mov	r2, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 336:	2a 32       	cpi	r18, 0x2A	; 42
 338:	09 f0       	breq	.+2      	; 0x33c <xvfprintf+0x8a>
 33a:	54 c0       	rjmp	.+168    	; 0x3e4 <xvfprintf+0x132>
			n = va_arg(arp, int);
 33c:	c7 01       	movw	r24, r14
 33e:	02 96       	adiw	r24, 0x02	; 2
 340:	d7 01       	movw	r26, r14
 342:	2d 90       	ld	r2, X+
 344:	3c 90       	ld	r3, X
			if (n < 0) {			/* Flag: left justified */
 346:	37 fe       	sbrs	r3, 7
 348:	06 c0       	rjmp	.+12     	; 0x356 <xvfprintf+0xa4>
				n = 0 - n; f = 2;
 34a:	31 94       	neg	r3
 34c:	21 94       	neg	r2
 34e:	31 08       	sbc	r3, r1
 350:	22 e0       	ldi	r18, 0x02	; 2
 352:	a2 2e       	mov	r10, r18
 354:	b1 2c       	mov	r11, r1
			}
			w = n; c = *fmt++;
 356:	3f 01       	movw	r6, r30
 358:	bf ef       	ldi	r27, 0xFF	; 255
 35a:	6b 1a       	sub	r6, r27
 35c:	7b 0a       	sbc	r7, r27
 35e:	20 81       	ld	r18, Z
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
			n = va_arg(arp, int);
 360:	7c 01       	movw	r14, r24
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 362:	0f ef       	ldi	r16, 0xFF	; 255
 364:	1f ef       	ldi	r17, 0xFF	; 255
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
 366:	2e 32       	cpi	r18, 0x2E	; 46
 368:	09 f0       	breq	.+2      	; 0x36c <xvfprintf+0xba>
 36a:	4c c0       	rjmp	.+152    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			c = *fmt++;
 36c:	d3 01       	movw	r26, r6
 36e:	2c 91       	ld	r18, X
			if (c == '*') {				/* Precision from an argument */
 370:	2a 32       	cpi	r18, 0x2A	; 42
 372:	09 f4       	brne	.+2      	; 0x376 <xvfprintf+0xc4>
 374:	3d c0       	rjmp	.+122    	; 0x3f0 <xvfprintf+0x13e>
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
 376:	f3 01       	movw	r30, r6
 378:	31 96       	adiw	r30, 0x01	; 1
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
				c = *fmt++;
			} else {
				prec = 0;
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	00 e0       	ldi	r16, 0x00	; 0
 37e:	3f 01       	movw	r6, r30
				while (c >= '0' && c <= '9') {
 380:	80 ed       	ldi	r24, 0xD0	; 208
 382:	82 0f       	add	r24, r18
 384:	8a 30       	cpi	r24, 0x0A	; 10
 386:	08 f0       	brcs	.+2      	; 0x38a <xvfprintf+0xd8>
 388:	3d c0       	rjmp	.+122    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
					prec = prec * 10 + c - '0';
 38a:	aa e0       	ldi	r26, 0x0A	; 10
 38c:	a0 9f       	mul	r26, r16
 38e:	c0 01       	movw	r24, r0
 390:	a1 9f       	mul	r26, r17
 392:	90 0d       	add	r25, r0
 394:	11 24       	eor	r1, r1
 396:	8c 01       	movw	r16, r24
 398:	02 0f       	add	r16, r18
 39a:	11 1d       	adc	r17, r1
 39c:	27 fd       	sbrc	r18, 7
 39e:	1a 95       	dec	r17
 3a0:	00 53       	subi	r16, 0x30	; 48
 3a2:	11 09       	sbc	r17, r1
					c = *fmt++;
 3a4:	21 91       	ld	r18, Z+
 3a6:	eb cf       	rjmp	.-42     	; 0x37e <xvfprintf+0xcc>
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 3a8:	2d 32       	cpi	r18, 0x2D	; 45
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <xvfprintf+0x102>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 3ac:	32 96       	adiw	r30, 0x02	; 2
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 3ae:	b0 e2       	ldi	r27, 0x20	; 32
 3b0:	bd a3       	std	Y+37, r27	; 0x25
 3b2:	bd cf       	rjmp	.-134    	; 0x32e <xvfprintf+0x7c>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 3b4:	33 96       	adiw	r30, 0x03	; 3
 3b6:	12 96       	adiw	r26, 0x02	; 2
 3b8:	2c 91       	ld	r18, X
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 3ba:	b0 e2       	ldi	r27, 0x20	; 32
 3bc:	bd a3       	std	Y+37, r27	; 0x25
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 3be:	32 e0       	ldi	r19, 0x02	; 2
 3c0:	a3 2e       	mov	r10, r19
 3c2:	b1 2c       	mov	r11, r1
 3c4:	b6 cf       	rjmp	.-148    	; 0x332 <xvfprintf+0x80>
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 3c6:	3a e0       	ldi	r19, 0x0A	; 10
 3c8:	32 9d       	mul	r19, r2
 3ca:	c0 01       	movw	r24, r0
 3cc:	33 9d       	mul	r19, r3
 3ce:	90 0d       	add	r25, r0
 3d0:	11 24       	eor	r1, r1
 3d2:	1c 01       	movw	r2, r24
 3d4:	22 0e       	add	r2, r18
 3d6:	31 1c       	adc	r3, r1
 3d8:	27 fd       	sbrc	r18, 7
 3da:	3a 94       	dec	r3
 3dc:	80 e3       	ldi	r24, 0x30	; 48
 3de:	28 1a       	sub	r2, r24
 3e0:	31 08       	sbc	r3, r1
				c = *fmt++;
 3e2:	21 91       	ld	r18, Z+
 3e4:	3f 01       	movw	r6, r30
			if (n < 0) {			/* Flag: left justified */
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
 3e6:	80 ed       	ldi	r24, 0xD0	; 208
 3e8:	82 0f       	add	r24, r18
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	60 f3       	brcs	.-40     	; 0x3c6 <xvfprintf+0x114>
 3ee:	b9 cf       	rjmp	.-142    	; 0x362 <xvfprintf+0xb0>
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 3f0:	f7 01       	movw	r30, r14
 3f2:	00 81       	ld	r16, Z
 3f4:	11 81       	ldd	r17, Z+1	; 0x01
				c = *fmt++;
 3f6:	11 96       	adiw	r26, 0x01	; 1
 3f8:	2c 91       	ld	r18, X
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 3fa:	32 96       	adiw	r30, 0x02	; 2
 3fc:	7f 01       	movw	r14, r30
				c = *fmt++;
 3fe:	c3 01       	movw	r24, r6
 400:	02 96       	adiw	r24, 0x02	; 2
 402:	3c 01       	movw	r6, r24
					prec = prec * 10 + c - '0';
					c = *fmt++;
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 404:	2c 36       	cpi	r18, 0x6C	; 108
 406:	39 f4       	brne	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			f |= 4; c = *fmt++;
 408:	68 94       	set
 40a:	a2 f8       	bld	r10, 2
 40c:	f3 01       	movw	r30, r6
 40e:	20 81       	ld	r18, Z
 410:	c3 01       	movw	r24, r6
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	3c 01       	movw	r6, r24
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 416:	22 23       	and	r18, r18
 418:	09 f4       	brne	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	27 c1       	rjmp	.+590    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
		switch (c) {				/* Type is... */
 41c:	24 36       	cpi	r18, 0x64	; 100
 41e:	09 f4       	brne	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	a7 c0       	rjmp	.+334    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 422:	64 f4       	brge	.+24     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 424:	22 36       	cpi	r18, 0x62	; 98
 426:	09 f4       	brne	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	00 c1       	rjmp	.+512    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
 42a:	0c f0       	brlt	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42c:	a4 c0       	rjmp	.+328    	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
 42e:	28 35       	cpi	r18, 0x58	; 88
 430:	09 f4       	brne	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 432:	9b c0       	rjmp	.+310    	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 434:	62 2f       	mov	r22, r18
 436:	22 0f       	add	r18, r18
 438:	77 0b       	sbc	r23, r23
 43a:	6a cf       	rjmp	.-300    	; 0x310 <xvfprintf+0x5e>
 43c:	23 37       	cpi	r18, 0x73	; 115
 43e:	09 f4       	brne	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	a9 c0       	rjmp	.+338    	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 442:	0c f0       	brlt	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 444:	8d c0       	rjmp	.+282    	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
		case 'b':					/* Unsigned binary */
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
 446:	e8 e0       	ldi	r30, 0x08	; 8
 448:	f0 e0       	ldi	r31, 0x00	; 0
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 44a:	2f 36       	cpi	r18, 0x6F	; 111
 44c:	99 f7       	brne	.-26     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
 44e:	c7 01       	movw	r24, r14
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 450:	a2 fe       	sbrs	r10, 2
 452:	ee c0       	rjmp	.+476    	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
			v = (long)va_arg(arp, long);
 454:	04 96       	adiw	r24, 0x04	; 4
 456:	9c a3       	std	Y+36, r25	; 0x24
 458:	8b a3       	std	Y+35, r24	; 0x23
 45a:	d7 01       	movw	r26, r14
 45c:	4d 91       	ld	r20, X+
 45e:	5d 91       	ld	r21, X+
 460:	6d 91       	ld	r22, X+
 462:	7c 91       	ld	r23, X
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 464:	24 36       	cpi	r18, 0x64	; 100
 466:	59 f4       	brne	.+22     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 468:	77 ff       	sbrs	r23, 7
 46a:	09 c0       	rjmp	.+18     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			v = 0 - v; f |= 1;
 46c:	70 95       	com	r23
 46e:	60 95       	com	r22
 470:	50 95       	com	r21
 472:	41 95       	neg	r20
 474:	5f 4f       	sbci	r21, 0xFF	; 255
 476:	6f 4f       	sbci	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	68 94       	set
 47c:	a0 f8       	bld	r10, 0
		}
		i = 0; uv = v;
 47e:	b4 2f       	mov	r27, r20
 480:	a5 2f       	mov	r26, r21
 482:	cb 01       	movw	r24, r22
 484:	28 37       	cpi	r18, 0x78	; 120
 486:	09 f0       	breq	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 488:	e3 c0       	rjmp	.+454    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
 48a:	27 e2       	ldi	r18, 0x27	; 39
 48c:	28 a7       	std	Y+40, r18	; 0x28
 48e:	9e 01       	movw	r18, r28
 490:	2f 5f       	subi	r18, 0xFF	; 255
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	3f a3       	std	Y+39, r19	; 0x27
 496:	2e a3       	std	Y+38, r18	; 0x26
 498:	91 2c       	mov	r9, r1
 49a:	81 2c       	mov	r8, r1
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
 49c:	6f 01       	movw	r12, r30
 49e:	f1 2c       	mov	r15, r1
 4a0:	e1 2c       	mov	r14, r1
 4a2:	6b 2f       	mov	r22, r27
 4a4:	7a 2f       	mov	r23, r26
 4a6:	a7 01       	movw	r20, r14
 4a8:	96 01       	movw	r18, r12
 4aa:	0e 94 11 04 	call	0x822	; 0x822 <__udivmodsi4>
 4ae:	76 2f       	mov	r23, r22
 4b0:	b2 2f       	mov	r27, r18
 4b2:	a3 2f       	mov	r26, r19
 4b4:	ca 01       	movw	r24, r20
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 4b6:	6a 30       	cpi	r22, 0x0A	; 10
 4b8:	14 f0       	brlt	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4ba:	78 a5       	ldd	r23, Y+40	; 0x28
 4bc:	76 0f       	add	r23, r22
			str[i++] = d + '0';
 4be:	84 01       	movw	r16, r8
 4c0:	0f 5f       	subi	r16, 0xFF	; 255
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	60 e3       	ldi	r22, 0x30	; 48
 4c6:	67 0f       	add	r22, r23
 4c8:	ee a1       	ldd	r30, Y+38	; 0x26
 4ca:	ff a1       	ldd	r31, Y+39	; 0x27
 4cc:	61 93       	st	Z+, r22
 4ce:	ff a3       	std	Y+39, r31	; 0x27
 4d0:	ee a3       	std	Y+38, r30	; 0x26
		} while (uv != 0 && i < sizeof str);
 4d2:	23 2b       	or	r18, r19
 4d4:	24 2b       	or	r18, r20
 4d6:	25 2b       	or	r18, r21
 4d8:	39 f0       	breq	.+14     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4da:	00 32       	cpi	r16, 0x20	; 32
 4dc:	11 05       	cpc	r17, r1
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e0:	ba c0       	rjmp	.+372    	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
 4e2:	8f e1       	ldi	r24, 0x1F	; 31
 4e4:	88 2e       	mov	r8, r24
 4e6:	91 2c       	mov	r9, r1
		if (f & 1) str[i++] = '-';					/* Sign */
 4e8:	a0 fe       	sbrs	r10, 0
 4ea:	0b c0       	rjmp	.+22     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4ec:	e1 e0       	ldi	r30, 0x01	; 1
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	ec 0f       	add	r30, r28
 4f2:	fd 1f       	adc	r31, r29
 4f4:	e0 0f       	add	r30, r16
 4f6:	f1 1f       	adc	r31, r17
 4f8:	2d e2       	ldi	r18, 0x2D	; 45
 4fa:	20 83       	st	Z, r18
 4fc:	84 01       	movw	r16, r8
 4fe:	0e 5f       	subi	r16, 0xFE	; 254
 500:	1f 4f       	sbci	r17, 0xFF	; 255
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 502:	78 01       	movw	r14, r16
 504:	32 e0       	ldi	r19, 0x02	; 2
 506:	a3 22       	and	r10, r19
 508:	bb 24       	eor	r11, r11
 50a:	8d a1       	ldd	r24, Y+37	; 0x25
 50c:	88 2e       	mov	r8, r24
 50e:	88 0f       	add	r24, r24
 510:	99 08       	sbc	r9, r9
 512:	a1 14       	cp	r10, r1
 514:	b1 04       	cpc	r11, r1
 516:	21 f4       	brne	.+8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 518:	e2 14       	cp	r14, r2
 51a:	f3 04       	cpc	r15, r3
 51c:	08 f4       	brcc	.+2      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51e:	9d c0       	rjmp	.+314    	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
 520:	a1 e0       	ldi	r26, 0x01	; 1
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	ac 0f       	add	r26, r28
 526:	bd 1f       	adc	r27, r29
 528:	0a 0f       	add	r16, r26
 52a:	1b 1f       	adc	r17, r27
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 52c:	f8 01       	movw	r30, r16
 52e:	62 91       	ld	r22, -Z
 530:	8f 01       	movw	r16, r30
 532:	06 2e       	mov	r0, r22
 534:	00 0c       	add	r0, r0
 536:	77 0b       	sbc	r23, r23
 538:	c2 01       	movw	r24, r4
 53a:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 53e:	29 a1       	ldd	r18, Y+33	; 0x21
 540:	3a a1       	ldd	r19, Y+34	; 0x22
 542:	20 17       	cp	r18, r16
 544:	31 07       	cpc	r19, r17
 546:	91 f7       	brne	.-28     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 548:	e2 14       	cp	r14, r2
 54a:	f3 04       	cpc	r15, r3
 54c:	00 f5       	brcc	.+64     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 54e:	60 e2       	ldi	r22, 0x20	; 32
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	c2 01       	movw	r24, r4
 554:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 558:	3f ef       	ldi	r19, 0xFF	; 255
 55a:	e3 1a       	sub	r14, r19
 55c:	f3 0a       	sbc	r15, r19
 55e:	f4 cf       	rjmp	.-24     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 560:	25 37       	cpi	r18, 0x75	; 117
 562:	31 f0       	breq	.+12     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 564:	28 37       	cpi	r18, 0x78	; 120
 566:	09 f0       	breq	.+2      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 568:	65 cf       	rjmp	.-310    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
 56a:	e0 e1       	ldi	r30, 0x10	; 16
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	6f cf       	rjmp	.-290    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 570:	ea e0       	ldi	r30, 0x0A	; 10
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	6c cf       	rjmp	.-296    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 576:	d7 01       	movw	r26, r14
 578:	12 96       	adiw	r26, 0x02	; 2
 57a:	bc a3       	std	Y+36, r27	; 0x24
 57c:	ab a3       	std	Y+35, r26	; 0x23
 57e:	f7 01       	movw	r30, r14
 580:	60 81       	ld	r22, Z
 582:	06 2e       	mov	r0, r22
 584:	00 0c       	add	r0, r0
 586:	77 0b       	sbc	r23, r23
 588:	c2 01       	movw	r24, r4
 58a:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 58e:	eb a0       	ldd	r14, Y+35	; 0x23
 590:	fc a0       	ldd	r15, Y+36	; 0x24
 592:	b1 ce       	rjmp	.-670    	; 0x2f6 <xvfprintf+0x44>
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
 594:	97 01       	movw	r18, r14
 596:	2e 5f       	subi	r18, 0xFE	; 254
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	3c a3       	std	Y+36, r19	; 0x24
 59c:	2b a3       	std	Y+35, r18	; 0x23
 59e:	d7 01       	movw	r26, r14
 5a0:	cd 90       	ld	r12, X+
 5a2:	dc 90       	ld	r13, X
			if (!p) p = "";				/* Null ptr generates a null string */
 5a4:	c1 14       	cp	r12, r1
 5a6:	d1 04       	cpc	r13, r1
 5a8:	21 f4       	brne	.+8      	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
 5aa:	9a e2       	ldi	r25, 0x2A	; 42
 5ac:	c9 2e       	mov	r12, r25
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	d9 2e       	mov	r13, r25
			j = strlen(p);
 5b2:	c6 01       	movw	r24, r12
 5b4:	0e 94 33 04 	call	0x866	; 0x866 <strlen>
 5b8:	7c 01       	movw	r14, r24
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
 5ba:	17 fd       	sbrc	r17, 7
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5be:	08 17       	cp	r16, r24
 5c0:	19 07       	cpc	r17, r25
 5c2:	08 f4       	brcc	.+2      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5c4:	78 01       	movw	r14, r16
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 5c6:	e2 e0       	ldi	r30, 0x02	; 2
 5c8:	ae 22       	and	r10, r30
 5ca:	bb 24       	eor	r11, r11
 5cc:	fd a1       	ldd	r31, Y+37	; 0x25
 5ce:	8f 2e       	mov	r8, r31
 5d0:	ff 0f       	add	r31, r31
 5d2:	99 08       	sbc	r9, r9
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5d6:	b4 01       	movw	r22, r8
 5d8:	c2 01       	movw	r24, r4
 5da:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 5de:	bf ef       	ldi	r27, 0xFF	; 255
 5e0:	eb 1a       	sub	r14, r27
 5e2:	fb 0a       	sbc	r15, r27
 5e4:	a1 14       	cp	r10, r1
 5e6:	b1 04       	cpc	r11, r1
 5e8:	19 f4       	brne	.+6      	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 5ea:	e2 14       	cp	r14, r2
 5ec:	f3 04       	cpc	r15, r3
 5ee:	98 f3       	brcs	.-26     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
			while (*p && prec--) xfputc(func, *p++);/* String body */
 5f0:	d6 01       	movw	r26, r12
 5f2:	6d 91       	ld	r22, X+
 5f4:	6d 01       	movw	r12, r26
 5f6:	66 23       	and	r22, r22
 5f8:	19 f0       	breq	.+6      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
 5fa:	01 15       	cp	r16, r1
 5fc:	11 05       	cpc	r17, r1
 5fe:	61 f4       	brne	.+24     	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 600:	e2 14       	cp	r14, r2
 602:	f3 04       	cpc	r15, r3
 604:	20 f6       	brcc	.-120    	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 606:	60 e2       	ldi	r22, 0x20	; 32
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	c2 01       	movw	r24, r4
 60c:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 610:	bf ef       	ldi	r27, 0xFF	; 255
 612:	eb 1a       	sub	r14, r27
 614:	fb 0a       	sbc	r15, r27
 616:	f4 cf       	rjmp	.-24     	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
			p = va_arg(arp, char*);		/* Get a pointer argument */
			if (!p) p = "";				/* Null ptr generates a null string */
			j = strlen(p);
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
			while (*p && prec--) xfputc(func, *p++);/* String body */
 618:	06 2e       	mov	r0, r22
 61a:	00 0c       	add	r0, r0
 61c:	77 0b       	sbc	r23, r23
 61e:	c2 01       	movw	r24, r4
 620:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 624:	01 50       	subi	r16, 0x01	; 1
 626:	11 09       	sbc	r17, r1
 628:	e3 cf       	rjmp	.-58     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
		case 'b':					/* Unsigned binary */
			r = 2; break;
 62a:	e2 e0       	ldi	r30, 0x02	; 2
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	0f cf       	rjmp	.-482    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 630:	02 96       	adiw	r24, 0x02	; 2
 632:	9c a3       	std	Y+36, r25	; 0x24
 634:	8b a3       	std	Y+35, r24	; 0x23
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 636:	d7 01       	movw	r26, r14
 638:	4d 91       	ld	r20, X+
 63a:	5c 91       	ld	r21, X
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	24 36       	cpi	r18, 0x64	; 100
 642:	09 f0       	breq	.+2      	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 644:	1c cf       	rjmp	.-456    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 646:	05 2e       	mov	r0, r21
 648:	00 0c       	add	r0, r0
 64a:	66 0b       	sbc	r22, r22
 64c:	77 0b       	sbc	r23, r23
 64e:	0c cf       	rjmp	.-488    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 650:	37 e0       	ldi	r19, 0x07	; 7
 652:	38 a7       	std	Y+40, r19	; 0x28
 654:	1c cf       	rjmp	.-456    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 656:	48 01       	movw	r8, r16
 658:	24 cf       	rjmp	.-440    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			d = (char)(uv % r); uv /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (uv != 0 && i < sizeof str);
		if (f & 1) str[i++] = '-';					/* Sign */
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 65a:	b4 01       	movw	r22, r8
 65c:	c2 01       	movw	r24, r4
 65e:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 662:	9f ef       	ldi	r25, 0xFF	; 255
 664:	e9 1a       	sub	r14, r25
 666:	f9 0a       	sbc	r15, r25
 668:	54 cf       	rjmp	.-344    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
	}
}
 66a:	a8 96       	adiw	r28, 0x28	; 40
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	1f 91       	pop	r17
 67c:	0f 91       	pop	r16
 67e:	ff 90       	pop	r15
 680:	ef 90       	pop	r14
 682:	df 90       	pop	r13
 684:	cf 90       	pop	r12
 686:	bf 90       	pop	r11
 688:	af 90       	pop	r10
 68a:	9f 90       	pop	r9
 68c:	8f 90       	pop	r8
 68e:	7f 90       	pop	r7
 690:	6f 90       	pop	r6
 692:	5f 90       	pop	r5
 694:	4f 90       	pop	r4
 696:	3f 90       	pop	r3
 698:	2f 90       	pop	r2
 69a:	08 95       	ret

0000069c <xfputs>:

void xfputs (			/* Put a string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	8c 01       	movw	r16, r24
 6a6:	eb 01       	movw	r28, r22
	while (*str) {			/* Put the string */
 6a8:	69 91       	ld	r22, Y+
 6aa:	61 11       	cpse	r22, r1
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <xfputs+0x1c>
		xfputc(func, *str++);
	}
}
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
	while (*str) {			/* Put the string */
		xfputc(func, *str++);
 6b8:	06 2e       	mov	r0, r22
 6ba:	00 0c       	add	r0, r0
 6bc:	77 0b       	sbc	r23, r23
 6be:	c8 01       	movw	r24, r16
 6c0:	0e 94 3e 01 	call	0x27c	; 0x27c <xfputc>
 6c4:	f1 cf       	rjmp	.-30     	; 0x6a8 <xfputs+0xc>

000006c6 <xputs>:

void xputs (			/* Put a string to the default device */
	const char* str		/* Pointer to the string */
)
{
	xfputs(xfunc_output, str);
 6c6:	bc 01       	movw	r22, r24
 6c8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <xfunc_output>
 6cc:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <xfunc_output+0x1>
 6d0:	0c 94 4e 03 	jmp	0x69c	; 0x69c <xfputs>

000006d4 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	ae 01       	movw	r20, r28
 6de:	4b 5f       	subi	r20, 0xFB	; 251
 6e0:	5f 4f       	sbci	r21, 0xFF	; 255
 6e2:	fa 01       	movw	r30, r20
 6e4:	61 91       	ld	r22, Z+
 6e6:	71 91       	ld	r23, Z+
 6e8:	af 01       	movw	r20, r30
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(xfunc_output, fmt, arp);
 6ea:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <xfunc_output>
 6ee:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <xfunc_output+0x1>
 6f2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xvfprintf>
	va_end(arp);
}
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	08 95       	ret

000006fc <xfprintf>:
void xfprintf (			/* Put a formatted string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(func, fmt, arp);
 704:	ae 01       	movw	r20, r28
 706:	47 5f       	subi	r20, 0xF7	; 247
 708:	5f 4f       	sbci	r21, 0xFF	; 255
 70a:	6f 81       	ldd	r22, Y+7	; 0x07
 70c:	78 85       	ldd	r23, Y+8	; 0x08
 70e:	8d 81       	ldd	r24, Y+5	; 0x05
 710:	9e 81       	ldd	r25, Y+6	; 0x06
 712:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xvfprintf>
	va_end(arp);
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	strptr = buff;		/* Enable destination for memory */
 724:	8d 81       	ldd	r24, Y+5	; 0x05
 726:	9e 81       	ldd	r25, Y+6	; 0x06
 728:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 72c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
	va_start(arp, fmt);
	xvfprintf(0, fmt, arp);
 730:	ae 01       	movw	r20, r28
 732:	47 5f       	subi	r20, 0xF7	; 247
 734:	5f 4f       	sbci	r21, 0xFF	; 255
 736:	6f 81       	ldd	r22, Y+7	; 0x07
 738:	78 85       	ldd	r23, Y+8	; 0x08
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <xvfprintf>
	va_end(arp);
	*strptr = 0;		/* Terminate output string */
 742:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 746:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__data_end+0x1>
 74a:	10 82       	st	Z, r1
	strptr = 0;			/* Disable destination for memory */
 74c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x1>
 750:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
}
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <usart_init>:
//bit5~bit0: number of valid bytes received
uint8_t USART_RX_STA = 0;

void usart_init(void)
{
    set_bits(UCSR0B, _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0));
 75a:	e1 ec       	ldi	r30, 0xC1	; 193
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	88 69       	ori	r24, 0x98	; 152
 762:	80 83       	st	Z, r24
    UBRR0 = 51;
 764:	83 e3       	ldi	r24, 0x33	; 51
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 76c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
}
 770:	08 95       	ret

00000772 <__vector_18>:
    }
    return 0;
}

ISR(USART_RX_vect)
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	8f 93       	push	r24
 77e:	9f 93       	push	r25
 780:	ef 93       	push	r30
 782:	ff 93       	push	r31
    uint8_t res;
    res = UDR0;
 784:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    if((USART_RX_STA & 0x80) == 0)
 788:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USART_RX_STA>
 78c:	87 fd       	sbrc	r24, 7
 78e:	06 c0       	rjmp	.+12     	; 0x79c <__vector_18+0x2a>
    {
        if(USART_RX_STA & 0x40)
 790:	86 ff       	sbrs	r24, 6
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <__vector_18+0x44>
        {
            if(res != 0x0a)
 794:	9a 30       	cpi	r25, 0x0A	; 10
 796:	59 f0       	breq	.+22     	; 0x7ae <__vector_18+0x3c>
                USART_RX_STA = 0;
 798:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USART_RX_STA>
                if(USART_RX_STA > (USART_REC_LEN - 1))
                    USART_RX_STA = 0;
            }
        }
    }
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti
        if(USART_RX_STA & 0x40)
        {
            if(res != 0x0a)
                USART_RX_STA = 0;
            else
                USART_RX_STA |= 0x80;
 7ae:	80 68       	ori	r24, 0x80	; 128
        }
        else
        {
            if(res == 0x0d)
                USART_RX_STA |= 0x40;
 7b0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USART_RX_STA>
 7b4:	f3 cf       	rjmp	.-26     	; 0x79c <__vector_18+0x2a>
            else
                USART_RX_STA |= 0x80;
        }
        else
        {
            if(res == 0x0d)
 7b6:	9d 30       	cpi	r25, 0x0D	; 13
 7b8:	11 f4       	brne	.+4      	; 0x7be <__vector_18+0x4c>
                USART_RX_STA |= 0x40;
 7ba:	80 64       	ori	r24, 0x40	; 64
 7bc:	f9 cf       	rjmp	.-14     	; 0x7b0 <__vector_18+0x3e>
            else
            {
                USART_RX_BUF[USART_RX_STA & 0x3f] = res;
 7be:	e8 2f       	mov	r30, r24
 7c0:	ef 73       	andi	r30, 0x3F	; 63
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	ef 5c       	subi	r30, 0xCF	; 207
 7c6:	fe 4f       	sbci	r31, 0xFE	; 254
 7c8:	90 83       	st	Z, r25
                USART_RX_STA++;
 7ca:	8f 5f       	subi	r24, 0xFF	; 255
 7cc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USART_RX_STA>
                if(USART_RX_STA > (USART_REC_LEN - 1))
 7d0:	80 32       	cpi	r24, 0x20	; 32
 7d2:	10 f7       	brcc	.-60     	; 0x798 <__vector_18+0x26>
 7d4:	e3 cf       	rjmp	.-58     	; 0x79c <__vector_18+0x2a>

000007d6 <main>:
}

int main(void) 
{
    uint8_t len, i;
    usart_init();
 7d6:	0e 94 ad 03 	call	0x75a	; 0x75a <usart_init>
    sei();
 7da:	78 94       	sei
    while(1)
    {
        delay_ms(10);
 7dc:	8a e0       	ldi	r24, 0x0A	; 10
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 cb 00 	call	0x196	; 0x196 <delay_ms>
        if(USART_RX_STA & 0x80)
 7e4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USART_RX_STA>
 7e8:	87 ff       	sbrs	r24, 7
 7ea:	f8 cf       	rjmp	.-16     	; 0x7dc <main+0x6>
        {
            len = USART_RX_STA & 0x3f;
 7ec:	8f 73       	andi	r24, 0x3F	; 63
 7ee:	e1 e3       	ldi	r30, 0x31	; 49
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
            for(i = 0; i < len; i++)
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	98 13       	cpse	r25, r24
 7f6:	03 c0       	rjmp	.+6      	; 0x7fe <main+0x28>
                loop_until_bit_is_set(UCSR0A, UDRE0);
                UDR0 = USART_RX_BUF[i];
                loop_until_bit_is_set(UCSR0A, TXC0);
                set_bits(UCSR0A, _BV(TXC0));
            }
            USART_RX_STA = 0;
 7f8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USART_RX_STA>
 7fc:	ef cf       	rjmp	.-34     	; 0x7dc <main+0x6>
        if(USART_RX_STA & 0x80)
        {
            len = USART_RX_STA & 0x3f;
            for(i = 0; i < len; i++)
            {
                loop_until_bit_is_set(UCSR0A, UDRE0);
 7fe:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 802:	25 ff       	sbrs	r18, 5
 804:	fc cf       	rjmp	.-8      	; 0x7fe <main+0x28>
                UDR0 = USART_RX_BUF[i];
 806:	21 91       	ld	r18, Z+
 808:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
                loop_until_bit_is_set(UCSR0A, TXC0);
 80c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 810:	26 ff       	sbrs	r18, 6
 812:	fc cf       	rjmp	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                set_bits(UCSR0A, _BV(TXC0));
 814:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 818:	20 64       	ori	r18, 0x40	; 64
 81a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    {
        delay_ms(10);
        if(USART_RX_STA & 0x80)
        {
            len = USART_RX_STA & 0x3f;
            for(i = 0; i < len; i++)
 81e:	9f 5f       	subi	r25, 0xFF	; 255
 820:	e9 cf       	rjmp	.-46     	; 0x7f4 <main+0x1e>

00000822 <__udivmodsi4>:
 822:	a1 e2       	ldi	r26, 0x21	; 33
 824:	1a 2e       	mov	r1, r26
 826:	aa 1b       	sub	r26, r26
 828:	bb 1b       	sub	r27, r27
 82a:	fd 01       	movw	r30, r26
 82c:	0d c0       	rjmp	.+26     	; 0x848 <__udivmodsi4_ep>

0000082e <__udivmodsi4_loop>:
 82e:	aa 1f       	adc	r26, r26
 830:	bb 1f       	adc	r27, r27
 832:	ee 1f       	adc	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	a2 17       	cp	r26, r18
 838:	b3 07       	cpc	r27, r19
 83a:	e4 07       	cpc	r30, r20
 83c:	f5 07       	cpc	r31, r21
 83e:	20 f0       	brcs	.+8      	; 0x848 <__udivmodsi4_ep>
 840:	a2 1b       	sub	r26, r18
 842:	b3 0b       	sbc	r27, r19
 844:	e4 0b       	sbc	r30, r20
 846:	f5 0b       	sbc	r31, r21

00000848 <__udivmodsi4_ep>:
 848:	66 1f       	adc	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	1a 94       	dec	r1
 852:	69 f7       	brne	.-38     	; 0x82e <__udivmodsi4_loop>
 854:	60 95       	com	r22
 856:	70 95       	com	r23
 858:	80 95       	com	r24
 85a:	90 95       	com	r25
 85c:	9b 01       	movw	r18, r22
 85e:	ac 01       	movw	r20, r24
 860:	bd 01       	movw	r22, r26
 862:	cf 01       	movw	r24, r30
 864:	08 95       	ret

00000866 <strlen>:
 866:	fc 01       	movw	r30, r24
 868:	01 90       	ld	r0, Z+
 86a:	00 20       	and	r0, r0
 86c:	e9 f7       	brne	.-6      	; 0x868 <strlen+0x2>
 86e:	80 95       	com	r24
 870:	90 95       	com	r25
 872:	8e 0f       	add	r24, r30
 874:	9f 1f       	adc	r25, r31
 876:	08 95       	ret

00000878 <_exit>:
 878:	f8 94       	cli

0000087a <__stop_program>:
 87a:	ff cf       	rjmp	.-2      	; 0x87a <__stop_program>
