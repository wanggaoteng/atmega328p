
output/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000036a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5d  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000925  00000000  00000000  00001105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000646  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000582  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002b56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  8e:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <set_register_bits>:
#include "util/delay_basic.h"
#include "stdarg.h"

//set_register_bits(&PORTB, 2, PB4, PB5);
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	ef 81       	ldd	r30, Y+7	; 0x07
  a4:	f8 85       	ldd	r31, Y+8	; 0x08
  a6:	49 85       	ldd	r20, Y+9	; 0x09
  a8:	5a 85       	ldd	r21, Y+10	; 0x0a
  aa:	9e 01       	movw	r18, r28
  ac:	25 5f       	subi	r18, 0xF5	; 245
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0x00;
  b0:	90 e0       	ldi	r25, 0x00	; 0
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
  b2:	80 e0       	ldi	r24, 0x00	; 0
	{
		temp |= _BV( va_arg( pointer, int ) );
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	d9 01       	movw	r26, r18
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
  ba:	84 17       	cp	r24, r20
  bc:	15 06       	cpc	r1, r21
  be:	44 f0       	brlt	.+16     	; 0xd0 <set_register_bits+0x3a>
	{
		temp |= _BV( va_arg( pointer, int ) );
	}
	*mcu_register |= temp;
  c0:	80 81       	ld	r24, Z
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	08 95       	ret
  d0:	2e 5f       	subi	r18, 0xFE	; 254
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
	{
		temp |= _BV( va_arg( pointer, int ) );
  d4:	8b 01       	movw	r16, r22
  d6:	0c 90       	ld	r0, X
  d8:	02 c0       	rjmp	.+4      	; 0xde <set_register_bits+0x48>
  da:	00 0f       	add	r16, r16
  dc:	11 1f       	adc	r17, r17
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <set_register_bits+0x44>
  e2:	90 2b       	or	r25, r16
void set_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0x00;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	e8 cf       	rjmp	.-48     	; 0xb8 <set_register_bits+0x22>

000000e8 <clear_register_bits>:
	*mcu_register |= temp;
}

//clear_register_bits(&PORTB, 2, PB4, PB5);
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	ef 81       	ldd	r30, Y+7	; 0x07
  f6:	f8 85       	ldd	r31, Y+8	; 0x08
  f8:	49 85       	ldd	r20, Y+9	; 0x09
  fa:	5a 85       	ldd	r21, Y+10	; 0x0a
  fc:	9e 01       	movw	r18, r28
  fe:	25 5f       	subi	r18, 0xF5	; 245
 100:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0xff;
 102:	9f ef       	ldi	r25, 0xFF	; 255
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 104:	80 e0       	ldi	r24, 0x00	; 0
	{
		temp &= ~_BV( va_arg( pointer, int ) );
 106:	01 e0       	ldi	r16, 0x01	; 1
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	d9 01       	movw	r26, r18
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 10c:	84 17       	cp	r24, r20
 10e:	15 06       	cpc	r1, r21
 110:	44 f0       	brlt	.+16     	; 0x122 <clear_register_bits+0x3a>
	{
		temp &= ~_BV( va_arg( pointer, int ) );
	}
	*mcu_register &= temp;
 112:	80 81       	ld	r24, Z
 114:	89 23       	and	r24, r25
 116:	80 83       	st	Z, r24
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret
 122:	2e 5f       	subi	r18, 0xFE	; 254
 124:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
	{
		temp &= ~_BV( va_arg( pointer, int ) );
 126:	b8 01       	movw	r22, r16
 128:	0c 90       	ld	r0, X
 12a:	02 c0       	rjmp	.+4      	; 0x130 <clear_register_bits+0x48>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <clear_register_bits+0x44>
 134:	60 95       	com	r22
 136:	70 95       	com	r23
 138:	96 23       	and	r25, r22
void clear_register_bits( volatile uint8_t *mcu_register, int n, ... )
{
	uint8_t i = 0, temp = 0xff;
	va_list pointer;
	va_start( pointer, n );
	for( i = 0; i < n; i++ )
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	e6 cf       	rjmp	.-52     	; 0x10a <clear_register_bits+0x22>

0000013e <delay_ms>:
}

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 142:	40 ed       	ldi	r20, 0xD0	; 208
 144:	57 e0       	ldi	r21, 0x07	; 7
 146:	28 17       	cp	r18, r24
 148:	39 07       	cpc	r19, r25
 14a:	09 f4       	brne	.+2      	; 0x14e <delay_ms+0x10>
    {
        _delay_loop_2(2000);//8M, _delay_loop_2(1) is four clock cycle (4/8000000)
    }
}
 14c:	08 95       	ret
 14e:	fa 01       	movw	r30, r20
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <delay_ms+0x12>
}

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	f6 cf       	rjmp	.-20     	; 0x146 <delay_ms+0x8>

0000015a <delay_us>:
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	42 e0       	ldi	r20, 0x02	; 2
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	28 17       	cp	r18, r24
 164:	39 07       	cpc	r19, r25
 166:	09 f4       	brne	.+2      	; 0x16a <delay_us+0x10>
    {
        _delay_loop_2(2);
    }
}
 168:	08 95       	ret
 16a:	fa 01       	movw	r30, r20
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <delay_us+0x12>
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	f6 cf       	rjmp	.-20     	; 0x162 <delay_us+0x8>

00000176 <blink>:
//delay: blink time interval
//n>0,delay>0  normal 
//n=0,delay>0  cycle 
//n=0,delay=0  toggle 
void blink(uint8_t n,uint16_t delay)
{
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	18 2f       	mov	r17, r24
 17e:	eb 01       	movw	r28, r22
	DDRB |= _BV(PB5);
 180:	25 9a       	sbi	0x04, 5	; 4
	if((n>0)&&(delay>0))
 182:	88 23       	and	r24, r24
 184:	81 f0       	breq	.+32     	; 0x1a6 <blink+0x30>
 186:	20 97       	sbiw	r28, 0x00	; 0
 188:	51 f0       	breq	.+20     	; 0x19e <blink+0x28>
	{
		while(n)
		{

			PORTB |= _BV(PB5);
 18a:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
			PORTB &= ~_BV(PB5);
 192:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 194:	ce 01       	movw	r24, r28
 196:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
			n--;
 19a:	11 50       	subi	r17, 0x01	; 1
void blink(uint8_t n,uint16_t delay)
{
	DDRB |= _BV(PB5);
	if((n>0)&&(delay>0))
	{
		while(n)
 19c:	b1 f7       	brne	.-20     	; 0x18a <blink+0x14>
		if(bit_is_set(PINB,PB5))
			PORTB &= ~_BV(PB5);
		else
			PORTB |= _BV(PB5);
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	08 95       	ret
			PORTB &= ~_BV(PB5);
			delay_ms(delay);
			n--;
		}
	}
	else if((n==0)&&(delay>0))
 1a6:	20 97       	sbiw	r28, 0x00	; 0
 1a8:	49 f0       	breq	.+18     	; 0x1bc <blink+0x46>
	{
		while(1)
		{
			PORTB |= _BV(PB5);
 1aa:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
			PORTB &= ~_BV(PB5);
 1b2:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
 1ba:	f7 cf       	rjmp	.-18     	; 0x1aa <blink+0x34>
		}
	}
	else if((n==0)&&(delay==0))
	{
		if(bit_is_set(PINB,PB5))
 1bc:	1d 9b       	sbis	0x03, 5	; 3
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <blink+0x4e>
			PORTB &= ~_BV(PB5);
 1c0:	2d 98       	cbi	0x05, 5	; 5
 1c2:	ed cf       	rjmp	.-38     	; 0x19e <blink+0x28>
		else
			PORTB |= _BV(PB5);
 1c4:	2d 9a       	sbi	0x05, 5	; 5
	}
}
 1c6:	eb cf       	rjmp	.-42     	; 0x19e <blink+0x28>

000001c8 <usart_putchar>:
#include "stdlib.h"
#include "stdio.h"
#include "functions.h"

int usart_putchar(char c)
{
 1c8:	cf 93       	push	r28
 1ca:	c8 2f       	mov	r28, r24
    if(c == '\n')
 1cc:	8a 30       	cpi	r24, 0x0A	; 10
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <usart_putchar+0xe>
        usart_putchar('\r');
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_putchar>
    loop_until_bit_is_set(UCSR0A, UDRE0);
 1d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1da:	85 ff       	sbrs	r24, 5
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <usart_putchar+0xe>
    UDR0 = c;
 1de:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    return 0;
}
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <miniprintf>:

void miniprintf(char *fmt, ...)
{
 1ea:	cf 92       	push	r12
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <miniprintf+0x12>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <miniprintf+0x14>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <miniprintf+0x16>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	fe 01       	movw	r30, r28
 206:	71 96       	adiw	r30, 0x11	; 17
 208:	c1 90       	ld	r12, Z+
 20a:	d1 90       	ld	r13, Z+
    va_list ap;
    char strval[6];
    char *p;
    int nval;
    uint8_t i;
    va_start(ap, fmt);
 20c:	8f 01       	movw	r16, r30
    for(p = fmt; *p; p++)
 20e:	f6 01       	movw	r30, r12
 210:	80 81       	ld	r24, Z
 212:	81 11       	cpse	r24, r1
 214:	0f c0       	rjmp	.+30     	; 0x234 <miniprintf+0x4a>
        i = 0;
        for(i = 0; strval[i]; i++)
            usart_putchar(strval[i]);
    }
    va_end(ap);
}
 216:	26 96       	adiw	r28, 0x06	; 6
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	08 95       	ret
    int nval;
    uint8_t i;
    va_start(ap, fmt);
    for(p = fmt; *p; p++)
    {
        if(*p != '%')
 234:	85 32       	cpi	r24, 0x25	; 37
 236:	31 f0       	breq	.+12     	; 0x244 <miniprintf+0x5a>
        {
            usart_putchar(*p);
 238:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_putchar>
    char strval[6];
    char *p;
    int nval;
    uint8_t i;
    va_start(ap, fmt);
    for(p = fmt; *p; p++)
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	c8 1a       	sub	r12, r24
 240:	d8 0a       	sbc	r13, r24
 242:	e5 cf       	rjmp	.-54     	; 0x20e <miniprintf+0x24>
        {
            usart_putchar(*p);
            continue;
        }
        p++;
        switch(*p)
 244:	f6 01       	movw	r30, r12
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	84 36       	cpi	r24, 0x64	; 100
 24a:	81 f0       	breq	.+32     	; 0x26c <miniprintf+0x82>
 24c:	88 37       	cpi	r24, 0x78	; 120
 24e:	e9 f0       	breq	.+58     	; 0x28a <miniprintf+0xa0>
            case 'd': 
                nval = va_arg(ap, int);
                itoa(nval, strval, 10);
                break;
            case 'x':
                nval = va_arg(ap, int);
 250:	f1 2c       	mov	r15, r1
                itoa(nval, strval, 16);
                break;
        }
        i = 0;
        for(i = 0; strval[i]; i++)
 252:	e1 e0       	ldi	r30, 0x01	; 1
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ec 0f       	add	r30, r28
 258:	fd 1f       	adc	r31, r29
 25a:	ef 0d       	add	r30, r15
 25c:	f1 1d       	adc	r31, r1
 25e:	80 81       	ld	r24, Z
 260:	81 11       	cpse	r24, r1
 262:	19 c0       	rjmp	.+50     	; 0x296 <miniprintf+0xac>
 264:	ff ef       	ldi	r31, 0xFF	; 255
 266:	cf 1a       	sub	r12, r31
 268:	df 0a       	sbc	r13, r31
 26a:	e8 cf       	rjmp	.-48     	; 0x23c <miniprintf+0x52>
        }
        p++;
        switch(*p)
        {
            case 'd': 
                nval = va_arg(ap, int);
 26c:	78 01       	movw	r14, r16
 26e:	f2 e0       	ldi	r31, 0x02	; 2
 270:	ef 0e       	add	r14, r31
 272:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 274:	4a e0       	ldi	r20, 0x0A	; 10
 276:	be 01       	movw	r22, r28
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	f8 01       	movw	r30, r16
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__itoa_ncheck>
 286:	87 01       	movw	r16, r14
 288:	e3 cf       	rjmp	.-58     	; 0x250 <miniprintf+0x66>
                itoa(nval, strval, 10);
                break;
            case 'x':
                nval = va_arg(ap, int);
 28a:	78 01       	movw	r14, r16
 28c:	f2 e0       	ldi	r31, 0x02	; 2
 28e:	ef 0e       	add	r14, r31
 290:	f1 1c       	adc	r15, r1
 292:	40 e1       	ldi	r20, 0x10	; 16
 294:	f0 cf       	rjmp	.-32     	; 0x276 <miniprintf+0x8c>
                itoa(nval, strval, 16);
                break;
        }
        i = 0;
        for(i = 0; strval[i]; i++)
            usart_putchar(strval[i]);
 296:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_putchar>
                nval = va_arg(ap, int);
                itoa(nval, strval, 16);
                break;
        }
        i = 0;
        for(i = 0; strval[i]; i++)
 29a:	f3 94       	inc	r15
 29c:	da cf       	rjmp	.-76     	; 0x252 <miniprintf+0x68>

0000029e <usart_ini>:
    va_end(ap);
}

void usart_ini(void)
{
    set_bits(UCSR0B, _BV(TXEN0));
 29e:	e1 ec       	ldi	r30, 0xC1	; 193
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	80 83       	st	Z, r24
    UBRR0 = 51;
 2a8:	83 e3       	ldi	r24, 0x33	; 51
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
}
 2b4:	08 95       	ret

000002b6 <main>:

int main(void) 
{
    uint8_t i = 0;
    usart_ini();
 2b6:	0e 94 4f 01 	call	0x29e	; 0x29e <usart_ini>
    UBRR0 = 51;
}

int main(void) 
{
    uint8_t i = 0;
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
    usart_ini();
    while(1)
    {
        miniprintf("dec: %d\n", i);
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	e8 2e       	mov	r14, r24
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	f8 2e       	mov	r15, r24
        miniprintf("hex: %x\n", i);
 2c4:	09 e0       	ldi	r16, 0x09	; 9
 2c6:	11 e0       	ldi	r17, 0x01	; 1
{
    uint8_t i = 0;
    usart_ini();
    while(1)
    {
        miniprintf("dec: %d\n", i);
 2c8:	1f 92       	push	r1
 2ca:	cf 93       	push	r28
 2cc:	ff 92       	push	r15
 2ce:	ef 92       	push	r14
 2d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <miniprintf>
        miniprintf("hex: %x\n", i);
 2d4:	1f 92       	push	r1
 2d6:	cf 93       	push	r28
 2d8:	1f 93       	push	r17
 2da:	0f 93       	push	r16
 2dc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <miniprintf>
        i++;
 2e0:	cf 5f       	subi	r28, 0xFF	; 255
        delay_ms(1000);
 2e2:	88 ee       	ldi	r24, 0xE8	; 232
 2e4:	93 e0       	ldi	r25, 0x03	; 3
 2e6:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_ms>
 2ea:	8d b7       	in	r24, 0x3d	; 61
 2ec:	9e b7       	in	r25, 0x3e	; 62
 2ee:	08 96       	adiw	r24, 0x08	; 8
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	9e bf       	out	0x3e, r25	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	8d bf       	out	0x3d, r24	; 61
 2fa:	e6 cf       	rjmp	.-52     	; 0x2c8 <main+0x12>

000002fc <__itoa_ncheck>:
 2fc:	bb 27       	eor	r27, r27
 2fe:	4a 30       	cpi	r20, 0x0A	; 10
 300:	31 f4       	brne	.+12     	; 0x30e <__itoa_ncheck+0x12>
 302:	99 23       	and	r25, r25
 304:	22 f4       	brpl	.+8      	; 0x30e <__itoa_ncheck+0x12>
 306:	bd e2       	ldi	r27, 0x2D	; 45
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	0c 94 8a 01 	jmp	0x314	; 0x314 <__utoa_common>

00000312 <__utoa_ncheck>:
 312:	bb 27       	eor	r27, r27

00000314 <__utoa_common>:
 314:	fb 01       	movw	r30, r22
 316:	55 27       	eor	r21, r21
 318:	aa 27       	eor	r26, r26
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	aa 1f       	adc	r26, r26
 320:	a4 17       	cp	r26, r20
 322:	10 f0       	brcs	.+4      	; 0x328 <__utoa_common+0x14>
 324:	a4 1b       	sub	r26, r20
 326:	83 95       	inc	r24
 328:	50 51       	subi	r21, 0x10	; 16
 32a:	b9 f7       	brne	.-18     	; 0x31a <__utoa_common+0x6>
 32c:	a0 5d       	subi	r26, 0xD0	; 208
 32e:	aa 33       	cpi	r26, 0x3A	; 58
 330:	08 f0       	brcs	.+2      	; 0x334 <__utoa_common+0x20>
 332:	a9 5d       	subi	r26, 0xD9	; 217
 334:	a1 93       	st	Z+, r26
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	79 f7       	brne	.-34     	; 0x318 <__utoa_common+0x4>
 33a:	b1 11       	cpse	r27, r1
 33c:	b1 93       	st	Z+, r27
 33e:	11 92       	st	Z+, r1
 340:	cb 01       	movw	r24, r22
 342:	0c 94 a3 01 	jmp	0x346	; 0x346 <strrev>

00000346 <strrev>:
 346:	dc 01       	movw	r26, r24
 348:	fc 01       	movw	r30, r24
 34a:	67 2f       	mov	r22, r23
 34c:	71 91       	ld	r23, Z+
 34e:	77 23       	and	r23, r23
 350:	e1 f7       	brne	.-8      	; 0x34a <strrev+0x4>
 352:	32 97       	sbiw	r30, 0x02	; 2
 354:	04 c0       	rjmp	.+8      	; 0x35e <strrev+0x18>
 356:	7c 91       	ld	r23, X
 358:	6d 93       	st	X+, r22
 35a:	70 83       	st	Z, r23
 35c:	62 91       	ld	r22, -Z
 35e:	ae 17       	cp	r26, r30
 360:	bf 07       	cpc	r27, r31
 362:	c8 f3       	brcs	.-14     	; 0x356 <strrev+0x10>
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
