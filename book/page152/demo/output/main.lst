
output/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000894  00000928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080013a  0080013a  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001494  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b41  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac6  00000000  00000000  000029f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  000034b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  000037bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000121c  00000000  00000000  00003cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00004ec7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <main>
  9e:	0c 94 48 04 	jmp	0x890	; 0x890 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <avr_uart_putchar>:

	xdev_out(avr_uart_putchar);
}

void avr_uart_putchar(char c, FILE *stream) 
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <avr_uart_putchar+0xe>
        avr_uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <avr_uart_putchar+0xe>
    UDR0 = c;
  bc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <avr_uart_getchar>:

char avr_uart_getchar(FILE *stream) 
{
    loop_until_bit_is_set(UCSR0A, RXC0);
  c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <avr_uart_getchar>
    return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  d0:	08 95       	ret

000000d2 <avr_uart_getchar_echo>:


char avr_uart_getchar_echo(FILE *stream) 
{
  d2:	cf 93       	push	r28
    loop_until_bit_is_set(UCSR0A, RXC0);
  d4:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	27 ff       	sbrs	r18, 7
  da:	fc cf       	rjmp	.-8      	; 0xd4 <avr_uart_getchar_echo+0x2>
    char c=UDR0;
  dc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    avr_uart_putchar(c, stream);
  e0:	bc 01       	movw	r22, r24
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <avr_uart_putchar>
    return c;
}
  e8:	8c 2f       	mov	r24, r28
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <delay_ms>:
// }

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	40 ed       	ldi	r20, 0xD0	; 208
  f4:	57 e0       	ldi	r21, 0x07	; 7
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	09 f4       	brne	.+2      	; 0xfe <delay_ms+0x10>
    {
        _delay_loop_2(2000);//8M, _delay_loop_2(1) is four clock cycle (4/8000000)
    }
}
  fc:	08 95       	ret
  fe:	fa 01       	movw	r30, r20
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <delay_ms+0x12>
// }

void delay_ms(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	f6 cf       	rjmp	.-20     	; 0xf6 <delay_ms+0x8>

0000010a <delay_us>:
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	42 e0       	ldi	r20, 0x02	; 2
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	09 f4       	brne	.+2      	; 0x11a <delay_us+0x10>
    {
        _delay_loop_2(2);
    }
}
 118:	08 95       	ret
 11a:	fa 01       	movw	r30, r20
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <delay_us+0x12>
}

void delay_us(uint16_t t)
{
    uint16_t i;
    for(i = 0; i < t; i++)
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	f6 cf       	rjmp	.-20     	; 0x112 <delay_us+0x8>

00000126 <blink>:
//delay: blink time interval
//n>0,delay>0  normal 
//n=0,delay>0  cycle 
//n=0,delay=0  toggle 
void blink(uint8_t n,uint16_t delay)
{
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	18 2f       	mov	r17, r24
 12e:	eb 01       	movw	r28, r22
	DDRB |= _BV(PB5);
 130:	25 9a       	sbi	0x04, 5	; 4
	if((n>0)&&(delay>0))
 132:	88 23       	and	r24, r24
 134:	81 f0       	breq	.+32     	; 0x156 <blink+0x30>
 136:	20 97       	sbiw	r28, 0x00	; 0
 138:	51 f0       	breq	.+20     	; 0x14e <blink+0x28>
	{
		while(n)
		{

			PORTB |= _BV(PB5);
 13a:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
			PORTB &= ~_BV(PB5);
 142:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 144:	ce 01       	movw	r24, r28
 146:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
			n--;
 14a:	11 50       	subi	r17, 0x01	; 1
void blink(uint8_t n,uint16_t delay)
{
	DDRB |= _BV(PB5);
	if((n>0)&&(delay>0))
	{
		while(n)
 14c:	b1 f7       	brne	.-20     	; 0x13a <blink+0x14>
		if(bit_is_set(PINB,PB5))
			PORTB &= ~_BV(PB5);
		else
			PORTB |= _BV(PB5);
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	08 95       	ret
			PORTB &= ~_BV(PB5);
			delay_ms(delay);
			n--;
		}
	}
	else if((n==0)&&(delay>0))
 156:	20 97       	sbiw	r28, 0x00	; 0
 158:	49 f0       	breq	.+18     	; 0x16c <blink+0x46>
	{
		while(1)
		{
			PORTB |= _BV(PB5);
 15a:	2d 9a       	sbi	0x05, 5	; 5
			delay_ms(delay);
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
			PORTB &= ~_BV(PB5);
 162:	2d 98       	cbi	0x05, 5	; 5
			delay_ms(delay);
 164:	ce 01       	movw	r24, r28
 166:	0e 94 77 00 	call	0xee	; 0xee <delay_ms>
 16a:	f7 cf       	rjmp	.-18     	; 0x15a <blink+0x34>
		}
	}
	else if((n==0)&&(delay==0))
	{
		if(bit_is_set(PINB,PB5))
 16c:	1d 9b       	sbis	0x03, 5	; 3
 16e:	02 c0       	rjmp	.+4      	; 0x174 <blink+0x4e>
			PORTB &= ~_BV(PB5);
 170:	2d 98       	cbi	0x05, 5	; 5
 172:	ed cf       	rjmp	.-38     	; 0x14e <blink+0x28>
		else
			PORTB |= _BV(PB5);
 174:	2d 9a       	sbi	0x05, 5	; 5
	}
}
 176:	eb cf       	rjmp	.-42     	; 0x14e <blink+0x28>

00000178 <avr_uart_init>:
#endif
#include "util/setbaud.h"

void avr_uart_init(void) 
{
    UBRR0H = UBRRH_VALUE;
 178:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = UBRRL_VALUE;
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
 182:	e0 ec       	ldi	r30, 0xC0	; 192
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	80 83       	st	Z, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	stdout = &avr_uart_output;
 198:	e8 e4       	ldi	r30, 0x48	; 72
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	8c e1       	ldi	r24, 0x1C	; 28
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	93 83       	std	Z+3, r25	; 0x03
 1a2:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &avr_uart_input;
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	80 83       	st	Z, r24

	xdev_out(avr_uart_putchar);
 1ac:	83 e5       	ldi	r24, 0x53	; 83
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <xfunc_output+0x1>
 1b4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <xfunc_output>
}
 1b8:	08 95       	ret

000001ba <avr_uart_data_avaiable>:
}

// return 0 if no data available, read it if available
bool avr_uart_data_avaiable(char *data) 
{
    if (UCSR0A & (1<<RXC0)) {
 1ba:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1be:	27 ff       	sbrs	r18, 7
 1c0:	06 c0       	rjmp	.+12     	; 0x1ce <avr_uart_data_avaiable+0x14>
        *data = UDR0;
 1c2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
        return true;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
    }
    return false;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
}
 1d0:	08 95       	ret

000001d2 <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 1d2:	fc 01       	movw	r30, r24
 1d4:	cb 01       	movw	r24, r22
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
 1d6:	30 97       	sbiw	r30, 0x00	; 0
 1d8:	09 f0       	breq	.+2      	; 0x1dc <xfputc+0xa>
		func(chr);		/* Write a character to the output device */
 1da:	09 94       	ijmp
	} else if (strptr) {
 1dc:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
 1e0:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x1>
 1e4:	30 97       	sbiw	r30, 0x00	; 0
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <xfputc+0x26>
		 *strptr++ = chr;	/* Write a character to the memory */
 1e8:	9f 01       	movw	r18, r30
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
 1f2:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
 1f6:	60 83       	st	Z, r22
	}
}
 1f8:	08 95       	ret

000001fa <xputc>:

void xputc (
	int chr				/* Character to be output */
)
{
	xfputc(xfunc_output, chr);	/* Output it to the default output device */
 1fa:	bc 01       	movw	r22, r24
 1fc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <xfunc_output>
 200:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <xfunc_output+0x1>
 204:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <xfputc>

00000208 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 208:	2f 92       	push	r2
 20a:	3f 92       	push	r3
 20c:	4f 92       	push	r4
 20e:	5f 92       	push	r5
 210:	6f 92       	push	r6
 212:	7f 92       	push	r7
 214:	8f 92       	push	r8
 216:	9f 92       	push	r9
 218:	af 92       	push	r10
 21a:	bf 92       	push	r11
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	a8 97       	sbiw	r28, 0x28	; 40
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	2c 01       	movw	r4, r24
 23e:	3b 01       	movw	r6, r22
 240:	7a 01       	movw	r14, r20
 242:	9e 01       	movw	r18, r28
 244:	2f 5f       	subi	r18, 0xFF	; 255
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	3a a3       	std	Y+34, r19	; 0x22
 24a:	29 a3       	std	Y+33, r18	; 0x21
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 24c:	d3 01       	movw	r26, r6
 24e:	6c 91       	ld	r22, X
		if (!c) break;				/* End of format? */
 250:	66 23       	and	r22, r22
 252:	09 f4       	brne	.+2      	; 0x256 <xvfprintf+0x4e>
 254:	b5 c1       	rjmp	.+874    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
		if (c != '%') {				/* Pass it through if not a % sequense */
 256:	65 32       	cpi	r22, 0x25	; 37
 258:	61 f0       	breq	.+24     	; 0x272 <xvfprintf+0x6a>
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 25a:	bf ef       	ldi	r27, 0xFF	; 255
 25c:	6b 1a       	sub	r6, r27
 25e:	7b 0a       	sbc	r7, r27
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
 260:	06 2e       	mov	r0, r22
 262:	00 0c       	add	r0, r0
 264:	77 0b       	sbc	r23, r23
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 266:	c2 01       	movw	r24, r4
 268:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 26c:	fc a2       	std	Y+36, r15	; 0x24
 26e:	eb a2       	std	Y+35, r14	; 0x23
 270:	39 c1       	rjmp	.+626    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 272:	f3 01       	movw	r30, r6
 274:	21 81       	ldd	r18, Z+1	; 0x01
		if (c == '0') {				/* Flag: left '0' padded */
 276:	20 33       	cpi	r18, 0x30	; 48
 278:	09 f0       	breq	.+2      	; 0x27c <xvfprintf+0x74>
 27a:	41 c0       	rjmp	.+130    	; 0x2fe <xvfprintf+0xf6>
			pad = '0'; c = *fmt++;
 27c:	33 96       	adiw	r30, 0x03	; 3
 27e:	2d a3       	std	Y+37, r18	; 0x25
 280:	12 96       	adiw	r26, 0x02	; 2
 282:	2c 91       	ld	r18, X
		c = *fmt++;					/* Get a format character */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
 284:	b1 2c       	mov	r11, r1
 286:	a1 2c       	mov	r10, r1
 288:	31 2c       	mov	r3, r1
 28a:	21 2c       	mov	r2, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 28c:	2a 32       	cpi	r18, 0x2A	; 42
 28e:	09 f0       	breq	.+2      	; 0x292 <xvfprintf+0x8a>
 290:	54 c0       	rjmp	.+168    	; 0x33a <xvfprintf+0x132>
			n = va_arg(arp, int);
 292:	c7 01       	movw	r24, r14
 294:	02 96       	adiw	r24, 0x02	; 2
 296:	d7 01       	movw	r26, r14
 298:	2d 90       	ld	r2, X+
 29a:	3c 90       	ld	r3, X
			if (n < 0) {			/* Flag: left justified */
 29c:	37 fe       	sbrs	r3, 7
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <xvfprintf+0xa4>
				n = 0 - n; f = 2;
 2a0:	31 94       	neg	r3
 2a2:	21 94       	neg	r2
 2a4:	31 08       	sbc	r3, r1
 2a6:	22 e0       	ldi	r18, 0x02	; 2
 2a8:	a2 2e       	mov	r10, r18
 2aa:	b1 2c       	mov	r11, r1
			}
			w = n; c = *fmt++;
 2ac:	3f 01       	movw	r6, r30
 2ae:	bf ef       	ldi	r27, 0xFF	; 255
 2b0:	6b 1a       	sub	r6, r27
 2b2:	7b 0a       	sbc	r7, r27
 2b4:	20 81       	ld	r18, Z
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
			n = va_arg(arp, int);
 2b6:	7c 01       	movw	r14, r24
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 2b8:	0f ef       	ldi	r16, 0xFF	; 255
 2ba:	1f ef       	ldi	r17, 0xFF	; 255
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
 2bc:	2e 32       	cpi	r18, 0x2E	; 46
 2be:	09 f0       	breq	.+2      	; 0x2c2 <xvfprintf+0xba>
 2c0:	4c c0       	rjmp	.+152    	; 0x35a <xvfprintf+0x152>
			c = *fmt++;
 2c2:	d3 01       	movw	r26, r6
 2c4:	2c 91       	ld	r18, X
			if (c == '*') {				/* Precision from an argument */
 2c6:	2a 32       	cpi	r18, 0x2A	; 42
 2c8:	09 f4       	brne	.+2      	; 0x2cc <xvfprintf+0xc4>
 2ca:	3d c0       	rjmp	.+122    	; 0x346 <xvfprintf+0x13e>
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
 2cc:	f3 01       	movw	r30, r6
 2ce:	31 96       	adiw	r30, 0x01	; 1
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
				c = *fmt++;
			} else {
				prec = 0;
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	00 e0       	ldi	r16, 0x00	; 0
 2d4:	3f 01       	movw	r6, r30
				while (c >= '0' && c <= '9') {
 2d6:	80 ed       	ldi	r24, 0xD0	; 208
 2d8:	82 0f       	add	r24, r18
 2da:	8a 30       	cpi	r24, 0x0A	; 10
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <xvfprintf+0xd8>
 2de:	3d c0       	rjmp	.+122    	; 0x35a <xvfprintf+0x152>
					prec = prec * 10 + c - '0';
 2e0:	aa e0       	ldi	r26, 0x0A	; 10
 2e2:	a0 9f       	mul	r26, r16
 2e4:	c0 01       	movw	r24, r0
 2e6:	a1 9f       	mul	r26, r17
 2e8:	90 0d       	add	r25, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	8c 01       	movw	r16, r24
 2ee:	02 0f       	add	r16, r18
 2f0:	11 1d       	adc	r17, r1
 2f2:	27 fd       	sbrc	r18, 7
 2f4:	1a 95       	dec	r17
 2f6:	00 53       	subi	r16, 0x30	; 48
 2f8:	11 09       	sbc	r17, r1
					c = *fmt++;
 2fa:	21 91       	ld	r18, Z+
 2fc:	eb cf       	rjmp	.-42     	; 0x2d4 <xvfprintf+0xcc>
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 2fe:	2d 32       	cpi	r18, 0x2D	; 45
 300:	21 f0       	breq	.+8      	; 0x30a <xvfprintf+0x102>
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
		c = *fmt++;					/* Get first char of the sequense */
 302:	32 96       	adiw	r30, 0x02	; 2
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 304:	b0 e2       	ldi	r27, 0x20	; 32
 306:	bd a3       	std	Y+37, r27	; 0x25
 308:	bd cf       	rjmp	.-134    	; 0x284 <xvfprintf+0x7c>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 30a:	33 96       	adiw	r30, 0x03	; 3
 30c:	12 96       	adiw	r26, 0x02	; 2
 30e:	2c 91       	ld	r18, X
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass it through if not a % sequense */
			xfputc(func, c); continue;
		}
		f = w = 0;			 		/* Clear parms */
		pad = ' '; prec = -1;
 310:	b0 e2       	ldi	r27, 0x20	; 32
 312:	bd a3       	std	Y+37, r27	; 0x25
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: left '0' padded */
			pad = '0'; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 314:	32 e0       	ldi	r19, 0x02	; 2
 316:	a3 2e       	mov	r10, r19
 318:	b1 2c       	mov	r11, r1
 31a:	b6 cf       	rjmp	.-148    	; 0x288 <xvfprintf+0x80>
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 31c:	3a e0       	ldi	r19, 0x0A	; 10
 31e:	32 9d       	mul	r19, r2
 320:	c0 01       	movw	r24, r0
 322:	33 9d       	mul	r19, r3
 324:	90 0d       	add	r25, r0
 326:	11 24       	eor	r1, r1
 328:	1c 01       	movw	r2, r24
 32a:	22 0e       	add	r2, r18
 32c:	31 1c       	adc	r3, r1
 32e:	27 fd       	sbrc	r18, 7
 330:	3a 94       	dec	r3
 332:	80 e3       	ldi	r24, 0x30	; 48
 334:	28 1a       	sub	r2, r24
 336:	31 08       	sbc	r3, r1
				c = *fmt++;
 338:	21 91       	ld	r18, Z+
 33a:	3f 01       	movw	r6, r30
			if (n < 0) {			/* Flag: left justified */
				n = 0 - n; f = 2;
			}
			w = n; c = *fmt++;
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
 33c:	80 ed       	ldi	r24, 0xD0	; 208
 33e:	82 0f       	add	r24, r18
 340:	8a 30       	cpi	r24, 0x0A	; 10
 342:	60 f3       	brcs	.-40     	; 0x31c <xvfprintf+0x114>
 344:	b9 cf       	rjmp	.-142    	; 0x2b8 <xvfprintf+0xb0>
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 346:	f7 01       	movw	r30, r14
 348:	00 81       	ld	r16, Z
 34a:	11 81       	ldd	r17, Z+1	; 0x01
				c = *fmt++;
 34c:	11 96       	adiw	r26, 0x01	; 1
 34e:	2c 91       	ld	r18, X
			}
		}
		if (c == '.') {				/* Precision */
			c = *fmt++;
			if (c == '*') {				/* Precision from an argument */
				prec = va_arg(arp, int);
 350:	32 96       	adiw	r30, 0x02	; 2
 352:	7f 01       	movw	r14, r30
				c = *fmt++;
 354:	c3 01       	movw	r24, r6
 356:	02 96       	adiw	r24, 0x02	; 2
 358:	3c 01       	movw	r6, r24
					prec = prec * 10 + c - '0';
					c = *fmt++;
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 35a:	2c 36       	cpi	r18, 0x6C	; 108
 35c:	39 f4       	brne	.+14     	; 0x36c <xvfprintf+0x164>
			f |= 4; c = *fmt++;
 35e:	68 94       	set
 360:	a2 f8       	bld	r10, 2
 362:	f3 01       	movw	r30, r6
 364:	20 81       	ld	r18, Z
 366:	c3 01       	movw	r24, r6
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	3c 01       	movw	r6, r24
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 36c:	22 23       	and	r18, r18
 36e:	09 f4       	brne	.+2      	; 0x372 <xvfprintf+0x16a>
 370:	27 c1       	rjmp	.+590    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
		switch (c) {				/* Type is... */
 372:	24 36       	cpi	r18, 0x64	; 100
 374:	09 f4       	brne	.+2      	; 0x378 <xvfprintf+0x170>
 376:	a7 c0       	rjmp	.+334    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 378:	64 f4       	brge	.+24     	; 0x392 <xvfprintf+0x18a>
 37a:	22 36       	cpi	r18, 0x62	; 98
 37c:	09 f4       	brne	.+2      	; 0x380 <xvfprintf+0x178>
 37e:	00 c1       	rjmp	.+512    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 380:	0c f0       	brlt	.+2      	; 0x384 <xvfprintf+0x17c>
 382:	a4 c0       	rjmp	.+328    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 384:	28 35       	cpi	r18, 0x58	; 88
 386:	09 f4       	brne	.+2      	; 0x38a <xvfprintf+0x182>
 388:	9b c0       	rjmp	.+310    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 38a:	62 2f       	mov	r22, r18
 38c:	22 0f       	add	r18, r18
 38e:	77 0b       	sbc	r23, r23
 390:	6a cf       	rjmp	.-300    	; 0x266 <xvfprintf+0x5e>
 392:	23 37       	cpi	r18, 0x73	; 115
 394:	09 f4       	brne	.+2      	; 0x398 <xvfprintf+0x190>
 396:	a9 c0       	rjmp	.+338    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 398:	0c f0       	brlt	.+2      	; 0x39c <xvfprintf+0x194>
 39a:	8d c0       	rjmp	.+282    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		case 'b':					/* Unsigned binary */
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
 39c:	e8 e0       	ldi	r30, 0x08	; 8
 39e:	f0 e0       	ldi	r31, 0x00	; 0
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 3a0:	2f 36       	cpi	r18, 0x6F	; 111
 3a2:	99 f7       	brne	.-26     	; 0x38a <xvfprintf+0x182>
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
 3a4:	c7 01       	movw	r24, r14
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 3a6:	a2 fe       	sbrs	r10, 2
 3a8:	ee c0       	rjmp	.+476    	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
			v = (long)va_arg(arp, long);
 3aa:	04 96       	adiw	r24, 0x04	; 4
 3ac:	9c a3       	std	Y+36, r25	; 0x24
 3ae:	8b a3       	std	Y+35, r24	; 0x23
 3b0:	d7 01       	movw	r26, r14
 3b2:	4d 91       	ld	r20, X+
 3b4:	5d 91       	ld	r21, X+
 3b6:	6d 91       	ld	r22, X+
 3b8:	7c 91       	ld	r23, X
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 3ba:	24 36       	cpi	r18, 0x64	; 100
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <xvfprintf+0x1cc>
 3be:	77 ff       	sbrs	r23, 7
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <xvfprintf+0x1cc>
			v = 0 - v; f |= 1;
 3c2:	70 95       	com	r23
 3c4:	60 95       	com	r22
 3c6:	50 95       	com	r21
 3c8:	41 95       	neg	r20
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	6f 4f       	sbci	r22, 0xFF	; 255
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	68 94       	set
 3d2:	a0 f8       	bld	r10, 0
		}
		i = 0; uv = v;
 3d4:	b4 2f       	mov	r27, r20
 3d6:	a5 2f       	mov	r26, r21
 3d8:	cb 01       	movw	r24, r22
 3da:	28 37       	cpi	r18, 0x78	; 120
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <xvfprintf+0x1d8>
 3de:	e3 c0       	rjmp	.+454    	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 3e0:	27 e2       	ldi	r18, 0x27	; 39
 3e2:	28 a7       	std	Y+40, r18	; 0x28
 3e4:	9e 01       	movw	r18, r28
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ea:	3f a3       	std	Y+39, r19	; 0x27
 3ec:	2e a3       	std	Y+38, r18	; 0x26
 3ee:	91 2c       	mov	r9, r1
 3f0:	81 2c       	mov	r8, r1
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
 3f2:	6f 01       	movw	r12, r30
 3f4:	f1 2c       	mov	r15, r1
 3f6:	e1 2c       	mov	r14, r1
 3f8:	6b 2f       	mov	r22, r27
 3fa:	7a 2f       	mov	r23, r26
 3fc:	a7 01       	movw	r20, r14
 3fe:	96 01       	movw	r18, r12
 400:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodsi4>
 404:	76 2f       	mov	r23, r22
 406:	b2 2f       	mov	r27, r18
 408:	a3 2f       	mov	r26, r19
 40a:	ca 01       	movw	r24, r20
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 40c:	6a 30       	cpi	r22, 0x0A	; 10
 40e:	14 f0       	brlt	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	78 a5       	ldd	r23, Y+40	; 0x28
 412:	76 0f       	add	r23, r22
			str[i++] = d + '0';
 414:	84 01       	movw	r16, r8
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	60 e3       	ldi	r22, 0x30	; 48
 41c:	67 0f       	add	r22, r23
 41e:	ee a1       	ldd	r30, Y+38	; 0x26
 420:	ff a1       	ldd	r31, Y+39	; 0x27
 422:	61 93       	st	Z+, r22
 424:	ff a3       	std	Y+39, r31	; 0x27
 426:	ee a3       	std	Y+38, r30	; 0x26
		} while (uv != 0 && i < sizeof str);
 428:	23 2b       	or	r18, r19
 42a:	24 2b       	or	r18, r20
 42c:	25 2b       	or	r18, r21
 42e:	39 f0       	breq	.+14     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 430:	00 32       	cpi	r16, 0x20	; 32
 432:	11 05       	cpc	r17, r1
 434:	09 f0       	breq	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	ba c0       	rjmp	.+372    	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
 438:	8f e1       	ldi	r24, 0x1F	; 31
 43a:	88 2e       	mov	r8, r24
 43c:	91 2c       	mov	r9, r1
		if (f & 1) str[i++] = '-';					/* Sign */
 43e:	a0 fe       	sbrs	r10, 0
 440:	0b c0       	rjmp	.+22     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 442:	e1 e0       	ldi	r30, 0x01	; 1
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ec 0f       	add	r30, r28
 448:	fd 1f       	adc	r31, r29
 44a:	e0 0f       	add	r30, r16
 44c:	f1 1f       	adc	r31, r17
 44e:	2d e2       	ldi	r18, 0x2D	; 45
 450:	20 83       	st	Z, r18
 452:	84 01       	movw	r16, r8
 454:	0e 5f       	subi	r16, 0xFE	; 254
 456:	1f 4f       	sbci	r17, 0xFF	; 255
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 458:	78 01       	movw	r14, r16
 45a:	32 e0       	ldi	r19, 0x02	; 2
 45c:	a3 22       	and	r10, r19
 45e:	bb 24       	eor	r11, r11
 460:	8d a1       	ldd	r24, Y+37	; 0x25
 462:	88 2e       	mov	r8, r24
 464:	88 0f       	add	r24, r24
 466:	99 08       	sbc	r9, r9
 468:	a1 14       	cp	r10, r1
 46a:	b1 04       	cpc	r11, r1
 46c:	21 f4       	brne	.+8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46e:	e2 14       	cp	r14, r2
 470:	f3 04       	cpc	r15, r3
 472:	08 f4       	brcc	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	9d c0       	rjmp	.+314    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 476:	a1 e0       	ldi	r26, 0x01	; 1
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	ac 0f       	add	r26, r28
 47c:	bd 1f       	adc	r27, r29
 47e:	0a 0f       	add	r16, r26
 480:	1b 1f       	adc	r17, r27
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 482:	f8 01       	movw	r30, r16
 484:	62 91       	ld	r22, -Z
 486:	8f 01       	movw	r16, r30
 488:	06 2e       	mov	r0, r22
 48a:	00 0c       	add	r0, r0
 48c:	77 0b       	sbc	r23, r23
 48e:	c2 01       	movw	r24, r4
 490:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 494:	29 a1       	ldd	r18, Y+33	; 0x21
 496:	3a a1       	ldd	r19, Y+34	; 0x22
 498:	20 17       	cp	r18, r16
 49a:	31 07       	cpc	r19, r17
 49c:	91 f7       	brne	.-28     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 49e:	e2 14       	cp	r14, r2
 4a0:	f3 04       	cpc	r15, r3
 4a2:	00 f5       	brcc	.+64     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4a4:	60 e2       	ldi	r22, 0x20	; 32
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	c2 01       	movw	r24, r4
 4aa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 4ae:	3f ef       	ldi	r19, 0xFF	; 255
 4b0:	e3 1a       	sub	r14, r19
 4b2:	f3 0a       	sbc	r15, r19
 4b4:	f4 cf       	rjmp	.-24     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
 4b6:	25 37       	cpi	r18, 0x75	; 117
 4b8:	31 f0       	breq	.+12     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ba:	28 37       	cpi	r18, 0x78	; 120
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4be:	65 cf       	rjmp	.-310    	; 0x38a <xvfprintf+0x182>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
 4c0:	e0 e1       	ldi	r30, 0x10	; 16
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	6f cf       	rjmp	.-290    	; 0x3a4 <xvfprintf+0x19c>
			r = 2; break;
		case 'o':					/* Unsigned octal */
			r = 8; break;
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 4c6:	ea e0       	ldi	r30, 0x0A	; 10
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	6c cf       	rjmp	.-296    	; 0x3a4 <xvfprintf+0x19c>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 4cc:	d7 01       	movw	r26, r14
 4ce:	12 96       	adiw	r26, 0x02	; 2
 4d0:	bc a3       	std	Y+36, r27	; 0x24
 4d2:	ab a3       	std	Y+35, r26	; 0x23
 4d4:	f7 01       	movw	r30, r14
 4d6:	60 81       	ld	r22, Z
 4d8:	06 2e       	mov	r0, r22
 4da:	00 0c       	add	r0, r0
 4dc:	77 0b       	sbc	r23, r23
 4de:	c2 01       	movw	r24, r4
 4e0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 4e4:	eb a0       	ldd	r14, Y+35	; 0x23
 4e6:	fc a0       	ldd	r15, Y+36	; 0x24
 4e8:	b1 ce       	rjmp	.-670    	; 0x24c <xvfprintf+0x44>
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
 4ea:	97 01       	movw	r18, r14
 4ec:	2e 5f       	subi	r18, 0xFE	; 254
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255
 4f0:	3c a3       	std	Y+36, r19	; 0x24
 4f2:	2b a3       	std	Y+35, r18	; 0x23
 4f4:	d7 01       	movw	r26, r14
 4f6:	cd 90       	ld	r12, X+
 4f8:	dc 90       	ld	r13, X
			if (!p) p = "";				/* Null ptr generates a null string */
 4fa:	c1 14       	cp	r12, r1
 4fc:	d1 04       	cpc	r13, r1
 4fe:	21 f4       	brne	.+8      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 500:	97 e3       	ldi	r25, 0x37	; 55
 502:	c9 2e       	mov	r12, r25
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	d9 2e       	mov	r13, r25
			j = strlen(p);
 508:	c6 01       	movw	r24, r12
 50a:	0e 94 3f 04 	call	0x87e	; 0x87e <strlen>
 50e:	7c 01       	movw	r14, r24
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
 510:	17 fd       	sbrc	r17, 7
 512:	04 c0       	rjmp	.+8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 514:	08 17       	cp	r16, r24
 516:	19 07       	cpc	r17, r25
 518:	08 f4       	brcc	.+2      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 51a:	78 01       	movw	r14, r16
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 51c:	e2 e0       	ldi	r30, 0x02	; 2
 51e:	ae 22       	and	r10, r30
 520:	bb 24       	eor	r11, r11
 522:	fd a1       	ldd	r31, Y+37	; 0x25
 524:	8f 2e       	mov	r8, r31
 526:	ff 0f       	add	r31, r31
 528:	99 08       	sbc	r9, r9
 52a:	07 c0       	rjmp	.+14     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 52c:	b4 01       	movw	r22, r8
 52e:	c2 01       	movw	r24, r4
 530:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 534:	bf ef       	ldi	r27, 0xFF	; 255
 536:	eb 1a       	sub	r14, r27
 538:	fb 0a       	sbc	r15, r27
 53a:	a1 14       	cp	r10, r1
 53c:	b1 04       	cpc	r11, r1
 53e:	19 f4       	brne	.+6      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 540:	e2 14       	cp	r14, r2
 542:	f3 04       	cpc	r15, r3
 544:	98 f3       	brcs	.-26     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
			while (*p && prec--) xfputc(func, *p++);/* String body */
 546:	d6 01       	movw	r26, r12
 548:	6d 91       	ld	r22, X+
 54a:	6d 01       	movw	r12, r26
 54c:	66 23       	and	r22, r22
 54e:	19 f0       	breq	.+6      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 550:	01 15       	cp	r16, r1
 552:	11 05       	cpc	r17, r1
 554:	61 f4       	brne	.+24     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 556:	e2 14       	cp	r14, r2
 558:	f3 04       	cpc	r15, r3
 55a:	20 f6       	brcc	.-120    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 55c:	60 e2       	ldi	r22, 0x20	; 32
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	c2 01       	movw	r24, r4
 562:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 566:	bf ef       	ldi	r27, 0xFF	; 255
 568:	eb 1a       	sub	r14, r27
 56a:	fb 0a       	sbc	r15, r27
 56c:	f4 cf       	rjmp	.-24     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
			p = va_arg(arp, char*);		/* Get a pointer argument */
			if (!p) p = "";				/* Null ptr generates a null string */
			j = strlen(p);
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
			while (*p && prec--) xfputc(func, *p++);/* String body */
 56e:	06 2e       	mov	r0, r22
 570:	00 0c       	add	r0, r0
 572:	77 0b       	sbc	r23, r23
 574:	c2 01       	movw	r24, r4
 576:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 57a:	01 50       	subi	r16, 0x01	; 1
 57c:	11 09       	sbc	r17, r1
 57e:	e3 cf       	rjmp	.-58     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
#endif
		}
		if (!c) break;				/* End of format? */
		switch (c) {				/* Type is... */
		case 'b':					/* Unsigned binary */
			r = 2; break;
 580:	e2 e0       	ldi	r30, 0x02	; 2
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	0f cf       	rjmp	.-482    	; 0x3a4 <xvfprintf+0x19c>
 586:	02 96       	adiw	r24, 0x02	; 2
 588:	9c a3       	std	Y+36, r25	; 0x24
 58a:	8b a3       	std	Y+35, r24	; 0x23
		}
#else
		if (f & 4) {	/* long argument? */
			v = (long)va_arg(arp, long);
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 58c:	d7 01       	movw	r26, r14
 58e:	4d 91       	ld	r20, X+
 590:	5c 91       	ld	r21, X
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	24 36       	cpi	r18, 0x64	; 100
 598:	09 f0       	breq	.+2      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 59a:	1c cf       	rjmp	.-456    	; 0x3d4 <xvfprintf+0x1cc>
 59c:	05 2e       	mov	r0, r21
 59e:	00 0c       	add	r0, r0
 5a0:	66 0b       	sbc	r22, r22
 5a2:	77 0b       	sbc	r23, r23
 5a4:	0c cf       	rjmp	.-488    	; 0x3be <xvfprintf+0x1b6>
 5a6:	37 e0       	ldi	r19, 0x07	; 7
 5a8:	38 a7       	std	Y+40, r19	; 0x28
 5aa:	1c cf       	rjmp	.-456    	; 0x3e4 <xvfprintf+0x1dc>
 5ac:	48 01       	movw	r8, r16
 5ae:	24 cf       	rjmp	.-440    	; 0x3f8 <xvfprintf+0x1f0>
			d = (char)(uv % r); uv /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (uv != 0 && i < sizeof str);
		if (f & 1) str[i++] = '-';					/* Sign */
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 5b0:	b4 01       	movw	r22, r8
 5b2:	c2 01       	movw	r24, r4
 5b4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	e9 1a       	sub	r14, r25
 5bc:	f9 0a       	sbc	r15, r25
 5be:	54 cf       	rjmp	.-344    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
	}
}
 5c0:	a8 96       	adiw	r28, 0x28	; 40
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	bf 90       	pop	r11
 5de:	af 90       	pop	r10
 5e0:	9f 90       	pop	r9
 5e2:	8f 90       	pop	r8
 5e4:	7f 90       	pop	r7
 5e6:	6f 90       	pop	r6
 5e8:	5f 90       	pop	r5
 5ea:	4f 90       	pop	r4
 5ec:	3f 90       	pop	r3
 5ee:	2f 90       	pop	r2
 5f0:	08 95       	ret

000005f2 <xfputs>:

void xfputs (			/* Put a string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	8c 01       	movw	r16, r24
 5fc:	eb 01       	movw	r28, r22
	while (*str) {			/* Put the string */
 5fe:	69 91       	ld	r22, Y+
 600:	61 11       	cpse	r22, r1
 602:	05 c0       	rjmp	.+10     	; 0x60e <xfputs+0x1c>
		xfputc(func, *str++);
	}
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
	while (*str) {			/* Put the string */
		xfputc(func, *str++);
 60e:	06 2e       	mov	r0, r22
 610:	00 0c       	add	r0, r0
 612:	77 0b       	sbc	r23, r23
 614:	c8 01       	movw	r24, r16
 616:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <xfputc>
 61a:	f1 cf       	rjmp	.-30     	; 0x5fe <xfputs+0xc>

0000061c <xputs>:

void xputs (			/* Put a string to the default device */
	const char* str		/* Pointer to the string */
)
{
	xfputs(xfunc_output, str);
 61c:	bc 01       	movw	r22, r24
 61e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <xfunc_output>
 622:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <xfunc_output+0x1>
 626:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <xfputs>

0000062a <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	ae 01       	movw	r20, r28
 634:	4b 5f       	subi	r20, 0xFB	; 251
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	fa 01       	movw	r30, r20
 63a:	61 91       	ld	r22, Z+
 63c:	71 91       	ld	r23, Z+
 63e:	af 01       	movw	r20, r30
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(xfunc_output, fmt, arp);
 640:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <xfunc_output>
 644:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <xfunc_output+0x1>
 648:	0e 94 04 01 	call	0x208	; 0x208 <xvfprintf>
	va_end(arp);
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <xfprintf>:
void xfprintf (			/* Put a formatted string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	va_start(arp, fmt);
	xvfprintf(func, fmt, arp);
 65a:	ae 01       	movw	r20, r28
 65c:	47 5f       	subi	r20, 0xF7	; 247
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	6f 81       	ldd	r22, Y+7	; 0x07
 662:	78 85       	ldd	r23, Y+8	; 0x08
 664:	8d 81       	ldd	r24, Y+5	; 0x05
 666:	9e 81       	ldd	r25, Y+6	; 0x06
 668:	0e 94 04 01 	call	0x208	; 0x208 <xvfprintf>
	va_end(arp);
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	strptr = buff;		/* Enable destination for memory */
 67a:	8d 81       	ldd	r24, Y+5	; 0x05
 67c:	9e 81       	ldd	r25, Y+6	; 0x06
 67e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
 682:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
	va_start(arp, fmt);
	xvfprintf(0, fmt, arp);
 686:	ae 01       	movw	r20, r28
 688:	47 5f       	subi	r20, 0xF7	; 247
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	6f 81       	ldd	r22, Y+7	; 0x07
 68e:	78 85       	ldd	r23, Y+8	; 0x08
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 04 01 	call	0x208	; 0x208 <xvfprintf>
	va_end(arp);
	*strptr = 0;		/* Terminate output string */
 698:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
 69c:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x1>
 6a0:	10 82       	st	Z, r1
	strptr = 0;			/* Disable destination for memory */
 6a2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__data_end+0x1>
 6a6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <init_spi_master>:
// PB3: MOSI --- OUT
// PB4: MISO --- IN
// PB5: SCK  --- OUT
void init_spi_master(void)
{
    set_bits(DDRB, _BV(PB2) | _BV(PB3) | _BV(PB5));
 6b0:	84 b1       	in	r24, 0x04	; 4
 6b2:	8c 62       	ori	r24, 0x2C	; 44
 6b4:	84 b9       	out	0x04, r24	; 4
    set_bits(PORTB, _BV(PB2) | _BV(PB3) | _BV(PB5));
 6b6:	85 b1       	in	r24, 0x05	; 5
 6b8:	8c 62       	ori	r24, 0x2C	; 44
 6ba:	85 b9       	out	0x05, r24	; 5
    clear_bits(DDRB, _BV(PB4));
 6bc:	24 98       	cbi	0x04, 4	; 4
    clear_bits(PORTB, _BV(PB4));
 6be:	2c 98       	cbi	0x05, 4	; 5
    set_bits(SPCR, _BV(SPE) | _BV(MSTR) | _BV(SPR0));
 6c0:	8c b5       	in	r24, 0x2c	; 44
 6c2:	81 65       	ori	r24, 0x51	; 81
 6c4:	8c bd       	out	0x2c, r24	; 44
    set_bits(SPSR, _BV(SPI2X)); 
 6c6:	8d b5       	in	r24, 0x2d	; 45
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	8d bd       	out	0x2d, r24	; 45
}
 6cc:	08 95       	ret

000006ce <spi_tx_byte>:

void spi_tx_byte(uint8_t byte)
{
    SPDR = byte;
 6ce:	8e bd       	out	0x2e, r24	; 46
    loop_until_bit_is_set(SPSR, SPIF);
 6d0:	0d b4       	in	r0, 0x2d	; 45
 6d2:	07 fe       	sbrs	r0, 7
 6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <spi_tx_byte+0x2>
}
 6d6:	08 95       	ret

000006d8 <spi_rx_byte>:

uint8_t spi_rx_byte(void)
{
    uint8_t rx_byte;
    spi_tx_byte(0);
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    loop_until_bit_is_set(SPSR, SPIF);
 6de:	0d b4       	in	r0, 0x2d	; 45
 6e0:	07 fe       	sbrs	r0, 7
 6e2:	fd cf       	rjmp	.-6      	; 0x6de <spi_rx_byte+0x6>
    rx_byte = SPDR;
 6e4:	8e b5       	in	r24, 0x2e	; 46
    return rx_byte;
}
 6e6:	08 95       	ret

000006e8 <write_to_mem>:

void write_to_mem(uint8_t addr, uint8_t data)
{
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	d8 2f       	mov	r29, r24
 6ee:	c6 2f       	mov	r28, r22
    SET_SS_PIN(LOW);
 6f0:	2a 98       	cbi	0x05, 2	; 5
    spi_tx_byte(WRITE_EN_CMD);
 6f2:	86 e0       	ldi	r24, 0x06	; 6
 6f4:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    SET_SS_PIN(HIGH);
 6f8:	2a 9a       	sbi	0x05, 2	; 5
    SET_SS_PIN(LOW);
 6fa:	2a 98       	cbi	0x05, 2	; 5
    spi_tx_byte(WRITE_CMD);
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    spi_tx_byte(addr);
 702:	8d 2f       	mov	r24, r29
 704:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    spi_tx_byte(data);
 708:	8c 2f       	mov	r24, r28
 70a:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    SET_SS_PIN(HIGH);
 70e:	2a 9a       	sbi	0x05, 2	; 5
}
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	08 95       	ret

00000716 <read_from_mem>:

uint8_t read_from_mem(uint8_t addr)
{
 716:	cf 93       	push	r28
 718:	c8 2f       	mov	r28, r24
    uint8_t rx_data;
    SET_SS_PIN(LOW);
 71a:	2a 98       	cbi	0x05, 2	; 5
    spi_tx_byte(READ_CMD);
 71c:	83 e0       	ldi	r24, 0x03	; 3
 71e:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    spi_tx_byte(addr);
 722:	8c 2f       	mov	r24, r28
 724:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    rx_data = spi_rx_byte();
 728:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_rx_byte>
    SET_SS_PIN(HIGH);
 72c:	2a 9a       	sbi	0x05, 2	; 5
    return rx_data;
}
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <read_status>:

uint8_t read_status(void)
{
    uint8_t status;
    SET_SS_PIN(LOW);
 732:	2a 98       	cbi	0x05, 2	; 5
    spi_tx_byte(READ_STATUS);
 734:	85 e0       	ldi	r24, 0x05	; 5
 736:	0e 94 67 03 	call	0x6ce	; 0x6ce <spi_tx_byte>
    status = spi_rx_byte();
 73a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_rx_byte>
    SET_SS_PIN(HIGH);
 73e:	2a 9a       	sbi	0x05, 2	; 5
    return status;
}
 740:	08 95       	ret

00000742 <eeprom_write>:

void eeprom_write(uint8_t start_addr, uint8_t size, uint8_t *data_ptr)
{
 742:	df 92       	push	r13
 744:	ef 92       	push	r14
 746:	ff 92       	push	r15
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	d8 2e       	mov	r13, r24
 752:	7a 01       	movw	r14, r20
	int i = 0;
	for (i = 0; i < size; i++)
 754:	d0 e0       	ldi	r29, 0x00	; 0
 756:	c0 e0       	ldi	r28, 0x00	; 0
 758:	06 2f       	mov	r16, r22
 75a:	10 e0       	ldi	r17, 0x00	; 0
 75c:	c0 17       	cp	r28, r16
 75e:	d1 07       	cpc	r29, r17
 760:	44 f0       	brlt	.+16     	; 0x772 <eeprom_write+0x30>
	{
		write_to_mem(start_addr + i, (*(data_ptr + i)));
		while (read_status() != 0);
	}
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	08 95       	ret
void eeprom_write(uint8_t start_addr, uint8_t size, uint8_t *data_ptr)
{
	int i = 0;
	for (i = 0; i < size; i++)
	{
		write_to_mem(start_addr + i, (*(data_ptr + i)));
 772:	f7 01       	movw	r30, r14
 774:	61 91       	ld	r22, Z+
 776:	7f 01       	movw	r14, r30
 778:	8c 2f       	mov	r24, r28
 77a:	8d 0d       	add	r24, r13
 77c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <write_to_mem>
		while (read_status() != 0);
 780:	0e 94 99 03 	call	0x732	; 0x732 <read_status>
 784:	81 11       	cpse	r24, r1
 786:	fc cf       	rjmp	.-8      	; 0x780 <eeprom_write+0x3e>
}

void eeprom_write(uint8_t start_addr, uint8_t size, uint8_t *data_ptr)
{
	int i = 0;
	for (i = 0; i < size; i++)
 788:	21 96       	adiw	r28, 0x01	; 1
 78a:	e8 cf       	rjmp	.-48     	; 0x75c <eeprom_write+0x1a>

0000078c <eeprom_read>:
		while (read_status() != 0);
	}
}

void eeprom_read(uint8_t start_addr, uint8_t size, uint8_t *data_ptr)
{
 78c:	df 92       	push	r13
 78e:	ef 92       	push	r14
 790:	ff 92       	push	r15
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	d8 2e       	mov	r13, r24
 79c:	7a 01       	movw	r14, r20
	int i = 0;
	for (i = 0; i < size; i++)
 79e:	d0 e0       	ldi	r29, 0x00	; 0
 7a0:	c0 e0       	ldi	r28, 0x00	; 0
 7a2:	06 2f       	mov	r16, r22
 7a4:	10 e0       	ldi	r17, 0x00	; 0
 7a6:	c0 17       	cp	r28, r16
 7a8:	d1 07       	cpc	r29, r17
 7aa:	44 f0       	brlt	.+16     	; 0x7bc <eeprom_read+0x30>
	{
		*(data_ptr + i) = read_from_mem(start_addr + i);
	}
}
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	df 90       	pop	r13
 7ba:	08 95       	ret
void eeprom_read(uint8_t start_addr, uint8_t size, uint8_t *data_ptr)
{
	int i = 0;
	for (i = 0; i < size; i++)
	{
		*(data_ptr + i) = read_from_mem(start_addr + i);
 7bc:	8c 2f       	mov	r24, r28
 7be:	8d 0d       	add	r24, r13
 7c0:	0e 94 8b 03 	call	0x716	; 0x716 <read_from_mem>
 7c4:	f7 01       	movw	r30, r14
 7c6:	81 93       	st	Z+, r24
 7c8:	7f 01       	movw	r14, r30
}

void eeprom_read(uint8_t start_addr, uint8_t size, uint8_t *data_ptr)
{
	int i = 0;
	for (i = 0; i < size; i++)
 7ca:	21 96       	adiw	r28, 0x01	; 1
 7cc:	ec cf       	rjmp	.-40     	; 0x7a6 <eeprom_read+0x1a>

000007ce <main>:
		*(data_ptr + i) = read_from_mem(start_addr + i);
	}
}

int main(void)
{
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
    avr_uart_init();
 7d6:	0e 94 bc 00 	call	0x178	; 0x178 <avr_uart_init>
	init_spi_master();
 7da:	0e 94 58 03 	call	0x6b0	; 0x6b0 <init_spi_master>
	eeprom_write(0x00, SIZE, rom_contents);
 7de:	4a e2       	ldi	r20, 0x2A	; 42
 7e0:	51 e0       	ldi	r21, 0x01	; 1
 7e2:	6a e0       	ldi	r22, 0x0A	; 10
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	0e 94 a1 03 	call	0x742	; 0x742 <eeprom_write>
	eeprom_read(0x00, SIZE, rx_buffer);
 7ea:	4e e3       	ldi	r20, 0x3E	; 62
 7ec:	51 e0       	ldi	r21, 0x01	; 1
 7ee:	6a e0       	ldi	r22, 0x0A	; 10
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	0e 94 c6 03 	call	0x78c	; 0x78c <eeprom_read>
 7f6:	ce e3       	ldi	r28, 0x3E	; 62
 7f8:	d1 e0       	ldi	r29, 0x01	; 1
	for (int j = 0; j < SIZE; j++)
	{
		xprintf("%u\t", rx_buffer[j]);
 7fa:	04 e3       	ldi	r16, 0x34	; 52
 7fc:	11 e0       	ldi	r17, 0x01	; 1
 7fe:	89 91       	ld	r24, Y+
 800:	1f 92       	push	r1
 802:	8f 93       	push	r24
 804:	1f 93       	push	r17
 806:	0f 93       	push	r16
 808:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
{
    avr_uart_init();
	init_spi_master();
	eeprom_write(0x00, SIZE, rom_contents);
	eeprom_read(0x00, SIZE, rx_buffer);
	for (int j = 0; j < SIZE; j++)
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	c8 34       	cpi	r28, 0x48	; 72
 818:	d8 07       	cpc	r29, r24
 81a:	89 f7       	brne	.-30     	; 0x7fe <main+0x30>
	{
		xprintf("%u\t", rx_buffer[j]);
	}
    xprintf("\n");
 81c:	88 e3       	ldi	r24, 0x38	; 56
 81e:	91 e0       	ldi	r25, 0x01	; 1
 820:	9f 93       	push	r25
 822:	8f 93       	push	r24
 824:	0e 94 15 03 	call	0x62a	; 0x62a <xprintf>
	return 0;
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
}
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	08 95       	ret

0000083a <__udivmodsi4>:
 83a:	a1 e2       	ldi	r26, 0x21	; 33
 83c:	1a 2e       	mov	r1, r26
 83e:	aa 1b       	sub	r26, r26
 840:	bb 1b       	sub	r27, r27
 842:	fd 01       	movw	r30, r26
 844:	0d c0       	rjmp	.+26     	; 0x860 <__udivmodsi4_ep>

00000846 <__udivmodsi4_loop>:
 846:	aa 1f       	adc	r26, r26
 848:	bb 1f       	adc	r27, r27
 84a:	ee 1f       	adc	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	a2 17       	cp	r26, r18
 850:	b3 07       	cpc	r27, r19
 852:	e4 07       	cpc	r30, r20
 854:	f5 07       	cpc	r31, r21
 856:	20 f0       	brcs	.+8      	; 0x860 <__udivmodsi4_ep>
 858:	a2 1b       	sub	r26, r18
 85a:	b3 0b       	sbc	r27, r19
 85c:	e4 0b       	sbc	r30, r20
 85e:	f5 0b       	sbc	r31, r21

00000860 <__udivmodsi4_ep>:
 860:	66 1f       	adc	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	1a 94       	dec	r1
 86a:	69 f7       	brne	.-38     	; 0x846 <__udivmodsi4_loop>
 86c:	60 95       	com	r22
 86e:	70 95       	com	r23
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	9b 01       	movw	r18, r22
 876:	ac 01       	movw	r20, r24
 878:	bd 01       	movw	r22, r26
 87a:	cf 01       	movw	r24, r30
 87c:	08 95       	ret

0000087e <strlen>:
 87e:	fc 01       	movw	r30, r24
 880:	01 90       	ld	r0, Z+
 882:	00 20       	and	r0, r0
 884:	e9 f7       	brne	.-6      	; 0x880 <strlen+0x2>
 886:	80 95       	com	r24
 888:	90 95       	com	r25
 88a:	8e 0f       	add	r24, r30
 88c:	9f 1f       	adc	r25, r31
 88e:	08 95       	ret

00000890 <_exit>:
 890:	f8 94       	cli

00000892 <__stop_program>:
 892:	ff cf       	rjmp	.-2      	; 0x892 <__stop_program>
